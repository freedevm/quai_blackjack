{"id":"8c4eb86157b3861e4285ee996cf6bca3","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"contracts/Address.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}"},"contracts/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\r\n\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS\r\n    }\r\n\r\n    /**\r\n     * @dev The signature derives the `address(0)`.\r\n     */\r\n    error ECDSAInvalidSignature();\r\n\r\n    /**\r\n     * @dev The signature has an invalid length.\r\n     */\r\n    error ECDSAInvalidSignatureLength(uint256 length);\r\n\r\n    /**\r\n     * @dev The signature has an S value that is in the upper half order.\r\n     */\r\n    error ECDSAInvalidSignatureS(bytes32 s);\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\r\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\r\n     * and a bytes32 providing additional information about the error.\r\n     *\r\n     * If no error is returned, then the address can be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes memory signature\r\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly (\"memory-safe\") {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\r\n        _throwError(error, errorArg);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\r\n        unchecked {\r\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\r\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\r\n            return tryRecover(hash, v, r, s);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     */\r\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\r\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\r\n        _throwError(error, errorArg);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS, s);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\r\n        }\r\n\r\n        return (signer, RecoverError.NoError, bytes32(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\r\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\r\n        _throwError(error, errorArg);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\r\n     */\r\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert ECDSAInvalidSignature();\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert ECDSAInvalidSignatureS(errorArg);\r\n        }\r\n    }\r\n}"},"contracts/EIP712.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/EIP712.sol)\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\r\nimport {ShortStrings, ShortString} from \"./ShortStrings.sol\";\r\nimport {IERC5267} from \"./IERC5267.sol\";\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\r\n *\r\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\r\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\r\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\r\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\r\n *\r\n * This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\r\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\r\n * ({_hashTypedDataV4}).\r\n *\r\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\r\n * the chain id to protect against replay attacks on an eventual fork of the chain.\r\n *\r\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\r\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\r\n *\r\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\r\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\r\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\r\n *\r\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\r\n */\r\nabstract contract EIP712 is IERC5267 {\r\n    using ShortStrings for *;\r\n\r\n    bytes32 private constant TYPE_HASH =\r\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\r\n\r\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\r\n    // invalidate the cached domain separator if the chain id changes.\r\n    bytes32 private immutable _cachedDomainSeparator;\r\n    uint256 private immutable _cachedChainId;\r\n    address private immutable _cachedThis;\r\n\r\n    bytes32 private immutable _hashedName;\r\n    bytes32 private immutable _hashedVersion;\r\n\r\n    ShortString private immutable _name;\r\n    ShortString private immutable _version;\r\n    string private _nameFallback;\r\n    string private _versionFallback;\r\n\r\n    /**\r\n     * @dev Initializes the domain separator and parameter caches.\r\n     *\r\n     * The meaning of `name` and `version` is specified in\r\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\r\n     *\r\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\r\n     * - `version`: the current major version of the signing domain.\r\n     *\r\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\r\n     * contract upgrade].\r\n     */\r\n    constructor(string memory name, string memory version) {\r\n        _name = name.toShortStringWithFallback(_nameFallback);\r\n        _version = version.toShortStringWithFallback(_versionFallback);\r\n        _hashedName = keccak256(bytes(name));\r\n        _hashedVersion = keccak256(bytes(version));\r\n\r\n        _cachedChainId = block.chainid;\r\n        _cachedDomainSeparator = _buildDomainSeparator();\r\n        _cachedThis = address(this);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the domain separator for the current chain.\r\n     */\r\n    function _domainSeparatorV4() internal view returns (bytes32) {\r\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\r\n            return _cachedDomainSeparator;\r\n        } else {\r\n            return _buildDomainSeparator();\r\n        }\r\n    }\r\n\r\n    function _buildDomainSeparator() private view returns (bytes32) {\r\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\r\n     * function returns the hash of the fully encoded EIP712 message for this domain.\r\n     *\r\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\r\n     *\r\n     * ```solidity\r\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\r\n     *     keccak256(\"Mail(address to,string contents)\"),\r\n     *     mailTo,\r\n     *     keccak256(bytes(mailContents))\r\n     * )));\r\n     * address signer = ECDSA.recover(digest, signature);\r\n     * ```\r\n     */\r\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\r\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC-5267}.\r\n     */\r\n    function eip712Domain()\r\n        public\r\n        view\r\n        virtual\r\n        returns (\r\n            bytes1 fields,\r\n            string memory name,\r\n            string memory version,\r\n            uint256 chainId,\r\n            address verifyingContract,\r\n            bytes32 salt,\r\n            uint256[] memory extensions\r\n        )\r\n    {\r\n        return (\r\n            hex\"0f\", // 01111\r\n            _EIP712Name(),\r\n            _EIP712Version(),\r\n            block.chainid,\r\n            address(this),\r\n            bytes32(0),\r\n            new uint256[](0)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev The name parameter for the EIP712 domain.\r\n     *\r\n     * NOTE: By default this function reads _name which is an immutable value.\r\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function _EIP712Name() internal view returns (string memory) {\r\n        return _name.toStringWithFallback(_nameFallback);\r\n    }\r\n\r\n    /**\r\n     * @dev The version parameter for the EIP712 domain.\r\n     *\r\n     * NOTE: By default this function reads _version which is an immutable value.\r\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function _EIP712Version() internal view returns (string memory) {\r\n        return _version.toStringWithFallback(_versionFallback);\r\n    }\r\n}"},"contracts/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"./Address.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"./EIP712.sol\";\r\nimport \"./Nonces.sol\";\r\nimport \"./IERC20Permit.sol\";\r\nimport \"./ECDSA.sol\";\r\n\r\ncontract ERC20 is IERC20, IERC20Metadata, IERC20Permit, EIP712, Nonces {\r\n    using Address for address;\r\n\r\n    bytes32 private constant PERMIT_TYPEHASH =\r\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n\r\n    /**\r\n     * @dev Permit deadline has expired.\r\n     */\r\n    error ERC2612ExpiredSignature(uint256 deadline);\r\n\r\n    /**\r\n     * @dev Mismatched signature.\r\n     */\r\n    error ERC2612InvalidSigner(address signer, address owner);\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 totalSupply_\r\n    ) EIP712(name_, \"1\") {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _mint(msg.sender, totalSupply_);\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, msg.sender, currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[msg.sender][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC20Permit\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual {\r\n        if (block.timestamp > deadline) {\r\n            revert ERC2612ExpiredSignature(deadline);\r\n        }\r\n\r\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\r\n\r\n        bytes32 hash = _hashTypedDataV4(structHash);\r\n\r\n        address signer = ECDSA.recover(hash, v, r, s);\r\n        if (signer != owner) {\r\n            revert ERC2612InvalidSigner(signer, owner);\r\n        }\r\n\r\n        _approve(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC20Permit\r\n     */\r\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\r\n        return super.nonces(owner);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC20Permit\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\r\n        return _domainSeparatorV4();\r\n    }\r\n}\r\n"},"contracts/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n"},"contracts/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n"},"contracts/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.17;\r\n\r\n/**\r\n * @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}"},"contracts/IERC5267.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IERC5267 {\r\n    /**\r\n     * @dev MAY be emitted to signal that the domain could have changed.\r\n     */\r\n    event EIP712DomainChanged();\r\n\r\n    /**\r\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\r\n     * signature.\r\n     */\r\n    function eip712Domain()\r\n        external\r\n        view\r\n        returns (\r\n            bytes1 fields,\r\n            string memory name,\r\n            string memory version,\r\n            uint256 chainId,\r\n            address verifyingContract,\r\n            bytes32 salt,\r\n            uint256[] memory extensions\r\n        );\r\n}"},"contracts/Math.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\r\n\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Muldiv operation overflow.\r\n     */\r\n    error MathOverflowedMulDiv();\r\n\r\n    enum Rounding {\r\n        Floor, // Toward negative infinity\r\n        Ceil, // Toward positive infinity\r\n        Trunc, // Toward zero\r\n        Expand // Away from zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds towards infinity instead\r\n     * of rounding towards zero.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (b == 0) {\r\n            // Guarantee the same behavior as in a regular Solidity division.\r\n            return a / b;\r\n        }\r\n\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\r\n     * denominator == 0.\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\r\n     * Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\r\n                // The surrounding unchecked block does not change this fact.\r\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            if (denominator <= prod1) {\r\n                revert MathOverflowedMulDiv();\r\n            }\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\r\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            uint256 twos = denominator & (0 - denominator);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\r\n            // works in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\r\n     * towards zero.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10 ** 64) {\r\n                value /= 10 ** 64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10 ** 32) {\r\n                value /= 10 ** 32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10 ** 16) {\r\n                value /= 10 ** 16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10 ** 8) {\r\n                value /= 10 ** 8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10 ** 4) {\r\n                value /= 10 ** 4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10 ** 2) {\r\n                value /= 10 ** 2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10 ** 1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\r\n     */\r\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\r\n        return uint8(rounding) % 2 == 1;\r\n    }\r\n}\r\n"},"contracts/MessageHashUtils.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MessageHashUtils.sol)\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport {Strings} from \"./Strings.sol\";\r\n\r\n/**\r\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\r\n *\r\n * The library provides methods for generating a hash of a message that conforms to the\r\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\r\n * specifications.\r\n */\r\nlibrary MessageHashUtils {\r\n    /**\r\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\r\n     * `0x45` (`personal_sign` messages).\r\n     *\r\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\r\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\r\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\r\n     *\r\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\r\n     * keccak256, although any bytes32 value can be safely used because the final digest will\r\n     * be re-hashed.\r\n     *\r\n     * See {ECDSA-recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\r\n        assembly (\"memory-safe\") {\r\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\r\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\r\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\r\n     * `0x45` (`personal_sign` messages).\r\n     *\r\n     * The digest is calculated by prefixing an arbitrary `message` with\r\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\r\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\r\n     *\r\n     * See {ECDSA-recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\r\n        return\r\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\r\n     * `0x00` (data with intended validator).\r\n     *\r\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\r\n     * `validator` address. Then hashing the result.\r\n     *\r\n     * See {ECDSA-recover}.\r\n     */\r\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\r\n     *\r\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\r\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {ECDSA-recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\r\n        assembly (\"memory-safe\") {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, hex\"19_01\")\r\n            mstore(add(ptr, 0x02), domainSeparator)\r\n            mstore(add(ptr, 0x22), structHash)\r\n            digest := keccak256(ptr, 0x42)\r\n        }\r\n    }\r\n}"},"contracts/Nonces.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\r\n */\r\nabstract contract Nonces {\r\n    /**\r\n     * @dev The nonce used for an `account` is not the expected current nonce.\r\n     */\r\n    error InvalidAccountNonce(address account, uint256 currentNonce);\r\n\r\n    mapping(address => uint256) private _nonces;\r\n\r\n    /**\r\n     * @dev Returns the next unused nonce for an address.\r\n     */\r\n    function nonces(address owner) public view virtual returns (uint256) {\r\n        return _nonces[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Consumes a nonce.\r\n     *\r\n     * Returns the current value and increments nonce.\r\n     */\r\n    function _useNonce(address owner) internal virtual returns (uint256) {\r\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\r\n        // decremented or reset. This guarantees that the nonce never overflows.\r\n        unchecked {\r\n            // It is important to do x++ and not ++x here.\r\n            return _nonces[owner]++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\r\n     */\r\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\r\n        uint256 current = _useNonce(owner);\r\n        if (nonce != current) {\r\n            revert InvalidAccountNonce(owner, current);\r\n        }\r\n    }\r\n}"},"contracts/Panic.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\r\n\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @dev Helper library for emitting standardized panic codes.\r\n *\r\n * ```solidity\r\n * contract Example {\r\n *      using Panic for uint256;\r\n *\r\n *      // Use any of the declared internal constants\r\n *      function foo() { Panic.GENERIC.panic(); }\r\n *\r\n *      // Alternatively\r\n *      function foo() { Panic.panic(Panic.GENERIC); }\r\n * }\r\n * ```\r\n *\r\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\r\n *\r\n * _Available since v5.1._\r\n */\r\n// slither-disable-next-line unused-state\r\nlibrary Panic {\r\n    /// @dev generic / unspecified error\r\n    uint256 internal constant GENERIC = 0x00;\r\n    /// @dev used by the assert() builtin\r\n    uint256 internal constant ASSERT = 0x01;\r\n    /// @dev arithmetic underflow or overflow\r\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\r\n    /// @dev division or modulo by zero\r\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\r\n    /// @dev enum conversion error\r\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\r\n    /// @dev invalid encoding in storage\r\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\r\n    /// @dev empty array pop\r\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\r\n    /// @dev array out of bounds access\r\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\r\n    /// @dev resource error (too large allocation or too large array)\r\n    uint256 internal constant RESOURCE_ERROR = 0x41;\r\n    /// @dev calling invalid internal function\r\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\r\n\r\n    /// @dev Reverts with a panic code. Recommended to use with\r\n    /// the internal constants with predefined codes.\r\n    function panic(uint256 code) internal pure {\r\n        assembly (\"memory-safe\") {\r\n            mstore(0x00, 0x4e487b71)\r\n            mstore(0x20, code)\r\n            revert(0x1c, 0x24)\r\n        }\r\n    }\r\n}"},"contracts/SafeCast.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\r\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\r\n\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeCast {\r\n    /**\r\n     * @dev Value doesn't fit in an uint of `bits` size.\r\n     */\r\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\r\n\r\n    /**\r\n     * @dev An int value doesn't fit in an uint of `bits` size.\r\n     */\r\n    error SafeCastOverflowedIntToUint(int256 value);\r\n\r\n    /**\r\n     * @dev Value doesn't fit in an int of `bits` size.\r\n     */\r\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\r\n\r\n    /**\r\n     * @dev An uint value doesn't fit in an int of `bits` size.\r\n     */\r\n    error SafeCastOverflowedUintToInt(uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint248 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint248).\r\n     *\r\n     * Counterpart to Solidity's `uint248` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 248 bits\r\n     */\r\n    function toUint248(uint256 value) internal pure returns (uint248) {\r\n        if (value > type(uint248).max) {\r\n            revert SafeCastOverflowedUintDowncast(248, value);\r\n        }\r\n        return uint248(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint240 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint240).\r\n     *\r\n     * Counterpart to Solidity's `uint240` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 240 bits\r\n     */\r\n    function toUint240(uint256 value) internal pure returns (uint240) {\r\n        if (value > type(uint240).max) {\r\n            revert SafeCastOverflowedUintDowncast(240, value);\r\n        }\r\n        return uint240(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint232 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint232).\r\n     *\r\n     * Counterpart to Solidity's `uint232` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 232 bits\r\n     */\r\n    function toUint232(uint256 value) internal pure returns (uint232) {\r\n        if (value > type(uint232).max) {\r\n            revert SafeCastOverflowedUintDowncast(232, value);\r\n        }\r\n        return uint232(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint224 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint224).\r\n     *\r\n     * Counterpart to Solidity's `uint224` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 224 bits\r\n     */\r\n    function toUint224(uint256 value) internal pure returns (uint224) {\r\n        if (value > type(uint224).max) {\r\n            revert SafeCastOverflowedUintDowncast(224, value);\r\n        }\r\n        return uint224(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint216 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint216).\r\n     *\r\n     * Counterpart to Solidity's `uint216` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 216 bits\r\n     */\r\n    function toUint216(uint256 value) internal pure returns (uint216) {\r\n        if (value > type(uint216).max) {\r\n            revert SafeCastOverflowedUintDowncast(216, value);\r\n        }\r\n        return uint216(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint208 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint208).\r\n     *\r\n     * Counterpart to Solidity's `uint208` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 208 bits\r\n     */\r\n    function toUint208(uint256 value) internal pure returns (uint208) {\r\n        if (value > type(uint208).max) {\r\n            revert SafeCastOverflowedUintDowncast(208, value);\r\n        }\r\n        return uint208(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint200 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint200).\r\n     *\r\n     * Counterpart to Solidity's `uint200` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 200 bits\r\n     */\r\n    function toUint200(uint256 value) internal pure returns (uint200) {\r\n        if (value > type(uint200).max) {\r\n            revert SafeCastOverflowedUintDowncast(200, value);\r\n        }\r\n        return uint200(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint192 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint192).\r\n     *\r\n     * Counterpart to Solidity's `uint192` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 192 bits\r\n     */\r\n    function toUint192(uint256 value) internal pure returns (uint192) {\r\n        if (value > type(uint192).max) {\r\n            revert SafeCastOverflowedUintDowncast(192, value);\r\n        }\r\n        return uint192(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint184 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint184).\r\n     *\r\n     * Counterpart to Solidity's `uint184` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 184 bits\r\n     */\r\n    function toUint184(uint256 value) internal pure returns (uint184) {\r\n        if (value > type(uint184).max) {\r\n            revert SafeCastOverflowedUintDowncast(184, value);\r\n        }\r\n        return uint184(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint176 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint176).\r\n     *\r\n     * Counterpart to Solidity's `uint176` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 176 bits\r\n     */\r\n    function toUint176(uint256 value) internal pure returns (uint176) {\r\n        if (value > type(uint176).max) {\r\n            revert SafeCastOverflowedUintDowncast(176, value);\r\n        }\r\n        return uint176(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint168 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint168).\r\n     *\r\n     * Counterpart to Solidity's `uint168` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 168 bits\r\n     */\r\n    function toUint168(uint256 value) internal pure returns (uint168) {\r\n        if (value > type(uint168).max) {\r\n            revert SafeCastOverflowedUintDowncast(168, value);\r\n        }\r\n        return uint168(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint160 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint160).\r\n     *\r\n     * Counterpart to Solidity's `uint160` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 160 bits\r\n     */\r\n    function toUint160(uint256 value) internal pure returns (uint160) {\r\n        if (value > type(uint160).max) {\r\n            revert SafeCastOverflowedUintDowncast(160, value);\r\n        }\r\n        return uint160(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint152 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint152).\r\n     *\r\n     * Counterpart to Solidity's `uint152` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 152 bits\r\n     */\r\n    function toUint152(uint256 value) internal pure returns (uint152) {\r\n        if (value > type(uint152).max) {\r\n            revert SafeCastOverflowedUintDowncast(152, value);\r\n        }\r\n        return uint152(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint144 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint144).\r\n     *\r\n     * Counterpart to Solidity's `uint144` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 144 bits\r\n     */\r\n    function toUint144(uint256 value) internal pure returns (uint144) {\r\n        if (value > type(uint144).max) {\r\n            revert SafeCastOverflowedUintDowncast(144, value);\r\n        }\r\n        return uint144(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint136 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint136).\r\n     *\r\n     * Counterpart to Solidity's `uint136` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 136 bits\r\n     */\r\n    function toUint136(uint256 value) internal pure returns (uint136) {\r\n        if (value > type(uint136).max) {\r\n            revert SafeCastOverflowedUintDowncast(136, value);\r\n        }\r\n        return uint136(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        if (value > type(uint128).max) {\r\n            revert SafeCastOverflowedUintDowncast(128, value);\r\n        }\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint120 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint120).\r\n     *\r\n     * Counterpart to Solidity's `uint120` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 120 bits\r\n     */\r\n    function toUint120(uint256 value) internal pure returns (uint120) {\r\n        if (value > type(uint120).max) {\r\n            revert SafeCastOverflowedUintDowncast(120, value);\r\n        }\r\n        return uint120(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint112 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint112).\r\n     *\r\n     * Counterpart to Solidity's `uint112` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 112 bits\r\n     */\r\n    function toUint112(uint256 value) internal pure returns (uint112) {\r\n        if (value > type(uint112).max) {\r\n            revert SafeCastOverflowedUintDowncast(112, value);\r\n        }\r\n        return uint112(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint104 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint104).\r\n     *\r\n     * Counterpart to Solidity's `uint104` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 104 bits\r\n     */\r\n    function toUint104(uint256 value) internal pure returns (uint104) {\r\n        if (value > type(uint104).max) {\r\n            revert SafeCastOverflowedUintDowncast(104, value);\r\n        }\r\n        return uint104(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint96 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint96).\r\n     *\r\n     * Counterpart to Solidity's `uint96` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 96 bits\r\n     */\r\n    function toUint96(uint256 value) internal pure returns (uint96) {\r\n        if (value > type(uint96).max) {\r\n            revert SafeCastOverflowedUintDowncast(96, value);\r\n        }\r\n        return uint96(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint88 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint88).\r\n     *\r\n     * Counterpart to Solidity's `uint88` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 88 bits\r\n     */\r\n    function toUint88(uint256 value) internal pure returns (uint88) {\r\n        if (value > type(uint88).max) {\r\n            revert SafeCastOverflowedUintDowncast(88, value);\r\n        }\r\n        return uint88(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint80 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint80).\r\n     *\r\n     * Counterpart to Solidity's `uint80` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 80 bits\r\n     */\r\n    function toUint80(uint256 value) internal pure returns (uint80) {\r\n        if (value > type(uint80).max) {\r\n            revert SafeCastOverflowedUintDowncast(80, value);\r\n        }\r\n        return uint80(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint72 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint72).\r\n     *\r\n     * Counterpart to Solidity's `uint72` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 72 bits\r\n     */\r\n    function toUint72(uint256 value) internal pure returns (uint72) {\r\n        if (value > type(uint72).max) {\r\n            revert SafeCastOverflowedUintDowncast(72, value);\r\n        }\r\n        return uint72(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        if (value > type(uint64).max) {\r\n            revert SafeCastOverflowedUintDowncast(64, value);\r\n        }\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint56 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint56).\r\n     *\r\n     * Counterpart to Solidity's `uint56` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 56 bits\r\n     */\r\n    function toUint56(uint256 value) internal pure returns (uint56) {\r\n        if (value > type(uint56).max) {\r\n            revert SafeCastOverflowedUintDowncast(56, value);\r\n        }\r\n        return uint56(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint48 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint48).\r\n     *\r\n     * Counterpart to Solidity's `uint48` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 48 bits\r\n     */\r\n    function toUint48(uint256 value) internal pure returns (uint48) {\r\n        if (value > type(uint48).max) {\r\n            revert SafeCastOverflowedUintDowncast(48, value);\r\n        }\r\n        return uint48(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint40 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint40).\r\n     *\r\n     * Counterpart to Solidity's `uint40` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 40 bits\r\n     */\r\n    function toUint40(uint256 value) internal pure returns (uint40) {\r\n        if (value > type(uint40).max) {\r\n            revert SafeCastOverflowedUintDowncast(40, value);\r\n        }\r\n        return uint40(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        if (value > type(uint32).max) {\r\n            revert SafeCastOverflowedUintDowncast(32, value);\r\n        }\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint24 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint24).\r\n     *\r\n     * Counterpart to Solidity's `uint24` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 24 bits\r\n     */\r\n    function toUint24(uint256 value) internal pure returns (uint24) {\r\n        if (value > type(uint24).max) {\r\n            revert SafeCastOverflowedUintDowncast(24, value);\r\n        }\r\n        return uint24(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        if (value > type(uint16).max) {\r\n            revert SafeCastOverflowedUintDowncast(16, value);\r\n        }\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        if (value > type(uint8).max) {\r\n            revert SafeCastOverflowedUintDowncast(8, value);\r\n        }\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        if (value < 0) {\r\n            revert SafeCastOverflowedIntToUint(value);\r\n        }\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int248 from int256, reverting on\r\n     * overflow (when the input is less than smallest int248 or\r\n     * greater than largest int248).\r\n     *\r\n     * Counterpart to Solidity's `int248` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 248 bits\r\n     */\r\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\r\n        downcasted = int248(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(248, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int240 from int256, reverting on\r\n     * overflow (when the input is less than smallest int240 or\r\n     * greater than largest int240).\r\n     *\r\n     * Counterpart to Solidity's `int240` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 240 bits\r\n     */\r\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\r\n        downcasted = int240(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(240, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int232 from int256, reverting on\r\n     * overflow (when the input is less than smallest int232 or\r\n     * greater than largest int232).\r\n     *\r\n     * Counterpart to Solidity's `int232` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 232 bits\r\n     */\r\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\r\n        downcasted = int232(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(232, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int224 from int256, reverting on\r\n     * overflow (when the input is less than smallest int224 or\r\n     * greater than largest int224).\r\n     *\r\n     * Counterpart to Solidity's `int224` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 224 bits\r\n     */\r\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\r\n        downcasted = int224(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(224, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int216 from int256, reverting on\r\n     * overflow (when the input is less than smallest int216 or\r\n     * greater than largest int216).\r\n     *\r\n     * Counterpart to Solidity's `int216` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 216 bits\r\n     */\r\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\r\n        downcasted = int216(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(216, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int208 from int256, reverting on\r\n     * overflow (when the input is less than smallest int208 or\r\n     * greater than largest int208).\r\n     *\r\n     * Counterpart to Solidity's `int208` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 208 bits\r\n     */\r\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\r\n        downcasted = int208(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(208, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int200 from int256, reverting on\r\n     * overflow (when the input is less than smallest int200 or\r\n     * greater than largest int200).\r\n     *\r\n     * Counterpart to Solidity's `int200` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 200 bits\r\n     */\r\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\r\n        downcasted = int200(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(200, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int192 from int256, reverting on\r\n     * overflow (when the input is less than smallest int192 or\r\n     * greater than largest int192).\r\n     *\r\n     * Counterpart to Solidity's `int192` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 192 bits\r\n     */\r\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\r\n        downcasted = int192(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(192, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int184 from int256, reverting on\r\n     * overflow (when the input is less than smallest int184 or\r\n     * greater than largest int184).\r\n     *\r\n     * Counterpart to Solidity's `int184` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 184 bits\r\n     */\r\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\r\n        downcasted = int184(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(184, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int176 from int256, reverting on\r\n     * overflow (when the input is less than smallest int176 or\r\n     * greater than largest int176).\r\n     *\r\n     * Counterpart to Solidity's `int176` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 176 bits\r\n     */\r\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\r\n        downcasted = int176(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(176, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int168 from int256, reverting on\r\n     * overflow (when the input is less than smallest int168 or\r\n     * greater than largest int168).\r\n     *\r\n     * Counterpart to Solidity's `int168` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 168 bits\r\n     */\r\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\r\n        downcasted = int168(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(168, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int160 from int256, reverting on\r\n     * overflow (when the input is less than smallest int160 or\r\n     * greater than largest int160).\r\n     *\r\n     * Counterpart to Solidity's `int160` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 160 bits\r\n     */\r\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\r\n        downcasted = int160(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(160, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int152 from int256, reverting on\r\n     * overflow (when the input is less than smallest int152 or\r\n     * greater than largest int152).\r\n     *\r\n     * Counterpart to Solidity's `int152` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 152 bits\r\n     */\r\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\r\n        downcasted = int152(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(152, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int144 from int256, reverting on\r\n     * overflow (when the input is less than smallest int144 or\r\n     * greater than largest int144).\r\n     *\r\n     * Counterpart to Solidity's `int144` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 144 bits\r\n     */\r\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\r\n        downcasted = int144(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(144, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int136 from int256, reverting on\r\n     * overflow (when the input is less than smallest int136 or\r\n     * greater than largest int136).\r\n     *\r\n     * Counterpart to Solidity's `int136` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 136 bits\r\n     */\r\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\r\n        downcasted = int136(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(136, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\r\n        downcasted = int128(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(128, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int120 from int256, reverting on\r\n     * overflow (when the input is less than smallest int120 or\r\n     * greater than largest int120).\r\n     *\r\n     * Counterpart to Solidity's `int120` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 120 bits\r\n     */\r\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\r\n        downcasted = int120(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(120, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int112 from int256, reverting on\r\n     * overflow (when the input is less than smallest int112 or\r\n     * greater than largest int112).\r\n     *\r\n     * Counterpart to Solidity's `int112` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 112 bits\r\n     */\r\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\r\n        downcasted = int112(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(112, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int104 from int256, reverting on\r\n     * overflow (when the input is less than smallest int104 or\r\n     * greater than largest int104).\r\n     *\r\n     * Counterpart to Solidity's `int104` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 104 bits\r\n     */\r\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\r\n        downcasted = int104(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(104, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int96 from int256, reverting on\r\n     * overflow (when the input is less than smallest int96 or\r\n     * greater than largest int96).\r\n     *\r\n     * Counterpart to Solidity's `int96` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 96 bits\r\n     */\r\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\r\n        downcasted = int96(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(96, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int88 from int256, reverting on\r\n     * overflow (when the input is less than smallest int88 or\r\n     * greater than largest int88).\r\n     *\r\n     * Counterpart to Solidity's `int88` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 88 bits\r\n     */\r\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\r\n        downcasted = int88(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(88, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int80 from int256, reverting on\r\n     * overflow (when the input is less than smallest int80 or\r\n     * greater than largest int80).\r\n     *\r\n     * Counterpart to Solidity's `int80` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 80 bits\r\n     */\r\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\r\n        downcasted = int80(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(80, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int72 from int256, reverting on\r\n     * overflow (when the input is less than smallest int72 or\r\n     * greater than largest int72).\r\n     *\r\n     * Counterpart to Solidity's `int72` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 72 bits\r\n     */\r\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\r\n        downcasted = int72(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(72, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\r\n        downcasted = int64(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(64, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int56 from int256, reverting on\r\n     * overflow (when the input is less than smallest int56 or\r\n     * greater than largest int56).\r\n     *\r\n     * Counterpart to Solidity's `int56` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 56 bits\r\n     */\r\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\r\n        downcasted = int56(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(56, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int48 from int256, reverting on\r\n     * overflow (when the input is less than smallest int48 or\r\n     * greater than largest int48).\r\n     *\r\n     * Counterpart to Solidity's `int48` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 48 bits\r\n     */\r\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\r\n        downcasted = int48(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(48, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int40 from int256, reverting on\r\n     * overflow (when the input is less than smallest int40 or\r\n     * greater than largest int40).\r\n     *\r\n     * Counterpart to Solidity's `int40` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 40 bits\r\n     */\r\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\r\n        downcasted = int40(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(40, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\r\n        downcasted = int32(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(32, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int24 from int256, reverting on\r\n     * overflow (when the input is less than smallest int24 or\r\n     * greater than largest int24).\r\n     *\r\n     * Counterpart to Solidity's `int24` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 24 bits\r\n     */\r\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\r\n        downcasted = int24(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(24, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\r\n        downcasted = int16(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(16, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\r\n        downcasted = int8(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(8, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\r\n        if (value > uint256(type(int256).max)) {\r\n            revert SafeCastOverflowedUintToInt(value);\r\n        }\r\n        return int256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\r\n     */\r\n    function toUint(bool b) internal pure returns (uint256 u) {\r\n        assembly (\"memory-safe\") {\r\n            u := iszero(iszero(b))\r\n        }\r\n    }\r\n}"},"contracts/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Permit.sol\";\r\nimport \"./Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}"},"contracts/ShortStrings.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ShortStrings.sol)\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport {StorageSlot} from \"./StorageSlot.sol\";\r\n\r\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\r\n// | length  | 0x                                                              BB |\r\ntype ShortString is bytes32;\r\n\r\n/**\r\n * @dev This library provides functions to convert short memory strings\r\n * into a `ShortString` type that can be used as an immutable variable.\r\n *\r\n * Strings of arbitrary length can be optimized using this library if\r\n * they are short enough (up to 31 bytes) by packing them with their\r\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\r\n * fallback mechanism can be used for every other case.\r\n *\r\n * Usage example:\r\n *\r\n * ```solidity\r\n * contract Named {\r\n *     using ShortStrings for *;\r\n *\r\n *     ShortString private immutable _name;\r\n *     string private _nameFallback;\r\n *\r\n *     constructor(string memory contractName) {\r\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\r\n *     }\r\n *\r\n *     function name() external view returns (string memory) {\r\n *         return _name.toStringWithFallback(_nameFallback);\r\n *     }\r\n * }\r\n * ```\r\n */\r\nlibrary ShortStrings {\r\n    // Used as an identifier for strings longer than 31 bytes.\r\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\r\n\r\n    error StringTooLong(string str);\r\n    error InvalidShortString();\r\n\r\n    /**\r\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\r\n     *\r\n     * This will trigger a `StringTooLong` error is the input string is too long.\r\n     */\r\n    function toShortString(string memory str) internal pure returns (ShortString) {\r\n        bytes memory bstr = bytes(str);\r\n        if (bstr.length > 31) {\r\n            revert StringTooLong(str);\r\n        }\r\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\r\n    }\r\n\r\n    /**\r\n     * @dev Decode a `ShortString` back to a \"normal\" string.\r\n     */\r\n    function toString(ShortString sstr) internal pure returns (string memory) {\r\n        uint256 len = byteLength(sstr);\r\n        // using `new string(len)` would work locally but is not memory safe.\r\n        string memory str = new string(32);\r\n        assembly (\"memory-safe\") {\r\n            mstore(str, len)\r\n            mstore(add(str, 0x20), sstr)\r\n        }\r\n        return str;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the length of a `ShortString`.\r\n     */\r\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\r\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\r\n        if (result > 31) {\r\n            revert InvalidShortString();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\r\n     */\r\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\r\n        if (bytes(value).length < 32) {\r\n            return toShortString(value);\r\n        } else {\r\n            StorageSlot.getStringSlot(store).value = value;\r\n            return ShortString.wrap(FALLBACK_SENTINEL);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\r\n     */\r\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\r\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\r\n            return toString(value);\r\n        } else {\r\n            return store;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\r\n     * {setWithFallback}.\r\n     *\r\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\r\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\r\n     */\r\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\r\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\r\n            return byteLength(value);\r\n        } else {\r\n            return bytes(store).length;\r\n        }\r\n    }\r\n}"},"contracts/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport {SafeCast} from \"./SafeCast.sol\";\r\n\r\n/**\r\n * @dev Standard signed math utilities missing in the Solidity language.\r\n */\r\nlibrary SignedMath {\r\n    /**\r\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\r\n     *\r\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\r\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\r\n     * one branch when needed, making this function more expensive.\r\n     */\r\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\r\n        unchecked {\r\n            // branchless ternary works because:\r\n            // b ^ (a ^ b) == a\r\n            // b ^ 0 == b\r\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two signed numbers.\r\n     */\r\n    function max(int256 a, int256 b) internal pure returns (int256) {\r\n        return ternary(a > b, a, b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two signed numbers.\r\n     */\r\n    function min(int256 a, int256 b) internal pure returns (int256) {\r\n        return ternary(a < b, a, b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two signed numbers without overflow.\r\n     * The result is rounded towards zero.\r\n     */\r\n    function average(int256 a, int256 b) internal pure returns (int256) {\r\n        // Formula from the book \"Hacker's Delight\"\r\n        int256 x = (a & b) + ((a ^ b) >> 1);\r\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the absolute unsigned value of a signed value.\r\n     */\r\n    function abs(int256 n) internal pure returns (uint256) {\r\n        unchecked {\r\n            // Formula from the \"Bit Twiddling Hacks\" by Sean Eron Anderson.\r\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\r\n            // taking advantage of the most significant (or \"sign\" bit) in two's complement representation.\r\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\r\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\r\n            int256 mask = n >> 255;\r\n\r\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\r\n            return uint256((n + mask) ^ mask);\r\n        }\r\n    }\r\n}"},"contracts/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\r\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\r\n\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC-1967 implementation slot:\r\n * ```solidity\r\n * contract ERC1967 {\r\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(newImplementation.code.length > 0);\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: Consider using this library along with {SlotDerivation}.\r\n */\r\nlibrary StorageSlot {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    struct BooleanSlot {\r\n        bool value;\r\n    }\r\n\r\n    struct Bytes32Slot {\r\n        bytes32 value;\r\n    }\r\n\r\n    struct Uint256Slot {\r\n        uint256 value;\r\n    }\r\n\r\n    struct Int256Slot {\r\n        int256 value;\r\n    }\r\n\r\n    struct StringSlot {\r\n        string value;\r\n    }\r\n\r\n    struct BytesSlot {\r\n        bytes value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n     */\r\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        assembly (\"memory-safe\") {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\r\n        assembly (\"memory-safe\") {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\r\n     */\r\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\r\n        assembly (\"memory-safe\") {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\r\n     */\r\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\r\n        assembly (\"memory-safe\") {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\r\n     */\r\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\r\n        assembly (\"memory-safe\") {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\r\n     */\r\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\r\n        assembly (\"memory-safe\") {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\r\n     */\r\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\r\n        assembly (\"memory-safe\") {\r\n            r.slot := store.slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\r\n        assembly (\"memory-safe\") {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\r\n     */\r\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\r\n        assembly (\"memory-safe\") {\r\n            r.slot := store.slot\r\n        }\r\n    }\r\n}"},"contracts/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Strings.sol)\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport {Math} from \"./Math.sol\";\r\nimport {SafeCast} from \"./SafeCast.sol\";\r\nimport {SignedMath} from \"./SignedMath.sol\";\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    using SafeCast for *;\r\n\r\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\r\n    uint8 private constant ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev The `value` string doesn't fit in the specified `length`.\r\n     */\r\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\r\n\r\n    /**\r\n     * @dev The string being parsed contains characters that are not in scope of the given base.\r\n     */\r\n    error StringsInvalidChar();\r\n\r\n    /**\r\n     * @dev The string being parsed is not a properly formatted address.\r\n     */\r\n    error StringsInvalidAddressFormat();\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            assembly (\"memory-safe\") {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                assembly (\"memory-safe\") {\r\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toStringSigned(int256 value) internal pure returns (string memory) {\r\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        uint256 localValue = value;\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\r\n            localValue >>= 4;\r\n        }\r\n        if (localValue != 0) {\r\n            revert StringsInsufficientHexLength(value, length);\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\r\n     * representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\r\n     * representation, according to EIP-55.\r\n     */\r\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\r\n        bytes memory buffer = bytes(toHexString(addr));\r\n\r\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\r\n        uint256 hashValue;\r\n        assembly (\"memory-safe\") {\r\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\r\n        }\r\n\r\n        for (uint256 i = 41; i > 1; --i) {\r\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\r\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\r\n                // case shift by xoring with 0x20\r\n                buffer[i] ^= 0x20;\r\n            }\r\n            hashValue >>= 4;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the two strings are equal.\r\n     */\r\n    function equal(string memory a, string memory b) internal pure returns (bool) {\r\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\r\n    }\r\n\r\n    /**\r\n     * @dev Parse a decimal string and returns the value as a `uint256`.\r\n     *\r\n     * Requirements:\r\n     * - The string must be formatted as `[0-9]*`\r\n     * - The result must fit into an `uint256` type\r\n     */\r\n    function parseUint(string memory input) internal pure returns (uint256) {\r\n        return parseUint(input, 0, bytes(input).length);\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\r\n     * `end` (excluded).\r\n     *\r\n     * Requirements:\r\n     * - The substring must be formatted as `[0-9]*`\r\n     * - The result must fit into an `uint256` type\r\n     */\r\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\r\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\r\n        if (!success) revert StringsInvalidChar();\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\r\n     *\r\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\r\n     */\r\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\r\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\r\n     * character.\r\n     *\r\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\r\n     */\r\n    function tryParseUint(\r\n        string memory input,\r\n        uint256 begin,\r\n        uint256 end\r\n    ) internal pure returns (bool success, uint256 value) {\r\n        if (end > bytes(input).length || begin > end) return (false, 0);\r\n        return _tryParseUintUncheckedBounds(input, begin, end);\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {tryParseUint} that does not check bounds and returns (true, 0) if they are invalid.\r\n     */\r\n    function _tryParseUintUncheckedBounds(\r\n        string memory input,\r\n        uint256 begin,\r\n        uint256 end\r\n    ) private pure returns (bool success, uint256 value) {\r\n        bytes memory buffer = bytes(input);\r\n\r\n        uint256 result = 0;\r\n        for (uint256 i = begin; i < end; ++i) {\r\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\r\n            if (chr > 9) return (false, 0);\r\n            result *= 10;\r\n            result += chr;\r\n        }\r\n        return (true, result);\r\n    }\r\n\r\n    /**\r\n     * @dev Parse a decimal string and returns the value as a `int256`.\r\n     *\r\n     * Requirements:\r\n     * - The string must be formatted as `[-+]?[0-9]*`\r\n     * - The result must fit in an `int256` type.\r\n     */\r\n    function parseInt(string memory input) internal pure returns (int256) {\r\n        return parseInt(input, 0, bytes(input).length);\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\r\n     * `end` (excluded).\r\n     *\r\n     * Requirements:\r\n     * - The substring must be formatted as `[-+]?[0-9]*`\r\n     * - The result must fit in an `int256` type.\r\n     */\r\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\r\n        (bool success, int256 value) = tryParseInt(input, begin, end);\r\n        if (!success) revert StringsInvalidChar();\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\r\n     * the result does not fit in a `int256`.\r\n     *\r\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\r\n     */\r\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\r\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\r\n    }\r\n\r\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\r\n\r\n    /**\r\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\r\n     * character or if the result does not fit in a `int256`.\r\n     *\r\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\r\n     */\r\n    function tryParseInt(\r\n        string memory input,\r\n        uint256 begin,\r\n        uint256 end\r\n    ) internal pure returns (bool success, int256 value) {\r\n        if (end > bytes(input).length || begin > end) return (false, 0);\r\n        return _tryParseIntUncheckedBounds(input, begin, end);\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {tryParseInt} that does not check bounds and returns (true, 0) if they are invalid.\r\n     */\r\n    function _tryParseIntUncheckedBounds(\r\n        string memory input,\r\n        uint256 begin,\r\n        uint256 end\r\n    ) private pure returns (bool success, int256 value) {\r\n        bytes memory buffer = bytes(input);\r\n\r\n        // Check presence of a negative sign.\r\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\r\n        bool positiveSign = sign == bytes1(\"+\");\r\n        bool negativeSign = sign == bytes1(\"-\");\r\n        uint256 offset = (positiveSign || negativeSign).toUint();\r\n\r\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\r\n\r\n        if (absSuccess && absValue < ABS_MIN_INT256) {\r\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\r\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\r\n            return (true, type(int256).min);\r\n        } else return (false, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as a `uint256`.\r\n     *\r\n     * Requirements:\r\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\r\n     * - The result must fit in an `uint256` type.\r\n     */\r\n    function parseHexUint(string memory input) internal pure returns (uint256) {\r\n        return parseHexUint(input, 0, bytes(input).length);\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\r\n     * `end` (excluded).\r\n     *\r\n     * Requirements:\r\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\r\n     * - The result must fit in an `uint256` type.\r\n     */\r\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\r\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\r\n        if (!success) revert StringsInvalidChar();\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\r\n     *\r\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\r\n     */\r\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\r\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\r\n     * invalid character.\r\n     *\r\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\r\n     */\r\n    function tryParseHexUint(\r\n        string memory input,\r\n        uint256 begin,\r\n        uint256 end\r\n    ) internal pure returns (bool success, uint256 value) {\r\n        if (end > bytes(input).length || begin > end) return (false, 0);\r\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {tryParseHexUint} that does not check bounds and returns (true, 0) if they are invalid.\r\n     */\r\n    function _tryParseHexUintUncheckedBounds(\r\n        string memory input,\r\n        uint256 begin,\r\n        uint256 end\r\n    ) private pure returns (bool success, uint256 value) {\r\n        bytes memory buffer = bytes(input);\r\n\r\n        // skip 0x prefix if present\r\n        bool hasPrefix = (begin < end + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\"0x\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\r\n        uint256 offset = hasPrefix.toUint() * 2;\r\n\r\n        uint256 result = 0;\r\n        for (uint256 i = begin + offset; i < end; ++i) {\r\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\r\n            if (chr > 15) return (false, 0);\r\n            result *= 16;\r\n            unchecked {\r\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\r\n                // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.\r\n                result += chr;\r\n            }\r\n        }\r\n        return (true, result);\r\n    }\r\n\r\n    /**\r\n     * @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as an `address`.\r\n     *\r\n     * Requirements:\r\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\r\n     */\r\n    function parseAddress(string memory input) internal pure returns (address) {\r\n        return parseAddress(input, 0, bytes(input).length);\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\r\n     * `end` (excluded).\r\n     *\r\n     * Requirements:\r\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\r\n     */\r\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\r\n        (bool success, address value) = tryParseAddress(input, begin, end);\r\n        if (!success) revert StringsInvalidAddressFormat();\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\r\n     * formatted address. See {parseAddress} requirements.\r\n     */\r\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\r\n        return tryParseAddress(input, 0, bytes(input).length);\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\r\n     * formatted address. See {parseAddress} requirements.\r\n     */\r\n    function tryParseAddress(\r\n        string memory input,\r\n        uint256 begin,\r\n        uint256 end\r\n    ) internal pure returns (bool success, address value) {\r\n        // check that input is the correct length\r\n        bool hasPrefix = (begin < end + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\"0x\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\r\n\r\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\r\n\r\n        if (end - begin == expectedLength && end <= bytes(input).length) {\r\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\r\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\r\n            return (s, address(uint160(v)));\r\n        } else {\r\n            return (false, address(0));\r\n        }\r\n    }\r\n\r\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\r\n        uint8 value = uint8(chr);\r\n\r\n        // Try to parse `chr`:\r\n        // - Case 1: [0-9]\r\n        // - Case 2: [a-f]\r\n        // - Case 3: [A-F]\r\n        // - otherwise not supported\r\n        unchecked {\r\n            if (value > 47 && value < 58) value -= 48;\r\n            else if (value > 96 && value < 103) value -= 87;\r\n            else if (value > 64 && value < 71) value -= 55;\r\n            else return type(uint8).max;\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\r\n     *\r\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\r\n     * assembly block as such would prevent some optimizations.\r\n     */\r\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\r\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\r\n        assembly (\"memory-safe\") {\r\n            value := mload(add(buffer, add(0x20, offset)))\r\n        }\r\n    }\r\n}"}},"settings":{"optimizer":{"enabled":true,"runs":1000},"metadata":{"bytecodeHash":"ipfs","useLiteralContent":true},"evmVersion":"london","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout"],"":["ast"]}}}},"output":{"sources":{"contracts/Address.sol":{"ast":{"absolutePath":"contracts/Address.sol","exportedSymbols":{"Address":[294]},"id":295,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"35:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"62:69:0","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":294,"linearizedBaseContracts":[294],"name":"Address","nameLocation":"141:7:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":16,"nodeType":"Block","src":"1207:260:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":14,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":10,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"1436:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":11,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1444:4:0","memberName":"code","nodeType":"MemberAccess","src":"1436:12:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":12,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1449:6:0","memberName":"length","nodeType":"MemberAccess","src":"1436:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":13,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1458:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1436:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":9,"id":15,"nodeType":"Return","src":"1429:30:0"}]},"documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"156:979:0","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":17,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1150:10:0","nodeType":"FunctionDefinition","parameters":{"id":6,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5,"mutability":"mutable","name":"account","nameLocation":"1169:7:0","nodeType":"VariableDeclaration","scope":17,"src":"1161:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4,"name":"address","nodeType":"ElementaryTypeName","src":"1161:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1160:17:0"},"returnParameters":{"id":9,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":17,"src":"1201:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7,"name":"bool","nodeType":"ElementaryTypeName","src":"1201:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1200:6:0"},"scope":294,"src":"1141:326:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":50,"nodeType":"Block","src":"2473:246:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":32,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":28,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2500:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$294","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$294","typeString":"library Address"}],"id":27,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2492:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"2492:7:0","typeDescriptions":{}}},"id":29,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2492:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":30,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2506:7:0","memberName":"balance","nodeType":"MemberAccess","src":"2492:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":31,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"2517:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2492:31:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":33,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2525:31:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":25,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2484:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":34,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2484:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":35,"nodeType":"ExpressionStatement","src":"2484:73:0"},{"assignments":[37,null],"declarations":[{"constant":false,"id":37,"mutability":"mutable","name":"success","nameLocation":"2576:7:0","nodeType":"VariableDeclaration","scope":50,"src":"2571:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":36,"name":"bool","nodeType":"ElementaryTypeName","src":"2571:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":44,"initialValue":{"arguments":[{"hexValue":"","id":42,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2619:2:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":38,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20,"src":"2589:9:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":39,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2599:4:0","memberName":"call","nodeType":"MemberAccess","src":"2589:14:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":40,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"2611:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2589:29:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":43,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2589:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2570:52:0"},{"expression":{"arguments":[{"id":46,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"2641:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":47,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2650:60:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":45,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2633:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2633:78:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":49,"nodeType":"ExpressionStatement","src":"2633:78:0"}]},"documentation":{"id":18,"nodeType":"StructuredDocumentation","src":"1475:921:0","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":51,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2411:9:0","nodeType":"FunctionDefinition","parameters":{"id":23,"nodeType":"ParameterList","parameters":[{"constant":false,"id":20,"mutability":"mutable","name":"recipient","nameLocation":"2437:9:0","nodeType":"VariableDeclaration","scope":51,"src":"2421:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":19,"name":"address","nodeType":"ElementaryTypeName","src":"2421:15:0","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":22,"mutability":"mutable","name":"amount","nameLocation":"2456:6:0","nodeType":"VariableDeclaration","scope":51,"src":"2448:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":21,"name":"uint256","nodeType":"ElementaryTypeName","src":"2448:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2420:43:0"},"returnParameters":{"id":24,"nodeType":"ParameterList","parameters":[],"src":"2473:0:0"},"scope":294,"src":"2402:317:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":67,"nodeType":"Block","src":"3570:86:0","statements":[{"expression":{"arguments":[{"id":62,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"3601:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":63,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"3609:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3615:32:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":61,"name":"functionCall","nodeType":"Identifier","overloadedDeclarations":[68,88],"referencedDeclaration":88,"src":"3588:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3588:60:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":60,"id":66,"nodeType":"Return","src":"3581:67:0"}]},"documentation":{"id":52,"nodeType":"StructuredDocumentation","src":"2727:748:0","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":68,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3490:12:0","nodeType":"FunctionDefinition","parameters":{"id":57,"nodeType":"ParameterList","parameters":[{"constant":false,"id":54,"mutability":"mutable","name":"target","nameLocation":"3511:6:0","nodeType":"VariableDeclaration","scope":68,"src":"3503:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":53,"name":"address","nodeType":"ElementaryTypeName","src":"3503:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":56,"mutability":"mutable","name":"data","nameLocation":"3532:4:0","nodeType":"VariableDeclaration","scope":68,"src":"3519:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":55,"name":"bytes","nodeType":"ElementaryTypeName","src":"3519:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3502:35:0"},"returnParameters":{"id":60,"nodeType":"ParameterList","parameters":[{"constant":false,"id":59,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":68,"src":"3556:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":58,"name":"bytes","nodeType":"ElementaryTypeName","src":"3556:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3555:14:0"},"scope":294,"src":"3481:175:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":87,"nodeType":"Block","src":"4037:78:0","statements":[{"expression":{"arguments":[{"id":81,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"4077:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":82,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"4085:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4091:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":84,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":75,"src":"4094:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":80,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[108,158],"referencedDeclaration":158,"src":"4055:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":85,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4055:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":79,"id":86,"nodeType":"Return","src":"4048:59:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"3664:216:0","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":88,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3895:12:0","nodeType":"FunctionDefinition","parameters":{"id":76,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"mutability":"mutable","name":"target","nameLocation":"3926:6:0","nodeType":"VariableDeclaration","scope":88,"src":"3918:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"3918:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":73,"mutability":"mutable","name":"data","nameLocation":"3956:4:0","nodeType":"VariableDeclaration","scope":88,"src":"3943:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":72,"name":"bytes","nodeType":"ElementaryTypeName","src":"3943:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":75,"mutability":"mutable","name":"errorMessage","nameLocation":"3985:12:0","nodeType":"VariableDeclaration","scope":88,"src":"3971:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":74,"name":"string","nodeType":"ElementaryTypeName","src":"3971:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3907:97:0"},"returnParameters":{"id":79,"nodeType":"ParameterList","parameters":[{"constant":false,"id":78,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":88,"src":"4023:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":77,"name":"bytes","nodeType":"ElementaryTypeName","src":"4023:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4022:14:0"},"scope":294,"src":"3886:229:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":107,"nodeType":"Block","src":"4637:113:0","statements":[{"expression":{"arguments":[{"id":101,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":91,"src":"4677:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":102,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"4685:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":103,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"4691:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4698:43:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":100,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[108,158],"referencedDeclaration":158,"src":"4655:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4655:87:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":99,"id":106,"nodeType":"Return","src":"4648:94:0"}]},"documentation":{"id":89,"nodeType":"StructuredDocumentation","src":"4123:361:0","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":108,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4499:21:0","nodeType":"FunctionDefinition","parameters":{"id":96,"nodeType":"ParameterList","parameters":[{"constant":false,"id":91,"mutability":"mutable","name":"target","nameLocation":"4539:6:0","nodeType":"VariableDeclaration","scope":108,"src":"4531:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":90,"name":"address","nodeType":"ElementaryTypeName","src":"4531:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":93,"mutability":"mutable","name":"data","nameLocation":"4569:4:0","nodeType":"VariableDeclaration","scope":108,"src":"4556:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":92,"name":"bytes","nodeType":"ElementaryTypeName","src":"4556:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":95,"mutability":"mutable","name":"value","nameLocation":"4592:5:0","nodeType":"VariableDeclaration","scope":108,"src":"4584:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":94,"name":"uint256","nodeType":"ElementaryTypeName","src":"4584:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4520:84:0"},"returnParameters":{"id":99,"nodeType":"ParameterList","parameters":[{"constant":false,"id":98,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":108,"src":"4623:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":97,"name":"bytes","nodeType":"ElementaryTypeName","src":"4623:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4622:14:0"},"scope":294,"src":"4490:260:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":157,"nodeType":"Block","src":"5190:326:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":125,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5217:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$294","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$294","typeString":"library Address"}],"id":124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5209:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":123,"name":"address","nodeType":"ElementaryTypeName","src":"5209:7:0","typeDescriptions":{}}},"id":126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5209:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5223:7:0","memberName":"balance","nodeType":"MemberAccess","src":"5209:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":128,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"5234:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5209:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5241:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":122,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5201:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5201:81:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":132,"nodeType":"ExpressionStatement","src":"5201:81:0"},{"expression":{"arguments":[{"arguments":[{"id":135,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"5312:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":134,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":17,"src":"5301:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5301:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5321:31:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":133,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5293:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5293:60:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":139,"nodeType":"ExpressionStatement","src":"5293:60:0"},{"assignments":[141,143],"declarations":[{"constant":false,"id":141,"mutability":"mutable","name":"success","nameLocation":"5372:7:0","nodeType":"VariableDeclaration","scope":157,"src":"5367:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":140,"name":"bool","nodeType":"ElementaryTypeName","src":"5367:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":143,"mutability":"mutable","name":"returndata","nameLocation":"5394:10:0","nodeType":"VariableDeclaration","scope":157,"src":"5381:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":142,"name":"bytes","nodeType":"ElementaryTypeName","src":"5381:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":150,"initialValue":{"arguments":[{"id":148,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"5434:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":144,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"5408:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5415:4:0","memberName":"call","nodeType":"MemberAccess","src":"5408:11:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":146,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"5427:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5408:25:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5408:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5366:73:0"},{"expression":{"arguments":[{"id":152,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"5474:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":153,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":143,"src":"5483:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":154,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"5495:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":151,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"5457:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5457:51:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":121,"id":156,"nodeType":"Return","src":"5450:58:0"}]},"documentation":{"id":109,"nodeType":"StructuredDocumentation","src":"4758:242:0","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":158,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5015:21:0","nodeType":"FunctionDefinition","parameters":{"id":118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":111,"mutability":"mutable","name":"target","nameLocation":"5055:6:0","nodeType":"VariableDeclaration","scope":158,"src":"5047:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":110,"name":"address","nodeType":"ElementaryTypeName","src":"5047:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":113,"mutability":"mutable","name":"data","nameLocation":"5085:4:0","nodeType":"VariableDeclaration","scope":158,"src":"5072:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":112,"name":"bytes","nodeType":"ElementaryTypeName","src":"5072:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":115,"mutability":"mutable","name":"value","nameLocation":"5108:5:0","nodeType":"VariableDeclaration","scope":158,"src":"5100:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":114,"name":"uint256","nodeType":"ElementaryTypeName","src":"5100:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":117,"mutability":"mutable","name":"errorMessage","nameLocation":"5138:12:0","nodeType":"VariableDeclaration","scope":158,"src":"5124:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":116,"name":"string","nodeType":"ElementaryTypeName","src":"5124:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5036:121:0"},"returnParameters":{"id":121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":120,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":158,"src":"5176:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":119,"name":"bytes","nodeType":"ElementaryTypeName","src":"5176:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5175:14:0"},"scope":294,"src":"5006:510:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":174,"nodeType":"Block","src":"5801:99:0","statements":[{"expression":{"arguments":[{"id":169,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"5838:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":170,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"5846:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5852:39:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":168,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[175,210],"referencedDeclaration":210,"src":"5819:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5819:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":167,"id":173,"nodeType":"Return","src":"5812:80:0"}]},"documentation":{"id":159,"nodeType":"StructuredDocumentation","src":"5524:171:0","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":175,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5710:18:0","nodeType":"FunctionDefinition","parameters":{"id":164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":161,"mutability":"mutable","name":"target","nameLocation":"5737:6:0","nodeType":"VariableDeclaration","scope":175,"src":"5729:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":160,"name":"address","nodeType":"ElementaryTypeName","src":"5729:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":163,"mutability":"mutable","name":"data","nameLocation":"5758:4:0","nodeType":"VariableDeclaration","scope":175,"src":"5745:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":162,"name":"bytes","nodeType":"ElementaryTypeName","src":"5745:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5728:35:0"},"returnParameters":{"id":167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":166,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":175,"src":"5787:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":165,"name":"bytes","nodeType":"ElementaryTypeName","src":"5787:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5786:14:0"},"scope":294,"src":"5701:199:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":209,"nodeType":"Block","src":"6254:233:0","statements":[{"expression":{"arguments":[{"arguments":[{"id":189,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":178,"src":"6284:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":188,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":17,"src":"6273:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6273:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374","id":191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6293:38:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""},"value":"Address: static call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""}],"id":187,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6265:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6265:67:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":193,"nodeType":"ExpressionStatement","src":"6265:67:0"},{"assignments":[195,197],"declarations":[{"constant":false,"id":195,"mutability":"mutable","name":"success","nameLocation":"6351:7:0","nodeType":"VariableDeclaration","scope":209,"src":"6346:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":194,"name":"bool","nodeType":"ElementaryTypeName","src":"6346:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":197,"mutability":"mutable","name":"returndata","nameLocation":"6373:10:0","nodeType":"VariableDeclaration","scope":209,"src":"6360:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":196,"name":"bytes","nodeType":"ElementaryTypeName","src":"6360:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":202,"initialValue":{"arguments":[{"id":200,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":180,"src":"6405:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":198,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":178,"src":"6387:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6394:10:0","memberName":"staticcall","nodeType":"MemberAccess","src":"6387:17:0","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6387:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6345:65:0"},{"expression":{"arguments":[{"id":204,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"6445:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":205,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"6454:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":206,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":182,"src":"6466:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":203,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"6428:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6428:51:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":186,"id":208,"nodeType":"Return","src":"6421:58:0"}]},"documentation":{"id":176,"nodeType":"StructuredDocumentation","src":"5908:178:0","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":210,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6101:18:0","nodeType":"FunctionDefinition","parameters":{"id":183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":178,"mutability":"mutable","name":"target","nameLocation":"6138:6:0","nodeType":"VariableDeclaration","scope":210,"src":"6130:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":177,"name":"address","nodeType":"ElementaryTypeName","src":"6130:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":180,"mutability":"mutable","name":"data","nameLocation":"6168:4:0","nodeType":"VariableDeclaration","scope":210,"src":"6155:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":179,"name":"bytes","nodeType":"ElementaryTypeName","src":"6155:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":182,"mutability":"mutable","name":"errorMessage","nameLocation":"6197:12:0","nodeType":"VariableDeclaration","scope":210,"src":"6183:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":181,"name":"string","nodeType":"ElementaryTypeName","src":"6183:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6119:97:0"},"returnParameters":{"id":186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":185,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":210,"src":"6240:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":184,"name":"bytes","nodeType":"ElementaryTypeName","src":"6240:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6239:14:0"},"scope":294,"src":"6092:395:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":226,"nodeType":"Block","src":"6771:103:0","statements":[{"expression":{"arguments":[{"id":221,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"6810:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":222,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":215,"src":"6818:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6824:41:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":220,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[227,262],"referencedDeclaration":262,"src":"6789:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6789:77:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":219,"id":225,"nodeType":"Return","src":"6782:84:0"}]},"documentation":{"id":211,"nodeType":"StructuredDocumentation","src":"6495:173:0","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":227,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:0","nodeType":"FunctionDefinition","parameters":{"id":216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":213,"mutability":"mutable","name":"target","nameLocation":"6712:6:0","nodeType":"VariableDeclaration","scope":227,"src":"6704:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":212,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":215,"mutability":"mutable","name":"data","nameLocation":"6733:4:0","nodeType":"VariableDeclaration","scope":227,"src":"6720:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":214,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:0"},"returnParameters":{"id":219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":218,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":227,"src":"6757:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":217,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:0"},"scope":294,"src":"6674:200:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":261,"nodeType":"Block","src":"7227:237:0","statements":[{"expression":{"arguments":[{"arguments":[{"id":241,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"7257:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":240,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":17,"src":"7246:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7246:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374","id":243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7266:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""},"value":"Address: delegate call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""}],"id":239,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7238:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7238:69:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":245,"nodeType":"ExpressionStatement","src":"7238:69:0"},{"assignments":[247,249],"declarations":[{"constant":false,"id":247,"mutability":"mutable","name":"success","nameLocation":"7326:7:0","nodeType":"VariableDeclaration","scope":261,"src":"7321:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":246,"name":"bool","nodeType":"ElementaryTypeName","src":"7321:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":249,"mutability":"mutable","name":"returndata","nameLocation":"7348:10:0","nodeType":"VariableDeclaration","scope":261,"src":"7335:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":248,"name":"bytes","nodeType":"ElementaryTypeName","src":"7335:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":254,"initialValue":{"arguments":[{"id":252,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"7382:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":250,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"7362:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7369:12:0","memberName":"delegatecall","nodeType":"MemberAccess","src":"7362:19:0","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7362:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7320:67:0"},{"expression":{"arguments":[{"id":256,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"7422:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":257,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":249,"src":"7431:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":258,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":234,"src":"7443:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":255,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"7405:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7405:51:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":238,"id":260,"nodeType":"Return","src":"7398:58:0"}]},"documentation":{"id":228,"nodeType":"StructuredDocumentation","src":"6882:180:0","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":262,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7077:20:0","nodeType":"FunctionDefinition","parameters":{"id":235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":230,"mutability":"mutable","name":"target","nameLocation":"7116:6:0","nodeType":"VariableDeclaration","scope":262,"src":"7108:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":229,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":232,"mutability":"mutable","name":"data","nameLocation":"7146:4:0","nodeType":"VariableDeclaration","scope":262,"src":"7133:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":231,"name":"bytes","nodeType":"ElementaryTypeName","src":"7133:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":234,"mutability":"mutable","name":"errorMessage","nameLocation":"7175:12:0","nodeType":"VariableDeclaration","scope":262,"src":"7161:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":233,"name":"string","nodeType":"ElementaryTypeName","src":"7161:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7097:97:0"},"returnParameters":{"id":238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":237,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":262,"src":"7213:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":236,"name":"bytes","nodeType":"ElementaryTypeName","src":"7213:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7212:14:0"},"scope":294,"src":"7068:396:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":292,"nodeType":"Block","src":"7856:598:0","statements":[{"condition":{"id":274,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"7871:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":290,"nodeType":"Block","src":"7930:517:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":278,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":267,"src":"8016:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8027:6:0","memberName":"length","nodeType":"MemberAccess","src":"8016:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8036:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8016:21:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":288,"nodeType":"Block","src":"8381:55:0","statements":[{"expression":{"arguments":[{"id":285,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"8407:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":284,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"8400:6:0","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8400:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":287,"nodeType":"ExpressionStatement","src":"8400:20:0"}]},"id":289,"nodeType":"IfStatement","src":"8012:424:0","trueBody":{"id":283,"nodeType":"Block","src":"8039:336:0","statements":[{"AST":{"nodeType":"YulBlock","src":"8212:148:0","statements":[{"nodeType":"YulVariableDeclaration","src":"8235:40:0","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"8264:10:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8258:5:0"},"nodeType":"YulFunctionCall","src":"8258:17:0"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8239:15:0","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8308:2:0","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"8312:10:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8304:3:0"},"nodeType":"YulFunctionCall","src":"8304:19:0"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"8325:15:0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8297:6:0"},"nodeType":"YulFunctionCall","src":"8297:44:0"},"nodeType":"YulExpressionStatement","src":"8297:44:0"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":267,"isOffset":false,"isSlot":false,"src":"8264:10:0","valueSize":1},{"declaration":267,"isOffset":false,"isSlot":false,"src":"8312:10:0","valueSize":1}],"id":282,"nodeType":"InlineAssembly","src":"8203:157:0"}]}}]},"id":291,"nodeType":"IfStatement","src":"7867:580:0","trueBody":{"id":277,"nodeType":"Block","src":"7880:44:0","statements":[{"expression":{"id":275,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":267,"src":"7902:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":273,"id":276,"nodeType":"Return","src":"7895:17:0"}]}}]},"documentation":{"id":263,"nodeType":"StructuredDocumentation","src":"7472:214:0","text":" @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"},"id":293,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"7701:16:0","nodeType":"FunctionDefinition","parameters":{"id":270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":265,"mutability":"mutable","name":"success","nameLocation":"7733:7:0","nodeType":"VariableDeclaration","scope":293,"src":"7728:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":264,"name":"bool","nodeType":"ElementaryTypeName","src":"7728:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":267,"mutability":"mutable","name":"returndata","nameLocation":"7764:10:0","nodeType":"VariableDeclaration","scope":293,"src":"7751:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":266,"name":"bytes","nodeType":"ElementaryTypeName","src":"7751:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":269,"mutability":"mutable","name":"errorMessage","nameLocation":"7799:12:0","nodeType":"VariableDeclaration","scope":293,"src":"7785:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":268,"name":"string","nodeType":"ElementaryTypeName","src":"7785:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7717:101:0"},"returnParameters":{"id":273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":272,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":293,"src":"7842:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":271,"name":"bytes","nodeType":"ElementaryTypeName","src":"7842:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7841:14:0"},"scope":294,"src":"7692:762:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":295,"src":"133:8324:0","usedErrors":[]}],"src":"35:8422:0"},"id":0},"contracts/ECDSA.sol":{"ast":{"absolutePath":"contracts/ECDSA.sol","exportedSymbols":{"ECDSA":[642]},"id":643,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":296,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"115:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":297,"nodeType":"StructuredDocumentation","src":"142:210:1","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":642,"linearizedBaseContracts":[642],"name":"ECDSA","nameLocation":"362:5:1","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":302,"members":[{"id":298,"name":"NoError","nameLocation":"404:7:1","nodeType":"EnumValue","src":"404:7:1"},{"id":299,"name":"InvalidSignature","nameLocation":"422:16:1","nodeType":"EnumValue","src":"422:16:1"},{"id":300,"name":"InvalidSignatureLength","nameLocation":"449:22:1","nodeType":"EnumValue","src":"449:22:1"},{"id":301,"name":"InvalidSignatureS","nameLocation":"482:17:1","nodeType":"EnumValue","src":"482:17:1"}],"name":"RecoverError","nameLocation":"380:12:1","nodeType":"EnumDefinition","src":"375:131:1"},{"documentation":{"id":303,"nodeType":"StructuredDocumentation","src":"514:65:1","text":" @dev The signature derives the `address(0)`."},"errorSelector":"f645eedf","id":305,"name":"ECDSAInvalidSignature","nameLocation":"591:21:1","nodeType":"ErrorDefinition","parameters":{"id":304,"nodeType":"ParameterList","parameters":[],"src":"612:2:1"},"src":"585:30:1"},{"documentation":{"id":306,"nodeType":"StructuredDocumentation","src":"623:62:1","text":" @dev The signature has an invalid length."},"errorSelector":"fce698f7","id":310,"name":"ECDSAInvalidSignatureLength","nameLocation":"697:27:1","nodeType":"ErrorDefinition","parameters":{"id":309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":308,"mutability":"mutable","name":"length","nameLocation":"733:6:1","nodeType":"VariableDeclaration","scope":310,"src":"725:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":307,"name":"uint256","nodeType":"ElementaryTypeName","src":"725:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"724:16:1"},"src":"691:50:1"},{"documentation":{"id":311,"nodeType":"StructuredDocumentation","src":"749:87:1","text":" @dev The signature has an S value that is in the upper half order."},"errorSelector":"d78bce0c","id":315,"name":"ECDSAInvalidSignatureS","nameLocation":"848:22:1","nodeType":"ErrorDefinition","parameters":{"id":314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":313,"mutability":"mutable","name":"s","nameLocation":"879:1:1","nodeType":"VariableDeclaration","scope":315,"src":"871:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":312,"name":"bytes32","nodeType":"ElementaryTypeName","src":"871:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"870:11:1"},"src":"842:40:1"},{"body":{"id":367,"nodeType":"Block","src":"2342:638:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":330,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":320,"src":"2357:9:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2367:6:1","memberName":"length","nodeType":"MemberAccess","src":"2357:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2377:2:1","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2357:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":365,"nodeType":"Block","src":"2863:110:1","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2894:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":353,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2886:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":352,"name":"address","nodeType":"ElementaryTypeName","src":"2886:7:1","typeDescriptions":{}}},"id":355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2886:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":356,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"2898:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$302_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":357,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2911:22:1","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":300,"src":"2898:35:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"}},{"arguments":[{"expression":{"id":360,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":320,"src":"2943:9:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2953:6:1","memberName":"length","nodeType":"MemberAccess","src":"2943:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":359,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2935:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":358,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2935:7:1","typeDescriptions":{}}},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2935:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":363,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2885:76:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$302_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":329,"id":364,"nodeType":"Return","src":"2878:83:1"}]},"id":366,"nodeType":"IfStatement","src":"2353:620:1","trueBody":{"id":351,"nodeType":"Block","src":"2381:476:1","statements":[{"assignments":[335],"declarations":[{"constant":false,"id":335,"mutability":"mutable","name":"r","nameLocation":"2404:1:1","nodeType":"VariableDeclaration","scope":351,"src":"2396:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":334,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2396:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":336,"nodeType":"VariableDeclarationStatement","src":"2396:9:1"},{"assignments":[338],"declarations":[{"constant":false,"id":338,"mutability":"mutable","name":"s","nameLocation":"2428:1:1","nodeType":"VariableDeclaration","scope":351,"src":"2420:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":337,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2420:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":339,"nodeType":"VariableDeclarationStatement","src":"2420:9:1"},{"assignments":[341],"declarations":[{"constant":false,"id":341,"mutability":"mutable","name":"v","nameLocation":"2450:1:1","nodeType":"VariableDeclaration","scope":351,"src":"2444:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":340,"name":"uint8","nodeType":"ElementaryTypeName","src":"2444:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":342,"nodeType":"VariableDeclarationStatement","src":"2444:7:1"},{"AST":{"nodeType":"YulBlock","src":"2624:175:1","statements":[{"nodeType":"YulAssignment","src":"2643:32:1","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2658:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2669:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2654:3:1"},"nodeType":"YulFunctionCall","src":"2654:20:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2648:5:1"},"nodeType":"YulFunctionCall","src":"2648:27:1"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2643:1:1"}]},{"nodeType":"YulAssignment","src":"2693:32:1","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2708:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2719:4:1","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2704:3:1"},"nodeType":"YulFunctionCall","src":"2704:20:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2698:5:1"},"nodeType":"YulFunctionCall","src":"2698:27:1"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2693:1:1"}]},{"nodeType":"YulAssignment","src":"2743:41:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2753:1:1","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2766:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2777:4:1","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2762:3:1"},"nodeType":"YulFunctionCall","src":"2762:20:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2756:5:1"},"nodeType":"YulFunctionCall","src":"2756:27:1"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2748:4:1"},"nodeType":"YulFunctionCall","src":"2748:36:1"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2743:1:1"}]}]},"evmVersion":"london","externalReferences":[{"declaration":335,"isOffset":false,"isSlot":false,"src":"2643:1:1","valueSize":1},{"declaration":338,"isOffset":false,"isSlot":false,"src":"2693:1:1","valueSize":1},{"declaration":320,"isOffset":false,"isSlot":false,"src":"2658:9:1","valueSize":1},{"declaration":320,"isOffset":false,"isSlot":false,"src":"2708:9:1","valueSize":1},{"declaration":320,"isOffset":false,"isSlot":false,"src":"2766:9:1","valueSize":1},{"declaration":341,"isOffset":false,"isSlot":false,"src":"2743:1:1","valueSize":1}],"flags":["memory-safe"],"id":343,"nodeType":"InlineAssembly","src":"2599:200:1"},{"expression":{"arguments":[{"id":345,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"2831:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":346,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"2837:1:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":347,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"2840:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":348,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"2843:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":344,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[368,448,556],"referencedDeclaration":556,"src":"2820:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$302_$_t_bytes32_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2820:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$302_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":329,"id":350,"nodeType":"Return","src":"2813:32:1"}]}}]},"documentation":{"id":316,"nodeType":"StructuredDocumentation","src":"890:1287:1","text":" @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n return address(0) without also returning an error description. Errors are documented using an enum (error type)\n and a bytes32 providing additional information about the error.\n If no error is returned, then the address can be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]"},"id":368,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2192:10:1","nodeType":"FunctionDefinition","parameters":{"id":321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":318,"mutability":"mutable","name":"hash","nameLocation":"2221:4:1","nodeType":"VariableDeclaration","scope":368,"src":"2213:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":317,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2213:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":320,"mutability":"mutable","name":"signature","nameLocation":"2249:9:1","nodeType":"VariableDeclaration","scope":368,"src":"2236:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":319,"name":"bytes","nodeType":"ElementaryTypeName","src":"2236:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2202:63:1"},"returnParameters":{"id":329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":323,"mutability":"mutable","name":"recovered","nameLocation":"2297:9:1","nodeType":"VariableDeclaration","scope":368,"src":"2289:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":322,"name":"address","nodeType":"ElementaryTypeName","src":"2289:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":326,"mutability":"mutable","name":"err","nameLocation":"2321:3:1","nodeType":"VariableDeclaration","scope":368,"src":"2308:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":325,"nodeType":"UserDefinedTypeName","pathNode":{"id":324,"name":"RecoverError","nameLocations":["2308:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":302,"src":"2308:12:1"},"referencedDeclaration":302,"src":"2308:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":328,"mutability":"mutable","name":"errArg","nameLocation":"2334:6:1","nodeType":"VariableDeclaration","scope":368,"src":"2326:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":327,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2326:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2288:53:1"},"scope":642,"src":"2183:797:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":397,"nodeType":"Block","src":"3890:172:1","statements":[{"assignments":[379,382,384],"declarations":[{"constant":false,"id":379,"mutability":"mutable","name":"recovered","nameLocation":"3910:9:1","nodeType":"VariableDeclaration","scope":397,"src":"3902:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":378,"name":"address","nodeType":"ElementaryTypeName","src":"3902:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":382,"mutability":"mutable","name":"error","nameLocation":"3934:5:1","nodeType":"VariableDeclaration","scope":397,"src":"3921:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":381,"nodeType":"UserDefinedTypeName","pathNode":{"id":380,"name":"RecoverError","nameLocations":["3921:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":302,"src":"3921:12:1"},"referencedDeclaration":302,"src":"3921:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":384,"mutability":"mutable","name":"errorArg","nameLocation":"3949:8:1","nodeType":"VariableDeclaration","scope":397,"src":"3941:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":383,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3941:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":389,"initialValue":{"arguments":[{"id":386,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"3972:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":387,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"3978:9:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":385,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[368,448,556],"referencedDeclaration":368,"src":"3961:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$302_$_t_bytes32_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3961:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$302_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"3901:87:1"},{"expression":{"arguments":[{"id":391,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"4011:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"}},{"id":392,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"4018:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":390,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"3999:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$302_$_t_bytes32_$returns$__$","typeString":"function (enum ECDSA.RecoverError,bytes32) pure"}},"id":393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3999:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":394,"nodeType":"ExpressionStatement","src":"3999:28:1"},{"expression":{"id":395,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"4045:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":377,"id":396,"nodeType":"Return","src":"4038:16:1"}]},"documentation":{"id":369,"nodeType":"StructuredDocumentation","src":"2988:809:1","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it."},"id":398,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3812:7:1","nodeType":"FunctionDefinition","parameters":{"id":374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":371,"mutability":"mutable","name":"hash","nameLocation":"3828:4:1","nodeType":"VariableDeclaration","scope":398,"src":"3820:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":370,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3820:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":373,"mutability":"mutable","name":"signature","nameLocation":"3847:9:1","nodeType":"VariableDeclaration","scope":398,"src":"3834:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":372,"name":"bytes","nodeType":"ElementaryTypeName","src":"3834:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3819:38:1"},"returnParameters":{"id":377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":376,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":398,"src":"3881:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":375,"name":"address","nodeType":"ElementaryTypeName","src":"3881:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3880:9:1"},"scope":642,"src":"3803:259:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":447,"nodeType":"Block","src":"4452:349:1","statements":[{"id":446,"nodeType":"UncheckedBlock","src":"4463:331:1","statements":[{"assignments":[416],"declarations":[{"constant":false,"id":416,"mutability":"mutable","name":"s","nameLocation":"4496:1:1","nodeType":"VariableDeclaration","scope":446,"src":"4488:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":415,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4488:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":423,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":417,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"4500:2:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4513:66:1","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":419,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4505:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":418,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4505:7:1","typeDescriptions":{}}},"id":421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4505:75:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4500:80:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4488:92:1"},{"assignments":[425],"declarations":[{"constant":false,"id":425,"mutability":"mutable","name":"v","nameLocation":"4699:1:1","nodeType":"VariableDeclaration","scope":446,"src":"4693:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":424,"name":"uint8","nodeType":"ElementaryTypeName","src":"4693:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":438,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":430,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"4718:2:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":429,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4710:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":428,"name":"uint256","nodeType":"ElementaryTypeName","src":"4710:7:1","typeDescriptions":{}}},"id":431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4710:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4725:3:1","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4710:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":434,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4709:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4732:2:1","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4709:25:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":427,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4703:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":426,"name":"uint8","nodeType":"ElementaryTypeName","src":"4703:5:1","typeDescriptions":{}}},"id":437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4703:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4693:42:1"},{"expression":{"arguments":[{"id":440,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":401,"src":"4768:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":441,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":425,"src":"4774:1:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":442,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"4777:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":443,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"4780:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":439,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[368,448,556],"referencedDeclaration":556,"src":"4757:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$302_$_t_bytes32_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4757:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$302_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":414,"id":445,"nodeType":"Return","src":"4750:32:1"}]}]},"documentation":{"id":399,"nodeType":"StructuredDocumentation","src":"4070:209:1","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]"},"id":448,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4294:10:1","nodeType":"FunctionDefinition","parameters":{"id":406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":401,"mutability":"mutable","name":"hash","nameLocation":"4323:4:1","nodeType":"VariableDeclaration","scope":448,"src":"4315:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":400,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4315:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":403,"mutability":"mutable","name":"r","nameLocation":"4346:1:1","nodeType":"VariableDeclaration","scope":448,"src":"4338:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":402,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4338:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":405,"mutability":"mutable","name":"vs","nameLocation":"4366:2:1","nodeType":"VariableDeclaration","scope":448,"src":"4358:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":404,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4358:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4304:71:1"},"returnParameters":{"id":414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":408,"mutability":"mutable","name":"recovered","nameLocation":"4407:9:1","nodeType":"VariableDeclaration","scope":448,"src":"4399:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":407,"name":"address","nodeType":"ElementaryTypeName","src":"4399:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":411,"mutability":"mutable","name":"err","nameLocation":"4431:3:1","nodeType":"VariableDeclaration","scope":448,"src":"4418:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":410,"nodeType":"UserDefinedTypeName","pathNode":{"id":409,"name":"RecoverError","nameLocations":["4418:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":302,"src":"4418:12:1"},"referencedDeclaration":302,"src":"4418:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":413,"mutability":"mutable","name":"errArg","nameLocation":"4444:6:1","nodeType":"VariableDeclaration","scope":448,"src":"4436:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":412,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4436:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4398:53:1"},"scope":642,"src":"4285:516:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":480,"nodeType":"Block","src":"5019:168:1","statements":[{"assignments":[461,464,466],"declarations":[{"constant":false,"id":461,"mutability":"mutable","name":"recovered","nameLocation":"5039:9:1","nodeType":"VariableDeclaration","scope":480,"src":"5031:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":460,"name":"address","nodeType":"ElementaryTypeName","src":"5031:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":464,"mutability":"mutable","name":"error","nameLocation":"5063:5:1","nodeType":"VariableDeclaration","scope":480,"src":"5050:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":463,"nodeType":"UserDefinedTypeName","pathNode":{"id":462,"name":"RecoverError","nameLocations":["5050:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":302,"src":"5050:12:1"},"referencedDeclaration":302,"src":"5050:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":466,"mutability":"mutable","name":"errorArg","nameLocation":"5078:8:1","nodeType":"VariableDeclaration","scope":480,"src":"5070:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":465,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5070:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":472,"initialValue":{"arguments":[{"id":468,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"5101:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":469,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"5107:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":470,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"5110:2:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":467,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[368,448,556],"referencedDeclaration":448,"src":"5090:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$302_$_t_bytes32_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5090:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$302_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"5030:83:1"},{"expression":{"arguments":[{"id":474,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"5136:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"}},{"id":475,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"5143:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":473,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"5124:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$302_$_t_bytes32_$returns$__$","typeString":"function (enum ECDSA.RecoverError,bytes32) pure"}},"id":476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5124:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":477,"nodeType":"ExpressionStatement","src":"5124:28:1"},{"expression":{"id":478,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"5170:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":459,"id":479,"nodeType":"Return","src":"5163:16:1"}]},"documentation":{"id":449,"nodeType":"StructuredDocumentation","src":"4809:118:1","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately."},"id":481,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4942:7:1","nodeType":"FunctionDefinition","parameters":{"id":456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":451,"mutability":"mutable","name":"hash","nameLocation":"4958:4:1","nodeType":"VariableDeclaration","scope":481,"src":"4950:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":450,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4950:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":453,"mutability":"mutable","name":"r","nameLocation":"4972:1:1","nodeType":"VariableDeclaration","scope":481,"src":"4964:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":452,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4964:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":455,"mutability":"mutable","name":"vs","nameLocation":"4983:2:1","nodeType":"VariableDeclaration","scope":481,"src":"4975:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":454,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4975:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4949:37:1"},"returnParameters":{"id":459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":458,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":481,"src":"5010:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":457,"name":"address","nodeType":"ElementaryTypeName","src":"5010:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5009:9:1"},"scope":642,"src":"4933:254:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":555,"nodeType":"Block","src":"5513:1393:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":502,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"6419:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":501,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6411:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":500,"name":"uint256","nodeType":"ElementaryTypeName","src":"6411:7:1","typeDescriptions":{}}},"id":503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6411:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6424:66:1","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6411:79:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":516,"nodeType":"IfStatement","src":"6407:166:1","trueBody":{"id":515,"nodeType":"Block","src":"6492:81:1","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6523:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":507,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6515:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":506,"name":"address","nodeType":"ElementaryTypeName","src":"6515:7:1","typeDescriptions":{}}},"id":509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6515:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":510,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"6527:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$302_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":511,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6540:17:1","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":301,"src":"6527:30:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"}},{"id":512,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"6559:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":513,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6514:47:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$302_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":499,"id":514,"nodeType":"Return","src":"6507:54:1"}]}},{"assignments":[518],"declarations":[{"constant":false,"id":518,"mutability":"mutable","name":"signer","nameLocation":"6678:6:1","nodeType":"VariableDeclaration","scope":555,"src":"6670:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":517,"name":"address","nodeType":"ElementaryTypeName","src":"6670:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":525,"initialValue":{"arguments":[{"id":520,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":484,"src":"6697:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":521,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":486,"src":"6703:1:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":522,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":488,"src":"6706:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":523,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"6709:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":519,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6687:9:1","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6687:24:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6670:41:1"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":526,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":518,"src":"6726:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6744:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":528,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6736:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":527,"name":"address","nodeType":"ElementaryTypeName","src":"6736:7:1","typeDescriptions":{}}},"id":530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6736:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6726:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":545,"nodeType":"IfStatement","src":"6722:115:1","trueBody":{"id":544,"nodeType":"Block","src":"6748:89:1","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6779:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":533,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6771:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":532,"name":"address","nodeType":"ElementaryTypeName","src":"6771:7:1","typeDescriptions":{}}},"id":535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6771:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":536,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"6783:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$302_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":537,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6796:16:1","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":299,"src":"6783:29:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"}},{"arguments":[{"hexValue":"30","id":540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6822:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":539,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6814:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":538,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6814:7:1","typeDescriptions":{}}},"id":541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6814:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":542,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6770:55:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$302_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":499,"id":543,"nodeType":"Return","src":"6763:62:1"}]}},{"expression":{"components":[{"id":546,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":518,"src":"6857:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":547,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"6865:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$302_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":548,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6878:7:1","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":298,"src":"6865:20:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"}},{"arguments":[{"hexValue":"30","id":551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6895:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":550,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6887:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":549,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6887:7:1","typeDescriptions":{}}},"id":552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6887:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":553,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6856:42:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$302_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":499,"id":554,"nodeType":"Return","src":"6849:49:1"}]},"documentation":{"id":482,"nodeType":"StructuredDocumentation","src":"5195:128:1","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":556,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5338:10:1","nodeType":"FunctionDefinition","parameters":{"id":491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":484,"mutability":"mutable","name":"hash","nameLocation":"5367:4:1","nodeType":"VariableDeclaration","scope":556,"src":"5359:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":483,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5359:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":486,"mutability":"mutable","name":"v","nameLocation":"5388:1:1","nodeType":"VariableDeclaration","scope":556,"src":"5382:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":485,"name":"uint8","nodeType":"ElementaryTypeName","src":"5382:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":488,"mutability":"mutable","name":"r","nameLocation":"5408:1:1","nodeType":"VariableDeclaration","scope":556,"src":"5400:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":487,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5400:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":490,"mutability":"mutable","name":"s","nameLocation":"5428:1:1","nodeType":"VariableDeclaration","scope":556,"src":"5420:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":489,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5420:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5348:88:1"},"returnParameters":{"id":499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":493,"mutability":"mutable","name":"recovered","nameLocation":"5468:9:1","nodeType":"VariableDeclaration","scope":556,"src":"5460:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":492,"name":"address","nodeType":"ElementaryTypeName","src":"5460:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":496,"mutability":"mutable","name":"err","nameLocation":"5492:3:1","nodeType":"VariableDeclaration","scope":556,"src":"5479:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":495,"nodeType":"UserDefinedTypeName","pathNode":{"id":494,"name":"RecoverError","nameLocations":["5479:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":302,"src":"5479:12:1"},"referencedDeclaration":302,"src":"5479:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":498,"mutability":"mutable","name":"errArg","nameLocation":"5505:6:1","nodeType":"VariableDeclaration","scope":556,"src":"5497:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":497,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5497:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5459:53:1"},"scope":642,"src":"5329:1577:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":591,"nodeType":"Block","src":"7139:170:1","statements":[{"assignments":[571,574,576],"declarations":[{"constant":false,"id":571,"mutability":"mutable","name":"recovered","nameLocation":"7159:9:1","nodeType":"VariableDeclaration","scope":591,"src":"7151:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":570,"name":"address","nodeType":"ElementaryTypeName","src":"7151:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":574,"mutability":"mutable","name":"error","nameLocation":"7183:5:1","nodeType":"VariableDeclaration","scope":591,"src":"7170:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":573,"nodeType":"UserDefinedTypeName","pathNode":{"id":572,"name":"RecoverError","nameLocations":["7170:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":302,"src":"7170:12:1"},"referencedDeclaration":302,"src":"7170:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":576,"mutability":"mutable","name":"errorArg","nameLocation":"7198:8:1","nodeType":"VariableDeclaration","scope":591,"src":"7190:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":575,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7190:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":583,"initialValue":{"arguments":[{"id":578,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"7221:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":579,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"7227:1:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":580,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"7230:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":581,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"7233:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":577,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[368,448,556],"referencedDeclaration":556,"src":"7210:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$302_$_t_bytes32_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7210:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$302_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"7150:85:1"},{"expression":{"arguments":[{"id":585,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"7258:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"}},{"id":586,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":576,"src":"7265:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":584,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"7246:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$302_$_t_bytes32_$returns$__$","typeString":"function (enum ECDSA.RecoverError,bytes32) pure"}},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7246:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":588,"nodeType":"ExpressionStatement","src":"7246:28:1"},{"expression":{"id":589,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":571,"src":"7292:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":569,"id":590,"nodeType":"Return","src":"7285:16:1"}]},"documentation":{"id":557,"nodeType":"StructuredDocumentation","src":"6914:125:1","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":592,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"7054:7:1","nodeType":"FunctionDefinition","parameters":{"id":566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":559,"mutability":"mutable","name":"hash","nameLocation":"7070:4:1","nodeType":"VariableDeclaration","scope":592,"src":"7062:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":558,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7062:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":561,"mutability":"mutable","name":"v","nameLocation":"7082:1:1","nodeType":"VariableDeclaration","scope":592,"src":"7076:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":560,"name":"uint8","nodeType":"ElementaryTypeName","src":"7076:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":563,"mutability":"mutable","name":"r","nameLocation":"7093:1:1","nodeType":"VariableDeclaration","scope":592,"src":"7085:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":562,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7085:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":565,"mutability":"mutable","name":"s","nameLocation":"7104:1:1","nodeType":"VariableDeclaration","scope":592,"src":"7096:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":564,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7096:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7061:45:1"},"returnParameters":{"id":569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":568,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":592,"src":"7130:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":567,"name":"address","nodeType":"ElementaryTypeName","src":"7130:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7129:9:1"},"scope":642,"src":"7045:264:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":640,"nodeType":"Block","src":"7519:470:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"},"id":604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":601,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":596,"src":"7534:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":602,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"7543:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$302_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":603,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7556:7:1","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":298,"src":"7543:20:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"}},"src":"7534:29:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"},"id":610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":607,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":596,"src":"7632:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":608,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"7641:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$302_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":609,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7654:16:1","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":299,"src":"7641:29:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"}},"src":"7632:38:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"},"id":618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":615,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":596,"src":"7739:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":616,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"7748:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$302_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":617,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7761:22:1","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":300,"src":"7748:35:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"}},"src":"7739:44:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":627,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":596,"src":"7875:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":628,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"7884:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$302_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":629,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7897:17:1","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":301,"src":"7884:30:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"}},"src":"7875:39:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":636,"nodeType":"IfStatement","src":"7871:111:1","trueBody":{"id":635,"nodeType":"Block","src":"7916:66:1","statements":[{"errorCall":{"arguments":[{"id":632,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"7961:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":631,"name":"ECDSAInvalidSignatureS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"7938:22:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7938:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":634,"nodeType":"RevertStatement","src":"7931:39:1"}]}},"id":637,"nodeType":"IfStatement","src":"7735:247:1","trueBody":{"id":626,"nodeType":"Block","src":"7785:80:1","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":622,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"7843:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":621,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7835:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":620,"name":"uint256","nodeType":"ElementaryTypeName","src":"7835:7:1","typeDescriptions":{}}},"id":623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7835:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":619,"name":"ECDSAInvalidSignatureLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":310,"src":"7807:27:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7807:46:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":625,"nodeType":"RevertStatement","src":"7800:53:1"}]}},"id":638,"nodeType":"IfStatement","src":"7628:354:1","trueBody":{"id":614,"nodeType":"Block","src":"7672:57:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":611,"name":"ECDSAInvalidSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"7694:21:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7694:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":613,"nodeType":"RevertStatement","src":"7687:30:1"}]}},"id":639,"nodeType":"IfStatement","src":"7530:452:1","trueBody":{"id":606,"nodeType":"Block","src":"7565:57:1","statements":[{"functionReturnParameters":600,"id":605,"nodeType":"Return","src":"7580:7:1"}]}}]},"documentation":{"id":593,"nodeType":"StructuredDocumentation","src":"7317:124:1","text":" @dev Optionally reverts with the corresponding custom error according to the `error` argument provided."},"id":641,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"7456:11:1","nodeType":"FunctionDefinition","parameters":{"id":599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":596,"mutability":"mutable","name":"error","nameLocation":"7481:5:1","nodeType":"VariableDeclaration","scope":641,"src":"7468:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":595,"nodeType":"UserDefinedTypeName","pathNode":{"id":594,"name":"RecoverError","nameLocations":["7468:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":302,"src":"7468:12:1"},"referencedDeclaration":302,"src":"7468:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$302","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":598,"mutability":"mutable","name":"errorArg","nameLocation":"7496:8:1","nodeType":"VariableDeclaration","scope":641,"src":"7488:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":597,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7488:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7467:38:1"},"returnParameters":{"id":600,"nodeType":"ParameterList","parameters":[],"src":"7519:0:1"},"scope":642,"src":"7447:542:1","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":643,"src":"354:7638:1","usedErrors":[305,310,315]}],"src":"115:7877:1"},"id":1},"contracts/EIP712.sol":{"ast":{"absolutePath":"contracts/EIP712.sol","exportedSymbols":{"EIP712":[869],"IERC5267":[1570],"MessageHashUtils":[2698],"ShortString":[4870],"ShortStrings":[5081]},"id":870,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":644,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"116:23:2"},{"absolutePath":"contracts/MessageHashUtils.sol","file":"./MessageHashUtils.sol","id":646,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":870,"sourceUnit":2699,"src":"143:56:2","symbolAliases":[{"foreign":{"id":645,"name":"MessageHashUtils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2698,"src":"151:16:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/ShortStrings.sol","file":"./ShortStrings.sol","id":649,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":870,"sourceUnit":5082,"src":"201:61:2","symbolAliases":[{"foreign":{"id":647,"name":"ShortStrings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5081,"src":"209:12:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":648,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"223:11:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/IERC5267.sol","file":"./IERC5267.sol","id":651,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":870,"sourceUnit":1571,"src":"264:40:2","symbolAliases":[{"foreign":{"id":650,"name":"IERC5267","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"272:8:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":653,"name":"IERC5267","nameLocations":["2004:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":1570,"src":"2004:8:2"},"id":654,"nodeType":"InheritanceSpecifier","src":"2004:8:2"}],"canonicalName":"EIP712","contractDependencies":[],"contractKind":"contract","documentation":{"id":652,"nodeType":"StructuredDocumentation","src":"308:1666:2","text":" @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\n The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n @custom:oz-upgrades-unsafe-allow state-variable-immutable"},"fullyImplemented":true,"id":869,"linearizedBaseContracts":[869,1570],"name":"EIP712","nameLocation":"1994:6:2","nodeType":"ContractDefinition","nodes":[{"global":false,"id":656,"libraryName":{"id":655,"name":"ShortStrings","nameLocations":["2026:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":5081,"src":"2026:12:2"},"nodeType":"UsingForDirective","src":"2020:25:2"},{"constant":true,"id":661,"mutability":"constant","name":"TYPE_HASH","nameLocation":"2078:9:2","nodeType":"VariableDeclaration","scope":869,"src":"2053:141:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":657,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2053:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","id":659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2109:84:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""},"value":"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""}],"id":658,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2099:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2099:95:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":663,"mutability":"immutable","name":"_cachedDomainSeparator","nameLocation":"2423:22:2","nodeType":"VariableDeclaration","scope":869,"src":"2397:48:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":662,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2397:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":665,"mutability":"immutable","name":"_cachedChainId","nameLocation":"2478:14:2","nodeType":"VariableDeclaration","scope":869,"src":"2452:40:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":664,"name":"uint256","nodeType":"ElementaryTypeName","src":"2452:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":667,"mutability":"immutable","name":"_cachedThis","nameLocation":"2525:11:2","nodeType":"VariableDeclaration","scope":869,"src":"2499:37:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":666,"name":"address","nodeType":"ElementaryTypeName","src":"2499:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":669,"mutability":"immutable","name":"_hashedName","nameLocation":"2571:11:2","nodeType":"VariableDeclaration","scope":869,"src":"2545:37:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":668,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2545:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":671,"mutability":"immutable","name":"_hashedVersion","nameLocation":"2615:14:2","nodeType":"VariableDeclaration","scope":869,"src":"2589:40:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":670,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2589:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":674,"mutability":"immutable","name":"_name","nameLocation":"2668:5:2","nodeType":"VariableDeclaration","scope":869,"src":"2638:35:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"},"typeName":{"id":673,"nodeType":"UserDefinedTypeName","pathNode":{"id":672,"name":"ShortString","nameLocations":["2638:11:2"],"nodeType":"IdentifierPath","referencedDeclaration":4870,"src":"2638:11:2"},"referencedDeclaration":4870,"src":"2638:11:2","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}},"visibility":"private"},{"constant":false,"id":677,"mutability":"immutable","name":"_version","nameLocation":"2710:8:2","nodeType":"VariableDeclaration","scope":869,"src":"2680:38:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"},"typeName":{"id":676,"nodeType":"UserDefinedTypeName","pathNode":{"id":675,"name":"ShortString","nameLocations":["2680:11:2"],"nodeType":"IdentifierPath","referencedDeclaration":4870,"src":"2680:11:2"},"referencedDeclaration":4870,"src":"2680:11:2","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}},"visibility":"private"},{"constant":false,"id":679,"mutability":"mutable","name":"_nameFallback","nameLocation":"2740:13:2","nodeType":"VariableDeclaration","scope":869,"src":"2725:28:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":678,"name":"string","nodeType":"ElementaryTypeName","src":"2725:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":681,"mutability":"mutable","name":"_versionFallback","nameLocation":"2775:16:2","nodeType":"VariableDeclaration","scope":869,"src":"2760:31:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":680,"name":"string","nodeType":"ElementaryTypeName","src":"2760:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":738,"nodeType":"Block","src":"3431:385:2","statements":[{"expression":{"id":694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":689,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":674,"src":"3442:5:2","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":692,"name":"_nameFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"3481:13:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":690,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"3450:4:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3455:25:2","memberName":"toShortStringWithFallback","nodeType":"MemberAccess","referencedDeclaration":5022,"src":"3450:30:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$4870_$bound_to$_t_string_memory_ptr_$","typeString":"function (string memory,string storage pointer) returns (ShortString)"}},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3450:45:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}},"src":"3442:53:2","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}},"id":695,"nodeType":"ExpressionStatement","src":"3442:53:2"},{"expression":{"id":701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":696,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"3506:8:2","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":699,"name":"_versionFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":681,"src":"3551:16:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":697,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"3517:7:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3525:25:2","memberName":"toShortStringWithFallback","nodeType":"MemberAccess","referencedDeclaration":5022,"src":"3517:33:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$4870_$bound_to$_t_string_memory_ptr_$","typeString":"function (string memory,string storage pointer) returns (ShortString)"}},"id":700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3517:51:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}},"src":"3506:62:2","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}},"id":702,"nodeType":"ExpressionStatement","src":"3506:62:2"},{"expression":{"id":710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":703,"name":"_hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"3579:11:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":707,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"3609:4:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":706,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3603:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":705,"name":"bytes","nodeType":"ElementaryTypeName","src":"3603:5:2","typeDescriptions":{}}},"id":708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3603:11:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":704,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3593:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3593:22:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3579:36:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":711,"nodeType":"ExpressionStatement","src":"3579:36:2"},{"expression":{"id":719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":712,"name":"_hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":671,"src":"3626:14:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":716,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"3659:7:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":715,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3653:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":714,"name":"bytes","nodeType":"ElementaryTypeName","src":"3653:5:2","typeDescriptions":{}}},"id":717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3653:14:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":713,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3643:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3643:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3626:42:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":720,"nodeType":"ExpressionStatement","src":"3626:42:2"},{"expression":{"id":724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":721,"name":"_cachedChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"3681:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":722,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3698:5:2","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3704:7:2","memberName":"chainid","nodeType":"MemberAccess","src":"3698:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3681:30:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":725,"nodeType":"ExpressionStatement","src":"3681:30:2"},{"expression":{"id":729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":726,"name":"_cachedDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"3722:22:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":727,"name":"_buildDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"3747:21:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3747:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3722:48:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":730,"nodeType":"ExpressionStatement","src":"3722:48:2"},{"expression":{"id":736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":731,"name":"_cachedThis","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"3781:11:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":734,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3803:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$869","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$869","typeString":"contract EIP712"}],"id":733,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3795:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":732,"name":"address","nodeType":"ElementaryTypeName","src":"3795:7:2","typeDescriptions":{}}},"id":735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3795:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3781:27:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":737,"nodeType":"ExpressionStatement","src":"3781:27:2"}]},"documentation":{"id":682,"nodeType":"StructuredDocumentation","src":"2800:570:2","text":" @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."},"id":739,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":684,"mutability":"mutable","name":"name","nameLocation":"3402:4:2","nodeType":"VariableDeclaration","scope":739,"src":"3388:18:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":683,"name":"string","nodeType":"ElementaryTypeName","src":"3388:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":686,"mutability":"mutable","name":"version","nameLocation":"3422:7:2","nodeType":"VariableDeclaration","scope":739,"src":"3408:21:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":685,"name":"string","nodeType":"ElementaryTypeName","src":"3408:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3387:43:2"},"returnParameters":{"id":688,"nodeType":"ParameterList","parameters":[],"src":"3431:0:2"},"scope":869,"src":"3376:440:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":764,"nodeType":"Block","src":"3969:206:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":747,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3992:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$869","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$869","typeString":"contract EIP712"}],"id":746,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3984:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":745,"name":"address","nodeType":"ElementaryTypeName","src":"3984:7:2","typeDescriptions":{}}},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3984:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":749,"name":"_cachedThis","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"4001:11:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3984:28:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":751,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4016:5:2","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4022:7:2","memberName":"chainid","nodeType":"MemberAccess","src":"4016:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":753,"name":"_cachedChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"4033:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4016:31:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3984:63:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":762,"nodeType":"Block","src":"4111:57:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":759,"name":"_buildDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"4133:21:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4133:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":744,"id":761,"nodeType":"Return","src":"4126:30:2"}]},"id":763,"nodeType":"IfStatement","src":"3980:188:2","trueBody":{"id":758,"nodeType":"Block","src":"4049:56:2","statements":[{"expression":{"id":756,"name":"_cachedDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"4071:22:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":744,"id":757,"nodeType":"Return","src":"4064:29:2"}]}}]},"documentation":{"id":740,"nodeType":"StructuredDocumentation","src":"3824:77:2","text":" @dev Returns the domain separator for the current chain."},"id":765,"implemented":true,"kind":"function","modifiers":[],"name":"_domainSeparatorV4","nameLocation":"3916:18:2","nodeType":"FunctionDefinition","parameters":{"id":741,"nodeType":"ParameterList","parameters":[],"src":"3934:2:2"},"returnParameters":{"id":744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":743,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":765,"src":"3960:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":742,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3960:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3959:9:2"},"scope":869,"src":"3907:268:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":785,"nodeType":"Block","src":"4247:117:2","statements":[{"expression":{"arguments":[{"arguments":[{"id":773,"name":"TYPE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"4286:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":774,"name":"_hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"4297:11:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":775,"name":"_hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":671,"src":"4310:14:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":776,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4326:5:2","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4332:7:2","memberName":"chainid","nodeType":"MemberAccess","src":"4326:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":780,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4349:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$869","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$869","typeString":"contract EIP712"}],"id":779,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4341:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":778,"name":"address","nodeType":"ElementaryTypeName","src":"4341:7:2","typeDescriptions":{}}},"id":781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4341:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":771,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4275:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":772,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4279:6:2","memberName":"encode","nodeType":"MemberAccess","src":"4275:10:2","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4275:80:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":770,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4265:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4265:91:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":769,"id":784,"nodeType":"Return","src":"4258:98:2"}]},"id":786,"implemented":true,"kind":"function","modifiers":[],"name":"_buildDomainSeparator","nameLocation":"4192:21:2","nodeType":"FunctionDefinition","parameters":{"id":766,"nodeType":"ParameterList","parameters":[],"src":"4213:2:2"},"returnParameters":{"id":769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":768,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":786,"src":"4238:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":767,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4238:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4237:9:2"},"scope":869,"src":"4183:181:2","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":801,"nodeType":"Block","src":"5092:92:2","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":796,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"5143:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5143:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":798,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":789,"src":"5165:10:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":794,"name":"MessageHashUtils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2698,"src":"5110:16:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MessageHashUtils_$2698_$","typeString":"type(library MessageHashUtils)"}},"id":795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5127:15:2","memberName":"toTypedDataHash","nodeType":"MemberAccess","referencedDeclaration":2697,"src":"5110:32:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5110:66:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":793,"id":800,"nodeType":"Return","src":"5103:73:2"}]},"documentation":{"id":787,"nodeType":"StructuredDocumentation","src":"4372:628:2","text":" @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"},"id":802,"implemented":true,"kind":"function","modifiers":[],"name":"_hashTypedDataV4","nameLocation":"5015:16:2","nodeType":"FunctionDefinition","parameters":{"id":790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":789,"mutability":"mutable","name":"structHash","nameLocation":"5040:10:2","nodeType":"VariableDeclaration","scope":802,"src":"5032:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":788,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5032:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5031:20:2"},"returnParameters":{"id":793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":792,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":802,"src":"5083:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":791,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5083:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5082:9:2"},"scope":869,"src":"5006:178:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1569],"body":{"id":843,"nodeType":"Block","src":"5581:239:2","statements":[{"expression":{"components":[{"hexValue":"0f","id":821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"5614:7:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c","typeString":"literal_string hex\"0f\""},"value":"\u000f"},{"arguments":[],"expression":{"argumentTypes":[],"id":822,"name":"_EIP712Name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":856,"src":"5645:11:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5645:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"id":824,"name":"_EIP712Version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"5673:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5673:16:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"expression":{"id":826,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5704:5:2","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5710:7:2","memberName":"chainid","nodeType":"MemberAccess","src":"5704:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":830,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5740:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$869","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$869","typeString":"contract EIP712"}],"id":829,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5732:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":828,"name":"address","nodeType":"ElementaryTypeName","src":"5732:7:2","typeDescriptions":{}}},"id":831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5732:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5768:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":833,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5760:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":832,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5760:7:2","typeDescriptions":{}}},"id":835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5760:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"hexValue":"30","id":839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5799:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":838,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5785:13:2","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":836,"name":"uint256","nodeType":"ElementaryTypeName","src":"5789:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":837,"nodeType":"ArrayTypeName","src":"5789:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5785:16:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"id":841,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5599:213:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$_t_address_$_t_bytes32_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(literal_string hex\"0f\",string memory,string memory,uint256,address,bytes32,uint256[] memory)"}},"functionReturnParameters":820,"id":842,"nodeType":"Return","src":"5592:220:2"}]},"documentation":{"id":803,"nodeType":"StructuredDocumentation","src":"5192:42:2","text":" @dev See {IERC-5267}."},"functionSelector":"84b0196e","id":844,"implemented":true,"kind":"function","modifiers":[],"name":"eip712Domain","nameLocation":"5249:12:2","nodeType":"FunctionDefinition","parameters":{"id":804,"nodeType":"ParameterList","parameters":[],"src":"5261:2:2"},"returnParameters":{"id":820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":806,"mutability":"mutable","name":"fields","nameLocation":"5350:6:2","nodeType":"VariableDeclaration","scope":844,"src":"5343:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":805,"name":"bytes1","nodeType":"ElementaryTypeName","src":"5343:6:2","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"},{"constant":false,"id":808,"mutability":"mutable","name":"name","nameLocation":"5385:4:2","nodeType":"VariableDeclaration","scope":844,"src":"5371:18:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":807,"name":"string","nodeType":"ElementaryTypeName","src":"5371:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":810,"mutability":"mutable","name":"version","nameLocation":"5418:7:2","nodeType":"VariableDeclaration","scope":844,"src":"5404:21:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":809,"name":"string","nodeType":"ElementaryTypeName","src":"5404:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":812,"mutability":"mutable","name":"chainId","nameLocation":"5448:7:2","nodeType":"VariableDeclaration","scope":844,"src":"5440:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":811,"name":"uint256","nodeType":"ElementaryTypeName","src":"5440:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":814,"mutability":"mutable","name":"verifyingContract","nameLocation":"5478:17:2","nodeType":"VariableDeclaration","scope":844,"src":"5470:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":813,"name":"address","nodeType":"ElementaryTypeName","src":"5470:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":816,"mutability":"mutable","name":"salt","nameLocation":"5518:4:2","nodeType":"VariableDeclaration","scope":844,"src":"5510:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":815,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5510:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":819,"mutability":"mutable","name":"extensions","nameLocation":"5554:10:2","nodeType":"VariableDeclaration","scope":844,"src":"5537:27:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":817,"name":"uint256","nodeType":"ElementaryTypeName","src":"5537:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":818,"nodeType":"ArrayTypeName","src":"5537:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"5328:247:2"},"scope":869,"src":"5240:580:2","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":855,"nodeType":"Block","src":"6210:67:2","statements":[{"expression":{"arguments":[{"id":852,"name":"_nameFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"6255:13:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":850,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":674,"src":"6228:5:2","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}},"id":851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6234:20:2","memberName":"toStringWithFallback","nodeType":"MemberAccess","referencedDeclaration":5049,"src":"6228:26:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$4870_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$bound_to$_t_userDefinedValueType$_ShortString_$4870_$","typeString":"function (ShortString,string storage pointer) pure returns (string memory)"}},"id":853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6228:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":849,"id":854,"nodeType":"Return","src":"6221:48:2"}]},"documentation":{"id":845,"nodeType":"StructuredDocumentation","src":"5828:261:2","text":" @dev The name parameter for the EIP712 domain.\n NOTE: By default this function reads _name which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."},"id":856,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712Name","nameLocation":"6158:11:2","nodeType":"FunctionDefinition","parameters":{"id":846,"nodeType":"ParameterList","parameters":[],"src":"6169:2:2"},"returnParameters":{"id":849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":848,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":856,"src":"6195:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":847,"name":"string","nodeType":"ElementaryTypeName","src":"6195:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6194:15:2"},"scope":869,"src":"6149:128:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":867,"nodeType":"Block","src":"6676:73:2","statements":[{"expression":{"arguments":[{"id":864,"name":"_versionFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":681,"src":"6724:16:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":862,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"6694:8:2","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}},"id":863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6703:20:2","memberName":"toStringWithFallback","nodeType":"MemberAccess","referencedDeclaration":5049,"src":"6694:29:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$4870_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$bound_to$_t_userDefinedValueType$_ShortString_$4870_$","typeString":"function (ShortString,string storage pointer) pure returns (string memory)"}},"id":865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6694:47:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":861,"id":866,"nodeType":"Return","src":"6687:54:2"}]},"documentation":{"id":857,"nodeType":"StructuredDocumentation","src":"6285:267:2","text":" @dev The version parameter for the EIP712 domain.\n NOTE: By default this function reads _version which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."},"id":868,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712Version","nameLocation":"6621:14:2","nodeType":"FunctionDefinition","parameters":{"id":858,"nodeType":"ParameterList","parameters":[],"src":"6635:2:2"},"returnParameters":{"id":861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":860,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":868,"src":"6661:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":859,"name":"string","nodeType":"ElementaryTypeName","src":"6661:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6660:15:2"},"scope":869,"src":"6612:137:2","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":870,"src":"1976:4776:2","usedErrors":[4878,4880]}],"src":"116:6636:2"},"id":2},"contracts/ERC20.sol":{"ast":{"absolutePath":"contracts/ERC20.sol","exportedSymbols":{"Address":[294],"ECDSA":[642],"EIP712":[869],"ERC20":[1419],"IERC20":[1488],"IERC20Metadata":[1509],"IERC20Permit":[1545],"IERC5267":[1570],"MessageHashUtils":[2698],"Nonces":[2766],"ShortString":[4870],"ShortStrings":[5081]},"id":1420,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":871,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"35:23:3"},{"absolutePath":"contracts/Address.sol","file":"./Address.sol","id":872,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1420,"sourceUnit":295,"src":"62:23:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/IERC20.sol","file":"./IERC20.sol","id":873,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1420,"sourceUnit":1489,"src":"87:22:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/IERC20Metadata.sol","file":"./IERC20Metadata.sol","id":874,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1420,"sourceUnit":1510,"src":"111:30:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/EIP712.sol","file":"./EIP712.sol","id":875,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1420,"sourceUnit":870,"src":"143:22:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/Nonces.sol","file":"./Nonces.sol","id":876,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1420,"sourceUnit":2767,"src":"167:22:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/IERC20Permit.sol","file":"./IERC20Permit.sol","id":877,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1420,"sourceUnit":1546,"src":"191:28:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/ECDSA.sol","file":"./ECDSA.sol","id":878,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1420,"sourceUnit":643,"src":"221:21:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":879,"name":"IERC20","nameLocations":["264:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":1488,"src":"264:6:3"},"id":880,"nodeType":"InheritanceSpecifier","src":"264:6:3"},{"baseName":{"id":881,"name":"IERC20Metadata","nameLocations":["272:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":1509,"src":"272:14:3"},"id":882,"nodeType":"InheritanceSpecifier","src":"272:14:3"},{"baseName":{"id":883,"name":"IERC20Permit","nameLocations":["288:12:3"],"nodeType":"IdentifierPath","referencedDeclaration":1545,"src":"288:12:3"},"id":884,"nodeType":"InheritanceSpecifier","src":"288:12:3"},{"baseName":{"id":885,"name":"EIP712","nameLocations":["302:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":869,"src":"302:6:3"},"id":886,"nodeType":"InheritanceSpecifier","src":"302:6:3"},{"baseName":{"id":887,"name":"Nonces","nameLocations":["310:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":2766,"src":"310:6:3"},"id":888,"nodeType":"InheritanceSpecifier","src":"310:6:3"}],"canonicalName":"ERC20","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1419,"linearizedBaseContracts":[1419,2766,869,1570,1545,1509,1488],"name":"ERC20","nameLocation":"255:5:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":891,"libraryName":{"id":889,"name":"Address","nameLocations":["330:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":294,"src":"330:7:3"},"nodeType":"UsingForDirective","src":"324:26:3","typeName":{"id":890,"name":"address","nodeType":"ElementaryTypeName","src":"342:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"constant":true,"id":896,"mutability":"constant","name":"PERMIT_TYPEHASH","nameLocation":"383:15:3","nodeType":"VariableDeclaration","scope":1419,"src":"358:147:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":892,"name":"bytes32","nodeType":"ElementaryTypeName","src":"358:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529","id":894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"420:84:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9","typeString":"literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""},"value":"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9","typeString":"literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""}],"id":893,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"410:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"410:95:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"documentation":{"id":897,"nodeType":"StructuredDocumentation","src":"514:54:3","text":" @dev Permit deadline has expired."},"errorSelector":"62791302","id":901,"name":"ERC2612ExpiredSignature","nameLocation":"580:23:3","nodeType":"ErrorDefinition","parameters":{"id":900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":899,"mutability":"mutable","name":"deadline","nameLocation":"612:8:3","nodeType":"VariableDeclaration","scope":901,"src":"604:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":898,"name":"uint256","nodeType":"ElementaryTypeName","src":"604:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"603:18:3"},"src":"574:48:3"},{"documentation":{"id":902,"nodeType":"StructuredDocumentation","src":"630:47:3","text":" @dev Mismatched signature."},"errorSelector":"4b800e46","id":908,"name":"ERC2612InvalidSigner","nameLocation":"689:20:3","nodeType":"ErrorDefinition","parameters":{"id":907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":904,"mutability":"mutable","name":"signer","nameLocation":"718:6:3","nodeType":"VariableDeclaration","scope":908,"src":"710:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":903,"name":"address","nodeType":"ElementaryTypeName","src":"710:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":906,"mutability":"mutable","name":"owner","nameLocation":"734:5:3","nodeType":"VariableDeclaration","scope":908,"src":"726:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":905,"name":"address","nodeType":"ElementaryTypeName","src":"726:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"709:31:3"},"src":"683:58:3"},{"constant":false,"id":912,"mutability":"mutable","name":"_balances","nameLocation":"785:9:3","nodeType":"VariableDeclaration","scope":1419,"src":"749:45:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":911,"keyType":{"id":909,"name":"address","nodeType":"ElementaryTypeName","src":"757:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"749:27:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":910,"name":"uint256","nodeType":"ElementaryTypeName","src":"768:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":918,"mutability":"mutable","name":"_allowances","nameLocation":"857:11:3","nodeType":"VariableDeclaration","scope":1419,"src":"801:67:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":917,"keyType":{"id":913,"name":"address","nodeType":"ElementaryTypeName","src":"809:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"801:47:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueType":{"id":916,"keyType":{"id":914,"name":"address","nodeType":"ElementaryTypeName","src":"828:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"820:27:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":915,"name":"uint256","nodeType":"ElementaryTypeName","src":"839:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":920,"mutability":"mutable","name":"_totalSupply","nameLocation":"891:12:3","nodeType":"VariableDeclaration","scope":1419,"src":"875:28:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":919,"name":"uint256","nodeType":"ElementaryTypeName","src":"875:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":922,"mutability":"mutable","name":"_name","nameLocation":"925:5:3","nodeType":"VariableDeclaration","scope":1419,"src":"910:20:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":921,"name":"string","nodeType":"ElementaryTypeName","src":"910:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":924,"mutability":"mutable","name":"_symbol","nameLocation":"952:7:3","nodeType":"VariableDeclaration","scope":1419,"src":"937:22:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":923,"name":"string","nodeType":"ElementaryTypeName","src":"937:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":951,"nodeType":"Block","src":"1099:102:3","statements":[{"expression":{"id":939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":937,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"1110:5:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":938,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"1118:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1110:13:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":940,"nodeType":"ExpressionStatement","src":"1110:13:3"},{"expression":{"id":943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":941,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"1134:7:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":942,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"1144:7:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1134:17:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":944,"nodeType":"ExpressionStatement","src":"1134:17:3"},{"expression":{"arguments":[{"expression":{"id":946,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1168:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1172:6:3","memberName":"sender","nodeType":"MemberAccess","src":"1168:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":948,"name":"totalSupply_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":930,"src":"1180:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":945,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"1162:5:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1162:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":950,"nodeType":"ExpressionStatement","src":"1162:31:3"}]},"id":952,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":933,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"1087:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"31","id":934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1094:3:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6","typeString":"literal_string \"1\""},"value":"1"}],"id":935,"kind":"baseConstructorSpecifier","modifierName":{"id":932,"name":"EIP712","nameLocations":["1080:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":869,"src":"1080:6:3"},"nodeType":"ModifierInvocation","src":"1080:18:3"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":926,"mutability":"mutable","name":"name_","nameLocation":"1004:5:3","nodeType":"VariableDeclaration","scope":952,"src":"990:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":925,"name":"string","nodeType":"ElementaryTypeName","src":"990:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":928,"mutability":"mutable","name":"symbol_","nameLocation":"1034:7:3","nodeType":"VariableDeclaration","scope":952,"src":"1020:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":927,"name":"string","nodeType":"ElementaryTypeName","src":"1020:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":930,"mutability":"mutable","name":"totalSupply_","nameLocation":"1060:12:3","nodeType":"VariableDeclaration","scope":952,"src":"1052:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":929,"name":"uint256","nodeType":"ElementaryTypeName","src":"1052:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"979:100:3"},"returnParameters":{"id":936,"nodeType":"ParameterList","parameters":[],"src":"1099:0:3"},"scope":1419,"src":"968:233:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1498],"body":{"id":960,"nodeType":"Block","src":"1278:31:3","statements":[{"expression":{"id":958,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"1296:5:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":957,"id":959,"nodeType":"Return","src":"1289:12:3"}]},"functionSelector":"06fdde03","id":961,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"1218:4:3","nodeType":"FunctionDefinition","overrides":{"id":954,"nodeType":"OverrideSpecifier","overrides":[],"src":"1245:8:3"},"parameters":{"id":953,"nodeType":"ParameterList","parameters":[],"src":"1222:2:3"},"returnParameters":{"id":957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":956,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":961,"src":"1263:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":955,"name":"string","nodeType":"ElementaryTypeName","src":"1263:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1262:15:3"},"scope":1419,"src":"1209:100:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1503],"body":{"id":969,"nodeType":"Block","src":"1388:33:3","statements":[{"expression":{"id":967,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"1406:7:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":966,"id":968,"nodeType":"Return","src":"1399:14:3"}]},"functionSelector":"95d89b41","id":970,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"1326:6:3","nodeType":"FunctionDefinition","overrides":{"id":963,"nodeType":"OverrideSpecifier","overrides":[],"src":"1355:8:3"},"parameters":{"id":962,"nodeType":"ParameterList","parameters":[],"src":"1332:2:3"},"returnParameters":{"id":966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":965,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":970,"src":"1373:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":964,"name":"string","nodeType":"ElementaryTypeName","src":"1373:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1372:15:3"},"scope":1419,"src":"1317:104:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1508],"body":{"id":978,"nodeType":"Block","src":"1494:28:3","statements":[{"expression":{"hexValue":"3138","id":976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1512:2:3","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"functionReturnParameters":975,"id":977,"nodeType":"Return","src":"1505:9:3"}]},"functionSelector":"313ce567","id":979,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"1438:8:3","nodeType":"FunctionDefinition","overrides":{"id":972,"nodeType":"OverrideSpecifier","overrides":[],"src":"1469:8:3"},"parameters":{"id":971,"nodeType":"ParameterList","parameters":[],"src":"1446:2:3"},"returnParameters":{"id":975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":974,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":979,"src":"1487:5:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":973,"name":"uint8","nodeType":"ElementaryTypeName","src":"1487:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"1486:7:3"},"scope":1419,"src":"1429:93:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1426],"body":{"id":987,"nodeType":"Block","src":"1600:38:3","statements":[{"expression":{"id":985,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":920,"src":"1618:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":984,"id":986,"nodeType":"Return","src":"1611:19:3"}]},"functionSelector":"18160ddd","id":988,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"1539:11:3","nodeType":"FunctionDefinition","overrides":{"id":981,"nodeType":"OverrideSpecifier","overrides":[],"src":"1573:8:3"},"parameters":{"id":980,"nodeType":"ParameterList","parameters":[],"src":"1550:2:3"},"returnParameters":{"id":984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":983,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":988,"src":"1591:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":982,"name":"uint256","nodeType":"ElementaryTypeName","src":"1591:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1590:9:3"},"scope":1419,"src":"1530:108:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1433],"body":{"id":1000,"nodeType":"Block","src":"1745:44:3","statements":[{"expression":{"baseExpression":{"id":996,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":912,"src":"1763:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":998,"indexExpression":{"id":997,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":990,"src":"1773:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1763:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":995,"id":999,"nodeType":"Return","src":"1756:25:3"}]},"functionSelector":"70a08231","id":1001,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1655:9:3","nodeType":"FunctionDefinition","overrides":{"id":992,"nodeType":"OverrideSpecifier","overrides":[],"src":"1718:8:3"},"parameters":{"id":991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":990,"mutability":"mutable","name":"account","nameLocation":"1683:7:3","nodeType":"VariableDeclaration","scope":1001,"src":"1675:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":989,"name":"address","nodeType":"ElementaryTypeName","src":"1675:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1664:33:3"},"returnParameters":{"id":995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":994,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1001,"src":"1736:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":993,"name":"uint256","nodeType":"ElementaryTypeName","src":"1736:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1735:9:3"},"scope":1419,"src":"1646:143:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1471],"body":{"id":1047,"nodeType":"Block","src":"1943:379:3","statements":[{"expression":{"arguments":[{"id":1014,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"1964:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1015,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1005,"src":"1972:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1016,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"1983:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1013,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"1954:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1954:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1018,"nodeType":"ExpressionStatement","src":"1954:36:3"},{"assignments":[1020],"declarations":[{"constant":false,"id":1020,"mutability":"mutable","name":"currentAllowance","nameLocation":"2011:16:3","nodeType":"VariableDeclaration","scope":1047,"src":"2003:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1019,"name":"uint256","nodeType":"ElementaryTypeName","src":"2003:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1027,"initialValue":{"baseExpression":{"baseExpression":{"id":1021,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"2030:11:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":1023,"indexExpression":{"id":1022,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"2042:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2030:19:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1026,"indexExpression":{"expression":{"id":1024,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2050:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2054:6:3","memberName":"sender","nodeType":"MemberAccess","src":"2050:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2030:31:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2003:58:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1029,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1020,"src":"2094:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1030,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"2114:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2094:26:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365","id":1032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2135:42:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330","typeString":"literal_string \"ERC20: transfer amount exceeds allowance\""},"value":"ERC20: transfer amount exceeds allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330","typeString":"literal_string \"ERC20: transfer amount exceeds allowance\""}],"id":1028,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2072:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2072:116:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1034,"nodeType":"ExpressionStatement","src":"2072:116:3"},{"id":1044,"nodeType":"UncheckedBlock","src":"2199:92:3","statements":[{"expression":{"arguments":[{"id":1036,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"2233:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1037,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2241:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2245:6:3","memberName":"sender","nodeType":"MemberAccess","src":"2241:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1039,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1020,"src":"2253:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1040,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"2272:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2253:25:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1035,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"2224:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2224:55:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1043,"nodeType":"ExpressionStatement","src":"2224:55:3"}]},{"expression":{"hexValue":"74727565","id":1045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2310:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1012,"id":1046,"nodeType":"Return","src":"2303:11:3"}]},"functionSelector":"23b872dd","id":1048,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"1806:12:3","nodeType":"FunctionDefinition","overrides":{"id":1009,"nodeType":"OverrideSpecifier","overrides":[],"src":"1919:8:3"},"parameters":{"id":1008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1003,"mutability":"mutable","name":"sender","nameLocation":"1837:6:3","nodeType":"VariableDeclaration","scope":1048,"src":"1829:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1002,"name":"address","nodeType":"ElementaryTypeName","src":"1829:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1005,"mutability":"mutable","name":"recipient","nameLocation":"1862:9:3","nodeType":"VariableDeclaration","scope":1048,"src":"1854:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1004,"name":"address","nodeType":"ElementaryTypeName","src":"1854:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1007,"mutability":"mutable","name":"amount","nameLocation":"1890:6:3","nodeType":"VariableDeclaration","scope":1048,"src":"1882:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1006,"name":"uint256","nodeType":"ElementaryTypeName","src":"1882:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1818:85:3"},"returnParameters":{"id":1012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1011,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1048,"src":"1937:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1010,"name":"bool","nodeType":"ElementaryTypeName","src":"1937:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1936:6:3"},"scope":1419,"src":"1797:525:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1442],"body":{"id":1067,"nodeType":"Block","src":"2447:81:3","statements":[{"expression":{"arguments":[{"expression":{"id":1059,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2468:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2472:6:3","memberName":"sender","nodeType":"MemberAccess","src":"2468:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1061,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"2480:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1062,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1052,"src":"2491:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1058,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"2458:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2458:40:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1064,"nodeType":"ExpressionStatement","src":"2458:40:3"},{"expression":{"hexValue":"74727565","id":1065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2516:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1057,"id":1066,"nodeType":"Return","src":"2509:11:3"}]},"functionSelector":"a9059cbb","id":1068,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"2339:8:3","nodeType":"FunctionDefinition","overrides":{"id":1054,"nodeType":"OverrideSpecifier","overrides":[],"src":"2423:8:3"},"parameters":{"id":1053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1050,"mutability":"mutable","name":"recipient","nameLocation":"2366:9:3","nodeType":"VariableDeclaration","scope":1068,"src":"2358:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1049,"name":"address","nodeType":"ElementaryTypeName","src":"2358:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1052,"mutability":"mutable","name":"amount","nameLocation":"2394:6:3","nodeType":"VariableDeclaration","scope":1068,"src":"2386:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1051,"name":"uint256","nodeType":"ElementaryTypeName","src":"2386:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2347:60:3"},"returnParameters":{"id":1057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1056,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1068,"src":"2441:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1055,"name":"bool","nodeType":"ElementaryTypeName","src":"2441:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2440:6:3"},"scope":1419,"src":"2330:198:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1451],"body":{"id":1084,"nodeType":"Block","src":"2659:53:3","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":1078,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"2677:11:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":1080,"indexExpression":{"id":1079,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"2689:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2677:18:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1082,"indexExpression":{"id":1081,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"2696:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2677:27:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1077,"id":1083,"nodeType":"Return","src":"2670:34:3"}]},"functionSelector":"dd62ed3e","id":1085,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"2545:9:3","nodeType":"FunctionDefinition","overrides":{"id":1074,"nodeType":"OverrideSpecifier","overrides":[],"src":"2632:8:3"},"parameters":{"id":1073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1070,"mutability":"mutable","name":"owner","nameLocation":"2573:5:3","nodeType":"VariableDeclaration","scope":1085,"src":"2565:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1069,"name":"address","nodeType":"ElementaryTypeName","src":"2565:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1072,"mutability":"mutable","name":"spender","nameLocation":"2597:7:3","nodeType":"VariableDeclaration","scope":1085,"src":"2589:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1071,"name":"address","nodeType":"ElementaryTypeName","src":"2589:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2554:57:3"},"returnParameters":{"id":1077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1076,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1085,"src":"2650:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1075,"name":"uint256","nodeType":"ElementaryTypeName","src":"2650:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2649:9:3"},"scope":1419,"src":"2536:176:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1460],"body":{"id":1104,"nodeType":"Block","src":"2834:78:3","statements":[{"expression":{"arguments":[{"expression":{"id":1096,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2854:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2858:6:3","memberName":"sender","nodeType":"MemberAccess","src":"2854:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1098,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1087,"src":"2866:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1099,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1089,"src":"2875:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1095,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"2845:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2845:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1101,"nodeType":"ExpressionStatement","src":"2845:37:3"},{"expression":{"hexValue":"74727565","id":1102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2900:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1094,"id":1103,"nodeType":"Return","src":"2893:11:3"}]},"functionSelector":"095ea7b3","id":1105,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2729:7:3","nodeType":"FunctionDefinition","overrides":{"id":1091,"nodeType":"OverrideSpecifier","overrides":[],"src":"2810:8:3"},"parameters":{"id":1090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1087,"mutability":"mutable","name":"spender","nameLocation":"2755:7:3","nodeType":"VariableDeclaration","scope":1105,"src":"2747:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1086,"name":"address","nodeType":"ElementaryTypeName","src":"2747:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1089,"mutability":"mutable","name":"amount","nameLocation":"2781:6:3","nodeType":"VariableDeclaration","scope":1105,"src":"2773:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1088,"name":"uint256","nodeType":"ElementaryTypeName","src":"2773:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2736:58:3"},"returnParameters":{"id":1094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1093,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1105,"src":"2828:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1092,"name":"bool","nodeType":"ElementaryTypeName","src":"2828:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2827:6:3"},"scope":1419,"src":"2720:192:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1142,"nodeType":"Block","src":"3044:347:3","statements":[{"assignments":[1115],"declarations":[{"constant":false,"id":1115,"mutability":"mutable","name":"currentAllowance","nameLocation":"3063:16:3","nodeType":"VariableDeclaration","scope":1142,"src":"3055:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1114,"name":"uint256","nodeType":"ElementaryTypeName","src":"3055:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1122,"initialValue":{"baseExpression":{"baseExpression":{"id":1116,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"3082:11:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":1119,"indexExpression":{"expression":{"id":1117,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3094:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3098:6:3","memberName":"sender","nodeType":"MemberAccess","src":"3094:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3082:23:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1121,"indexExpression":{"id":1120,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"3106:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3082:32:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3055:59:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1124,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1115,"src":"3147:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1125,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1109,"src":"3167:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3147:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":1127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3197:39:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""},"value":"ERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""}],"id":1123,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3125:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3125:122:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1129,"nodeType":"ExpressionStatement","src":"3125:122:3"},{"id":1139,"nodeType":"UncheckedBlock","src":"3258:102:3","statements":[{"expression":{"arguments":[{"expression":{"id":1131,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3292:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3296:6:3","memberName":"sender","nodeType":"MemberAccess","src":"3292:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1133,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"3304:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1134,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1115,"src":"3313:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1135,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1109,"src":"3332:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3313:34:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1130,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"3283:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3283:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1138,"nodeType":"ExpressionStatement","src":"3283:65:3"}]},{"expression":{"hexValue":"74727565","id":1140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3379:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1113,"id":1141,"nodeType":"Return","src":"3372:11:3"}]},"functionSelector":"a457c2d7","id":1143,"implemented":true,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"2929:17:3","nodeType":"FunctionDefinition","parameters":{"id":1110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1107,"mutability":"mutable","name":"spender","nameLocation":"2965:7:3","nodeType":"VariableDeclaration","scope":1143,"src":"2957:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1106,"name":"address","nodeType":"ElementaryTypeName","src":"2957:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1109,"mutability":"mutable","name":"subtractedValue","nameLocation":"2991:15:3","nodeType":"VariableDeclaration","scope":1143,"src":"2983:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1108,"name":"uint256","nodeType":"ElementaryTypeName","src":"2983:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2946:67:3"},"returnParameters":{"id":1113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1112,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1143,"src":"3038:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1111,"name":"bool","nodeType":"ElementaryTypeName","src":"3038:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3037:6:3"},"scope":1419,"src":"2920:471:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1168,"nodeType":"Block","src":"3518:167:3","statements":[{"expression":{"arguments":[{"expression":{"id":1153,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3552:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3556:6:3","memberName":"sender","nodeType":"MemberAccess","src":"3552:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1155,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"3577:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":1156,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"3599:11:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":1159,"indexExpression":{"expression":{"id":1157,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3611:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3615:6:3","memberName":"sender","nodeType":"MemberAccess","src":"3611:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3599:23:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1161,"indexExpression":{"id":1160,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"3623:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3599:32:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1162,"name":"addedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"3634:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3599:45:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1152,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"3529:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3529:126:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1165,"nodeType":"ExpressionStatement","src":"3529:126:3"},{"expression":{"hexValue":"74727565","id":1166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3673:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1151,"id":1167,"nodeType":"Return","src":"3666:11:3"}]},"functionSelector":"39509351","id":1169,"implemented":true,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"3408:17:3","nodeType":"FunctionDefinition","parameters":{"id":1148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1145,"mutability":"mutable","name":"spender","nameLocation":"3444:7:3","nodeType":"VariableDeclaration","scope":1169,"src":"3436:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1144,"name":"address","nodeType":"ElementaryTypeName","src":"3436:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1147,"mutability":"mutable","name":"addedValue","nameLocation":"3470:10:3","nodeType":"VariableDeclaration","scope":1169,"src":"3462:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1146,"name":"uint256","nodeType":"ElementaryTypeName","src":"3462:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3425:62:3"},"returnParameters":{"id":1151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1150,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1169,"src":"3512:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1149,"name":"bool","nodeType":"ElementaryTypeName","src":"3512:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3511:6:3"},"scope":1419,"src":"3399:286:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1232,"nodeType":"Block","src":"3814:530:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1179,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"3833:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3851:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3843:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1180,"name":"address","nodeType":"ElementaryTypeName","src":"3843:7:3","typeDescriptions":{}}},"id":1183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3843:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3833:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373","id":1185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3855:39:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""},"value":"ERC20: transfer from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""}],"id":1178,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3825:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3825:70:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1187,"nodeType":"ExpressionStatement","src":"3825:70:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1189,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"3914:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3935:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1191,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3927:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1190,"name":"address","nodeType":"ElementaryTypeName","src":"3927:7:3","typeDescriptions":{}}},"id":1193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3927:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3914:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472657373","id":1195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3939:37:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""},"value":"ERC20: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""}],"id":1188,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3906:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3906:71:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1197,"nodeType":"ExpressionStatement","src":"3906:71:3"},{"assignments":[1199],"declarations":[{"constant":false,"id":1199,"mutability":"mutable","name":"senderBalance","nameLocation":"3998:13:3","nodeType":"VariableDeclaration","scope":1232,"src":"3990:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1198,"name":"uint256","nodeType":"ElementaryTypeName","src":"3990:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1203,"initialValue":{"baseExpression":{"id":1200,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":912,"src":"4014:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1202,"indexExpression":{"id":1201,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"4024:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4014:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3990:41:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1205,"name":"senderBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1199,"src":"4064:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1206,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"4081:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4064:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365","id":1208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4102:40:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""},"value":"ERC20: transfer amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""}],"id":1204,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4042:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4042:111:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1210,"nodeType":"ExpressionStatement","src":"4042:111:3"},{"id":1219,"nodeType":"UncheckedBlock","src":"4164:79:3","statements":[{"expression":{"id":1217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1211,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":912,"src":"4189:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1213,"indexExpression":{"id":1212,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"4199:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4189:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1214,"name":"senderBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1199,"src":"4209:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1215,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"4225:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4209:22:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4189:42:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1218,"nodeType":"ExpressionStatement","src":"4189:42:3"}]},{"expression":{"id":1224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1220,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":912,"src":"4253:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1222,"indexExpression":{"id":1221,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"4263:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4253:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1223,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"4277:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4253:30:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1225,"nodeType":"ExpressionStatement","src":"4253:30:3"},{"eventCall":{"arguments":[{"id":1227,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"4310:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1228,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"4318:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1229,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"4329:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1226,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"4301:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4301:35:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1231,"nodeType":"EmitStatement","src":"4296:40:3"}]},"id":1233,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"3702:9:3","nodeType":"FunctionDefinition","parameters":{"id":1176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1171,"mutability":"mutable","name":"sender","nameLocation":"3730:6:3","nodeType":"VariableDeclaration","scope":1233,"src":"3722:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1170,"name":"address","nodeType":"ElementaryTypeName","src":"3722:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1173,"mutability":"mutable","name":"recipient","nameLocation":"3755:9:3","nodeType":"VariableDeclaration","scope":1233,"src":"3747:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1172,"name":"address","nodeType":"ElementaryTypeName","src":"3747:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1175,"mutability":"mutable","name":"amount","nameLocation":"3783:6:3","nodeType":"VariableDeclaration","scope":1233,"src":"3775:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1174,"name":"uint256","nodeType":"ElementaryTypeName","src":"3775:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3711:85:3"},"returnParameters":{"id":1177,"nodeType":"ParameterList","parameters":[],"src":"3814:0:3"},"scope":1419,"src":"3693:651:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1269,"nodeType":"Block","src":"4417:211:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1241,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1235,"src":"4436:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4455:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1243,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4447:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1242,"name":"address","nodeType":"ElementaryTypeName","src":"4447:7:3","typeDescriptions":{}}},"id":1245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4447:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4436:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","id":1247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4459:33:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""},"value":"ERC20: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""}],"id":1240,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4428:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4428:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1249,"nodeType":"ExpressionStatement","src":"4428:65:3"},{"expression":{"id":1252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1250,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":920,"src":"4506:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1251,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"4522:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4506:22:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1253,"nodeType":"ExpressionStatement","src":"4506:22:3"},{"expression":{"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1254,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":912,"src":"4539:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1256,"indexExpression":{"id":1255,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1235,"src":"4549:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4539:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1257,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"4561:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4539:28:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1259,"nodeType":"ExpressionStatement","src":"4539:28:3"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4600:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1262,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4592:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1261,"name":"address","nodeType":"ElementaryTypeName","src":"4592:7:3","typeDescriptions":{}}},"id":1264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4592:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1265,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1235,"src":"4604:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1266,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"4613:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1260,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"4583:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4583:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1268,"nodeType":"EmitStatement","src":"4578:42:3"}]},"id":1270,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"4361:5:3","nodeType":"FunctionDefinition","parameters":{"id":1238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1235,"mutability":"mutable","name":"account","nameLocation":"4375:7:3","nodeType":"VariableDeclaration","scope":1270,"src":"4367:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1234,"name":"address","nodeType":"ElementaryTypeName","src":"4367:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1237,"mutability":"mutable","name":"amount","nameLocation":"4392:6:3","nodeType":"VariableDeclaration","scope":1270,"src":"4384:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1236,"name":"uint256","nodeType":"ElementaryTypeName","src":"4384:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4366:33:3"},"returnParameters":{"id":1239,"nodeType":"ParameterList","parameters":[],"src":"4417:0:3"},"scope":1419,"src":"4352:276:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1313,"nodeType":"Block","src":"4753:263:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1280,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"4772:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4789:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1282,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4781:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1281,"name":"address","nodeType":"ElementaryTypeName","src":"4781:7:3","typeDescriptions":{}}},"id":1284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4781:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4772:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373","id":1286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4793:38:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""},"value":"ERC20: approve from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""}],"id":1279,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4764:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4764:68:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1288,"nodeType":"ExpressionStatement","src":"4764:68:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1290,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1274,"src":"4851:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4870:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1292,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4862:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1291,"name":"address","nodeType":"ElementaryTypeName","src":"4862:7:3","typeDescriptions":{}}},"id":1294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4862:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4851:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f2061646472657373","id":1296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4874:36:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""},"value":"ERC20: approve to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""}],"id":1289,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4843:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4843:68:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1298,"nodeType":"ExpressionStatement","src":"4843:68:3"},{"expression":{"id":1305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1299,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"4924:11:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":1302,"indexExpression":{"id":1300,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"4936:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4924:18:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1303,"indexExpression":{"id":1301,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1274,"src":"4943:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4924:27:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1304,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"4954:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:36:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1306,"nodeType":"ExpressionStatement","src":"4924:36:3"},{"eventCall":{"arguments":[{"id":1308,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"4985:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1309,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1274,"src":"4992:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1310,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"5001:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1307,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1487,"src":"4976:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4976:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1312,"nodeType":"EmitStatement","src":"4971:37:3"}]},"id":1314,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"4645:8:3","nodeType":"FunctionDefinition","parameters":{"id":1277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1272,"mutability":"mutable","name":"owner","nameLocation":"4672:5:3","nodeType":"VariableDeclaration","scope":1314,"src":"4664:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1271,"name":"address","nodeType":"ElementaryTypeName","src":"4664:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1274,"mutability":"mutable","name":"spender","nameLocation":"4696:7:3","nodeType":"VariableDeclaration","scope":1314,"src":"4688:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1273,"name":"address","nodeType":"ElementaryTypeName","src":"4688:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1276,"mutability":"mutable","name":"amount","nameLocation":"4722:6:3","nodeType":"VariableDeclaration","scope":1314,"src":"4714:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1275,"name":"uint256","nodeType":"ElementaryTypeName","src":"4714:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4653:82:3"},"returnParameters":{"id":1278,"nodeType":"ParameterList","parameters":[],"src":"4753:0:3"},"scope":1419,"src":"4636:380:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[1530],"body":{"id":1390,"nodeType":"Block","src":"5272:498:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1332,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5287:5:3","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5293:9:3","memberName":"timestamp","nodeType":"MemberAccess","src":"5287:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1334,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1323,"src":"5305:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5287:26:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1341,"nodeType":"IfStatement","src":"5283:99:3","trueBody":{"id":1340,"nodeType":"Block","src":"5315:67:3","statements":[{"errorCall":{"arguments":[{"id":1337,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1323,"src":"5361:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1336,"name":"ERC2612ExpiredSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":901,"src":"5337:23:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5337:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1339,"nodeType":"RevertStatement","src":"5330:40:3"}]}},{"assignments":[1343],"declarations":[{"constant":false,"id":1343,"mutability":"mutable","name":"structHash","nameLocation":"5402:10:3","nodeType":"VariableDeclaration","scope":1390,"src":"5394:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1342,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5394:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1357,"initialValue":{"arguments":[{"arguments":[{"id":1347,"name":"PERMIT_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"5436:15:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1348,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1317,"src":"5453:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1349,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1319,"src":"5460:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1350,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"5469:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":1352,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1317,"src":"5486:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1351,"name":"_useNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2740,"src":"5476:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$","typeString":"function (address) returns (uint256)"}},"id":1353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5476:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1354,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1323,"src":"5494:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1345,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5425:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1346,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5429:6:3","memberName":"encode","nodeType":"MemberAccess","src":"5425:10:3","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5425:78:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1344,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5415:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5415:89:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5394:110:3"},{"assignments":[1359],"declarations":[{"constant":false,"id":1359,"mutability":"mutable","name":"hash","nameLocation":"5525:4:3","nodeType":"VariableDeclaration","scope":1390,"src":"5517:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1358,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5517:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1363,"initialValue":{"arguments":[{"id":1361,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1343,"src":"5549:10:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1360,"name":"_hashTypedDataV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":802,"src":"5532:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":1362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5532:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5517:43:3"},{"assignments":[1365],"declarations":[{"constant":false,"id":1365,"mutability":"mutable","name":"signer","nameLocation":"5581:6:3","nodeType":"VariableDeclaration","scope":1390,"src":"5573:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1364,"name":"address","nodeType":"ElementaryTypeName","src":"5573:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1373,"initialValue":{"arguments":[{"id":1368,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1359,"src":"5604:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1369,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"5610:1:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1370,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1327,"src":"5613:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1371,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"5616:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1366,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"5590:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$642_$","typeString":"type(library ECDSA)"}},"id":1367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5596:7:3","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":592,"src":"5590:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5590:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5573:45:3"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1374,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1365,"src":"5633:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1375,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1317,"src":"5643:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5633:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1383,"nodeType":"IfStatement","src":"5629:90:3","trueBody":{"id":1382,"nodeType":"Block","src":"5650:69:3","statements":[{"errorCall":{"arguments":[{"id":1378,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1365,"src":"5693:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1379,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1317,"src":"5701:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1377,"name":"ERC2612InvalidSigner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":908,"src":"5672:20:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":1380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5672:35:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1381,"nodeType":"RevertStatement","src":"5665:42:3"}]}},{"expression":{"arguments":[{"id":1385,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1317,"src":"5740:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1386,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1319,"src":"5747:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1387,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"5756:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1384,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"5731:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5731:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1389,"nodeType":"ExpressionStatement","src":"5731:31:3"}]},"documentation":{"id":1315,"nodeType":"StructuredDocumentation","src":"5024:45:3","text":" @inheritdoc IERC20Permit"},"functionSelector":"d505accf","id":1391,"implemented":true,"kind":"function","modifiers":[],"name":"permit","nameLocation":"5084:6:3","nodeType":"FunctionDefinition","parameters":{"id":1330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1317,"mutability":"mutable","name":"owner","nameLocation":"5109:5:3","nodeType":"VariableDeclaration","scope":1391,"src":"5101:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1316,"name":"address","nodeType":"ElementaryTypeName","src":"5101:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1319,"mutability":"mutable","name":"spender","nameLocation":"5133:7:3","nodeType":"VariableDeclaration","scope":1391,"src":"5125:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1318,"name":"address","nodeType":"ElementaryTypeName","src":"5125:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1321,"mutability":"mutable","name":"value","nameLocation":"5159:5:3","nodeType":"VariableDeclaration","scope":1391,"src":"5151:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1320,"name":"uint256","nodeType":"ElementaryTypeName","src":"5151:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1323,"mutability":"mutable","name":"deadline","nameLocation":"5183:8:3","nodeType":"VariableDeclaration","scope":1391,"src":"5175:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1322,"name":"uint256","nodeType":"ElementaryTypeName","src":"5175:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1325,"mutability":"mutable","name":"v","nameLocation":"5208:1:3","nodeType":"VariableDeclaration","scope":1391,"src":"5202:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1324,"name":"uint8","nodeType":"ElementaryTypeName","src":"5202:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1327,"mutability":"mutable","name":"r","nameLocation":"5228:1:3","nodeType":"VariableDeclaration","scope":1391,"src":"5220:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1326,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5220:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1329,"mutability":"mutable","name":"s","nameLocation":"5248:1:3","nodeType":"VariableDeclaration","scope":1391,"src":"5240:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1328,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5240:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5090:166:3"},"returnParameters":{"id":1331,"nodeType":"ParameterList","parameters":[],"src":"5272:0:3"},"scope":1419,"src":"5075:695:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1538,2725],"body":{"id":1407,"nodeType":"Block","src":"5929:45:3","statements":[{"expression":{"arguments":[{"id":1404,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1394,"src":"5960:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1402,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"5947:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC20_$1419_$","typeString":"type(contract super ERC20)"}},"id":1403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5953:6:3","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":2725,"src":"5947:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":1405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5947:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1401,"id":1406,"nodeType":"Return","src":"5940:26:3"}]},"documentation":{"id":1392,"nodeType":"StructuredDocumentation","src":"5778:45:3","text":" @inheritdoc IERC20Permit"},"functionSelector":"7ecebe00","id":1408,"implemented":true,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"5838:6:3","nodeType":"FunctionDefinition","overrides":{"id":1398,"nodeType":"OverrideSpecifier","overrides":[{"id":1396,"name":"IERC20Permit","nameLocations":["5889:12:3"],"nodeType":"IdentifierPath","referencedDeclaration":1545,"src":"5889:12:3"},{"id":1397,"name":"Nonces","nameLocations":["5903:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":2766,"src":"5903:6:3"}],"src":"5880:30:3"},"parameters":{"id":1395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1394,"mutability":"mutable","name":"owner","nameLocation":"5853:5:3","nodeType":"VariableDeclaration","scope":1408,"src":"5845:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1393,"name":"address","nodeType":"ElementaryTypeName","src":"5845:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5844:15:3"},"returnParameters":{"id":1401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1400,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1408,"src":"5920:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1399,"name":"uint256","nodeType":"ElementaryTypeName","src":"5920:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5919:9:3"},"scope":1419,"src":"5829:145:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1544],"body":{"id":1417,"nodeType":"Block","src":"6155:46:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1414,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"6173:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":1415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6173:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1413,"id":1416,"nodeType":"Return","src":"6166:27:3"}]},"documentation":{"id":1409,"nodeType":"StructuredDocumentation","src":"5982:45:3","text":" @inheritdoc IERC20Permit"},"functionSelector":"3644e515","id":1418,"implemented":true,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"6096:16:3","nodeType":"FunctionDefinition","parameters":{"id":1410,"nodeType":"ParameterList","parameters":[],"src":"6112:2:3"},"returnParameters":{"id":1413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1412,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1418,"src":"6146:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1411,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6146:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6145:9:3"},"scope":1419,"src":"6087:114:3","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":1420,"src":"246:5958:3","usedErrors":[305,310,315,901,908,2708,4878,4880]}],"src":"35:6171:3"},"id":3},"contracts/IERC20.sol":{"ast":{"absolutePath":"contracts/IERC20.sol","exportedSymbols":{"IERC20":[1488]},"id":1489,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1421,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"35:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1488,"linearizedBaseContracts":[1488],"name":"IERC20","nameLocation":"72:6:4","nodeType":"ContractDefinition","nodes":[{"functionSelector":"18160ddd","id":1426,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"95:11:4","nodeType":"FunctionDefinition","parameters":{"id":1422,"nodeType":"ParameterList","parameters":[],"src":"106:2:4"},"returnParameters":{"id":1425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1424,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1426,"src":"132:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1423,"name":"uint256","nodeType":"ElementaryTypeName","src":"132:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"131:9:4"},"scope":1488,"src":"86:55:4","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"70a08231","id":1433,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"156:9:4","nodeType":"FunctionDefinition","parameters":{"id":1429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1428,"mutability":"mutable","name":"account","nameLocation":"174:7:4","nodeType":"VariableDeclaration","scope":1433,"src":"166:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1427,"name":"address","nodeType":"ElementaryTypeName","src":"166:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"165:17:4"},"returnParameters":{"id":1432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1431,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1433,"src":"206:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1430,"name":"uint256","nodeType":"ElementaryTypeName","src":"206:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"205:9:4"},"scope":1488,"src":"147:68:4","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"a9059cbb","id":1442,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"230:8:4","nodeType":"FunctionDefinition","parameters":{"id":1438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1435,"mutability":"mutable","name":"recipient","nameLocation":"257:9:4","nodeType":"VariableDeclaration","scope":1442,"src":"249:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1434,"name":"address","nodeType":"ElementaryTypeName","src":"249:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1437,"mutability":"mutable","name":"amount","nameLocation":"285:6:4","nodeType":"VariableDeclaration","scope":1442,"src":"277:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1436,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"238:60:4"},"returnParameters":{"id":1441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1440,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1442,"src":"317:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1439,"name":"bool","nodeType":"ElementaryTypeName","src":"317:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"316:6:4"},"scope":1488,"src":"221:102:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"dd62ed3e","id":1451,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"338:9:4","nodeType":"FunctionDefinition","parameters":{"id":1447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1444,"mutability":"mutable","name":"owner","nameLocation":"366:5:4","nodeType":"VariableDeclaration","scope":1451,"src":"358:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1443,"name":"address","nodeType":"ElementaryTypeName","src":"358:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1446,"mutability":"mutable","name":"spender","nameLocation":"390:7:4","nodeType":"VariableDeclaration","scope":1451,"src":"382:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1445,"name":"address","nodeType":"ElementaryTypeName","src":"382:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"347:57:4"},"returnParameters":{"id":1450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1449,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1451,"src":"428:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1448,"name":"uint256","nodeType":"ElementaryTypeName","src":"428:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"427:9:4"},"scope":1488,"src":"329:108:4","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"095ea7b3","id":1460,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"452:7:4","nodeType":"FunctionDefinition","parameters":{"id":1456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1453,"mutability":"mutable","name":"spender","nameLocation":"468:7:4","nodeType":"VariableDeclaration","scope":1460,"src":"460:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1452,"name":"address","nodeType":"ElementaryTypeName","src":"460:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1455,"mutability":"mutable","name":"amount","nameLocation":"485:6:4","nodeType":"VariableDeclaration","scope":1460,"src":"477:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1454,"name":"uint256","nodeType":"ElementaryTypeName","src":"477:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"459:33:4"},"returnParameters":{"id":1459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1458,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1460,"src":"511:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1457,"name":"bool","nodeType":"ElementaryTypeName","src":"511:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"510:6:4"},"scope":1488,"src":"443:74:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"23b872dd","id":1471,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"532:12:4","nodeType":"FunctionDefinition","parameters":{"id":1467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1462,"mutability":"mutable","name":"sender","nameLocation":"563:6:4","nodeType":"VariableDeclaration","scope":1471,"src":"555:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1461,"name":"address","nodeType":"ElementaryTypeName","src":"555:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1464,"mutability":"mutable","name":"recipient","nameLocation":"588:9:4","nodeType":"VariableDeclaration","scope":1471,"src":"580:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1463,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1466,"mutability":"mutable","name":"amount","nameLocation":"616:6:4","nodeType":"VariableDeclaration","scope":1471,"src":"608:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1465,"name":"uint256","nodeType":"ElementaryTypeName","src":"608:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"544:85:4"},"returnParameters":{"id":1470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1469,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1471,"src":"648:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1468,"name":"bool","nodeType":"ElementaryTypeName","src":"648:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"647:6:4"},"scope":1488,"src":"523:131:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1479,"name":"Transfer","nameLocation":"668:8:4","nodeType":"EventDefinition","parameters":{"id":1478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1473,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"693:4:4","nodeType":"VariableDeclaration","scope":1479,"src":"677:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1472,"name":"address","nodeType":"ElementaryTypeName","src":"677:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1475,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"715:2:4","nodeType":"VariableDeclaration","scope":1479,"src":"699:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1474,"name":"address","nodeType":"ElementaryTypeName","src":"699:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1477,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"727:5:4","nodeType":"VariableDeclaration","scope":1479,"src":"719:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1476,"name":"uint256","nodeType":"ElementaryTypeName","src":"719:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"676:57:4"},"src":"662:72:4"},{"anonymous":false,"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1487,"name":"Approval","nameLocation":"746:8:4","nodeType":"EventDefinition","parameters":{"id":1486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1481,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"781:5:4","nodeType":"VariableDeclaration","scope":1487,"src":"765:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1480,"name":"address","nodeType":"ElementaryTypeName","src":"765:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1483,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"813:7:4","nodeType":"VariableDeclaration","scope":1487,"src":"797:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1482,"name":"address","nodeType":"ElementaryTypeName","src":"797:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1485,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"839:5:4","nodeType":"VariableDeclaration","scope":1487,"src":"831:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1484,"name":"uint256","nodeType":"ElementaryTypeName","src":"831:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"754:97:4"},"src":"740:112:4"}],"scope":1489,"src":"62:793:4","usedErrors":[]}],"src":"35:822:4"},"id":4},"contracts/IERC20Metadata.sol":{"ast":{"absolutePath":"contracts/IERC20Metadata.sol","exportedSymbols":{"IERC20":[1488],"IERC20Metadata":[1509]},"id":1510,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1490,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"128:23:5"},{"absolutePath":"contracts/IERC20.sol","file":"./IERC20.sol","id":1491,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1510,"sourceUnit":1489,"src":"155:22:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1492,"name":"IERC20","nameLocations":["209:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":1488,"src":"209:6:5"},"id":1493,"nodeType":"InheritanceSpecifier","src":"209:6:5"}],"canonicalName":"IERC20Metadata","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1509,"linearizedBaseContracts":[1509,1488],"name":"IERC20Metadata","nameLocation":"191:14:5","nodeType":"ContractDefinition","nodes":[{"functionSelector":"06fdde03","id":1498,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"232:4:5","nodeType":"FunctionDefinition","parameters":{"id":1494,"nodeType":"ParameterList","parameters":[],"src":"236:2:5"},"returnParameters":{"id":1497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1496,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1498,"src":"262:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1495,"name":"string","nodeType":"ElementaryTypeName","src":"262:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"261:15:5"},"scope":1509,"src":"223:54:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"95d89b41","id":1503,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"292:6:5","nodeType":"FunctionDefinition","parameters":{"id":1499,"nodeType":"ParameterList","parameters":[],"src":"298:2:5"},"returnParameters":{"id":1502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1501,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1503,"src":"324:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1500,"name":"string","nodeType":"ElementaryTypeName","src":"324:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"323:15:5"},"scope":1509,"src":"283:56:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"313ce567","id":1508,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"354:8:5","nodeType":"FunctionDefinition","parameters":{"id":1504,"nodeType":"ParameterList","parameters":[],"src":"362:2:5"},"returnParameters":{"id":1507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1506,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1508,"src":"388:5:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1505,"name":"uint8","nodeType":"ElementaryTypeName","src":"388:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"387:7:5"},"scope":1509,"src":"345:50:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1510,"src":"181:217:5","usedErrors":[]}],"src":"128:272:5"},"id":5},"contracts/IERC20Permit.sol":{"ast":{"absolutePath":"contracts/IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[1545]},"id":1546,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1511,"literals":["solidity","^","0.8",".17"],"nodeType":"PragmaDirective","src":"126:24:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","documentation":{"id":1512,"nodeType":"StructuredDocumentation","src":"154:2000:6","text":" @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\n Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."},"fullyImplemented":false,"id":1545,"linearizedBaseContracts":[1545],"name":"IERC20Permit","nameLocation":"2166:12:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1513,"nodeType":"StructuredDocumentation","src":"2186:872:6","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."},"functionSelector":"d505accf","id":1530,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"3073:6:6","nodeType":"FunctionDefinition","parameters":{"id":1528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1515,"mutability":"mutable","name":"owner","nameLocation":"3098:5:6","nodeType":"VariableDeclaration","scope":1530,"src":"3090:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1514,"name":"address","nodeType":"ElementaryTypeName","src":"3090:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1517,"mutability":"mutable","name":"spender","nameLocation":"3122:7:6","nodeType":"VariableDeclaration","scope":1530,"src":"3114:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1516,"name":"address","nodeType":"ElementaryTypeName","src":"3114:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1519,"mutability":"mutable","name":"value","nameLocation":"3148:5:6","nodeType":"VariableDeclaration","scope":1530,"src":"3140:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1518,"name":"uint256","nodeType":"ElementaryTypeName","src":"3140:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1521,"mutability":"mutable","name":"deadline","nameLocation":"3172:8:6","nodeType":"VariableDeclaration","scope":1530,"src":"3164:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1520,"name":"uint256","nodeType":"ElementaryTypeName","src":"3164:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1523,"mutability":"mutable","name":"v","nameLocation":"3197:1:6","nodeType":"VariableDeclaration","scope":1530,"src":"3191:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1522,"name":"uint8","nodeType":"ElementaryTypeName","src":"3191:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1525,"mutability":"mutable","name":"r","nameLocation":"3217:1:6","nodeType":"VariableDeclaration","scope":1530,"src":"3209:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1524,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3209:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1527,"mutability":"mutable","name":"s","nameLocation":"3237:1:6","nodeType":"VariableDeclaration","scope":1530,"src":"3229:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1526,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3229:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3079:166:6"},"returnParameters":{"id":1529,"nodeType":"ParameterList","parameters":[],"src":"3254:0:6"},"scope":1545,"src":"3064:191:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1531,"nodeType":"StructuredDocumentation","src":"3263:300:6","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":1538,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"3578:6:6","nodeType":"FunctionDefinition","parameters":{"id":1534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1533,"mutability":"mutable","name":"owner","nameLocation":"3593:5:6","nodeType":"VariableDeclaration","scope":1538,"src":"3585:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1532,"name":"address","nodeType":"ElementaryTypeName","src":"3585:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3584:15:6"},"returnParameters":{"id":1537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1536,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1538,"src":"3623:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1535,"name":"uint256","nodeType":"ElementaryTypeName","src":"3623:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3622:9:6"},"scope":1545,"src":"3569:63:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1539,"nodeType":"StructuredDocumentation","src":"3640:130:6","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":1544,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"3839:16:6","nodeType":"FunctionDefinition","parameters":{"id":1540,"nodeType":"ParameterList","parameters":[],"src":"3855:2:6"},"returnParameters":{"id":1543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1542,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1544,"src":"3881:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1541,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3881:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3880:9:6"},"scope":1545,"src":"3830:60:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1546,"src":"2156:1737:6","usedErrors":[]}],"src":"126:3767:6"},"id":6},"contracts/IERC5267.sol":{"ast":{"absolutePath":"contracts/IERC5267.sol","exportedSymbols":{"IERC5267":[1570]},"id":1571,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1547,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"110:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC5267","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1570,"linearizedBaseContracts":[1570],"name":"IERC5267","nameLocation":"147:8:7","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1548,"nodeType":"StructuredDocumentation","src":"163:86:7","text":" @dev MAY be emitted to signal that the domain could have changed."},"eventSelector":"0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31","id":1550,"name":"EIP712DomainChanged","nameLocation":"261:19:7","nodeType":"EventDefinition","parameters":{"id":1549,"nodeType":"ParameterList","parameters":[],"src":"280:2:7"},"src":"255:28:7"},{"documentation":{"id":1551,"nodeType":"StructuredDocumentation","src":"291:143:7","text":" @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n signature."},"functionSelector":"84b0196e","id":1569,"implemented":false,"kind":"function","modifiers":[],"name":"eip712Domain","nameLocation":"449:12:7","nodeType":"FunctionDefinition","parameters":{"id":1552,"nodeType":"ParameterList","parameters":[],"src":"461:2:7"},"returnParameters":{"id":1568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1554,"mutability":"mutable","name":"fields","nameLocation":"535:6:7","nodeType":"VariableDeclaration","scope":1569,"src":"528:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":1553,"name":"bytes1","nodeType":"ElementaryTypeName","src":"528:6:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"},{"constant":false,"id":1556,"mutability":"mutable","name":"name","nameLocation":"570:4:7","nodeType":"VariableDeclaration","scope":1569,"src":"556:18:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1555,"name":"string","nodeType":"ElementaryTypeName","src":"556:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1558,"mutability":"mutable","name":"version","nameLocation":"603:7:7","nodeType":"VariableDeclaration","scope":1569,"src":"589:21:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1557,"name":"string","nodeType":"ElementaryTypeName","src":"589:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1560,"mutability":"mutable","name":"chainId","nameLocation":"633:7:7","nodeType":"VariableDeclaration","scope":1569,"src":"625:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1559,"name":"uint256","nodeType":"ElementaryTypeName","src":"625:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1562,"mutability":"mutable","name":"verifyingContract","nameLocation":"663:17:7","nodeType":"VariableDeclaration","scope":1569,"src":"655:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1561,"name":"address","nodeType":"ElementaryTypeName","src":"655:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1564,"mutability":"mutable","name":"salt","nameLocation":"703:4:7","nodeType":"VariableDeclaration","scope":1569,"src":"695:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1563,"name":"bytes32","nodeType":"ElementaryTypeName","src":"695:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1567,"mutability":"mutable","name":"extensions","nameLocation":"739:10:7","nodeType":"VariableDeclaration","scope":1569,"src":"722:27:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1565,"name":"uint256","nodeType":"ElementaryTypeName","src":"722:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1566,"nodeType":"ArrayTypeName","src":"722:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"513:247:7"},"scope":1570,"src":"440:321:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1571,"src":"137:627:7","usedErrors":[]}],"src":"110:654:7"},"id":7},"contracts/Math.sol":{"ast":{"absolutePath":"contracts/Math.sol","exportedSymbols":{"Math":[2624]},"id":2625,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1572,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"106:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":1573,"nodeType":"StructuredDocumentation","src":"133:75:8","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2624,"linearizedBaseContracts":[2624],"name":"Math","nameLocation":"218:4:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1574,"nodeType":"StructuredDocumentation","src":"230:52:8","text":" @dev Muldiv operation overflow."},"errorSelector":"227bc153","id":1576,"name":"MathOverflowedMulDiv","nameLocation":"294:20:8","nodeType":"ErrorDefinition","parameters":{"id":1575,"nodeType":"ParameterList","parameters":[],"src":"314:2:8"},"src":"288:29:8"},{"canonicalName":"Math.Rounding","id":1581,"members":[{"id":1577,"name":"Floor","nameLocation":"350:5:8","nodeType":"EnumValue","src":"350:5:8"},{"id":1578,"name":"Ceil","nameLocation":"394:4:8","nodeType":"EnumValue","src":"394:4:8"},{"id":1579,"name":"Trunc","nameLocation":"437:5:8","nodeType":"EnumValue","src":"437:5:8"},{"id":1580,"name":"Expand","nameLocation":"468:6:8","nodeType":"EnumValue","src":"468:6:8"}],"name":"Rounding","nameLocation":"330:8:8","nodeType":"EnumDefinition","src":"325:174:8"},{"body":{"id":1612,"nodeType":"Block","src":"684:146:8","statements":[{"id":1611,"nodeType":"UncheckedBlock","src":"695:128:8","statements":[{"assignments":[1594],"declarations":[{"constant":false,"id":1594,"mutability":"mutable","name":"c","nameLocation":"728:1:8","nodeType":"VariableDeclaration","scope":1611,"src":"720:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1593,"name":"uint256","nodeType":"ElementaryTypeName","src":"720:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1598,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1595,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"732:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1596,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1586,"src":"736:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"732:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"720:17:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1599,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"756:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1600,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"760:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"756:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1606,"nodeType":"IfStatement","src":"752:28:8","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"771:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"778:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1604,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"770:10:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1592,"id":1605,"nodeType":"Return","src":"763:17:8"}},{"expression":{"components":[{"hexValue":"74727565","id":1607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"803:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1608,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"809:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1609,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"802:9:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1592,"id":1610,"nodeType":"Return","src":"795:16:8"}]}]},"documentation":{"id":1582,"nodeType":"StructuredDocumentation","src":"507:95:8","text":" @dev Returns the addition of two unsigned integers, with an overflow flag."},"id":1613,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"617:6:8","nodeType":"FunctionDefinition","parameters":{"id":1587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1584,"mutability":"mutable","name":"a","nameLocation":"632:1:8","nodeType":"VariableDeclaration","scope":1613,"src":"624:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1583,"name":"uint256","nodeType":"ElementaryTypeName","src":"624:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1586,"mutability":"mutable","name":"b","nameLocation":"643:1:8","nodeType":"VariableDeclaration","scope":1613,"src":"635:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1585,"name":"uint256","nodeType":"ElementaryTypeName","src":"635:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"623:22:8"},"returnParameters":{"id":1592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1589,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1613,"src":"669:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1588,"name":"bool","nodeType":"ElementaryTypeName","src":"669:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1591,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1613,"src":"675:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1590,"name":"uint256","nodeType":"ElementaryTypeName","src":"675:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"668:15:8"},"scope":2624,"src":"608:222:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1640,"nodeType":"Block","src":"1018:118:8","statements":[{"id":1639,"nodeType":"UncheckedBlock","src":"1029:100:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1625,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"1058:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1626,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"1062:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1058:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1632,"nodeType":"IfStatement","src":"1054:28:8","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1073:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1080:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1630,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1072:10:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1624,"id":1631,"nodeType":"Return","src":"1065:17:8"}},{"expression":{"components":[{"hexValue":"74727565","id":1633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1105:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1634,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"1111:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1635,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"1115:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1111:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1637,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1104:13:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1624,"id":1638,"nodeType":"Return","src":"1097:20:8"}]}]},"documentation":{"id":1614,"nodeType":"StructuredDocumentation","src":"838:98:8","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag."},"id":1641,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"951:6:8","nodeType":"FunctionDefinition","parameters":{"id":1619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1616,"mutability":"mutable","name":"a","nameLocation":"966:1:8","nodeType":"VariableDeclaration","scope":1641,"src":"958:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1615,"name":"uint256","nodeType":"ElementaryTypeName","src":"958:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1618,"mutability":"mutable","name":"b","nameLocation":"977:1:8","nodeType":"VariableDeclaration","scope":1641,"src":"969:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1617,"name":"uint256","nodeType":"ElementaryTypeName","src":"969:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"957:22:8"},"returnParameters":{"id":1624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1621,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1641,"src":"1003:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1620,"name":"bool","nodeType":"ElementaryTypeName","src":"1003:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1623,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1641,"src":"1009:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1622,"name":"uint256","nodeType":"ElementaryTypeName","src":"1009:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1002:15:8"},"scope":2624,"src":"942:194:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1682,"nodeType":"Block","src":"1327:427:8","statements":[{"id":1681,"nodeType":"UncheckedBlock","src":"1338:409:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1653,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1644,"src":"1600:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1605:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1600:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1660,"nodeType":"IfStatement","src":"1596:28:8","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":1656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1616:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":1657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1622:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1658,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1615:9:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1652,"id":1659,"nodeType":"Return","src":"1608:16:8"}},{"assignments":[1662],"declarations":[{"constant":false,"id":1662,"mutability":"mutable","name":"c","nameLocation":"1647:1:8","nodeType":"VariableDeclaration","scope":1681,"src":"1639:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1661,"name":"uint256","nodeType":"ElementaryTypeName","src":"1639:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1666,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1663,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1644,"src":"1651:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1664,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"1655:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1651:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1639:17:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1667,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1662,"src":"1675:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1668,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1644,"src":"1679:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1675:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1670,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"1684:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1675:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1676,"nodeType":"IfStatement","src":"1671:33:8","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1695:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1674,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1694:10:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1652,"id":1675,"nodeType":"Return","src":"1687:17:8"}},{"expression":{"components":[{"hexValue":"74727565","id":1677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1727:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1678,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1662,"src":"1733:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1679,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1726:9:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1652,"id":1680,"nodeType":"Return","src":"1719:16:8"}]}]},"documentation":{"id":1642,"nodeType":"StructuredDocumentation","src":"1144:101:8","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag."},"id":1683,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1260:6:8","nodeType":"FunctionDefinition","parameters":{"id":1647,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1644,"mutability":"mutable","name":"a","nameLocation":"1275:1:8","nodeType":"VariableDeclaration","scope":1683,"src":"1267:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1643,"name":"uint256","nodeType":"ElementaryTypeName","src":"1267:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1646,"mutability":"mutable","name":"b","nameLocation":"1286:1:8","nodeType":"VariableDeclaration","scope":1683,"src":"1278:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1645,"name":"uint256","nodeType":"ElementaryTypeName","src":"1278:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1266:22:8"},"returnParameters":{"id":1652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1649,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1683,"src":"1312:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1648,"name":"bool","nodeType":"ElementaryTypeName","src":"1312:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1651,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1683,"src":"1318:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1650,"name":"uint256","nodeType":"ElementaryTypeName","src":"1318:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1311:15:8"},"scope":2624,"src":"1251:503:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1710,"nodeType":"Block","src":"1946:119:8","statements":[{"id":1709,"nodeType":"UncheckedBlock","src":"1957:101:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1695,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"1986:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1991:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1986:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1702,"nodeType":"IfStatement","src":"1982:29:8","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2002:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2009:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1700,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2001:10:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1694,"id":1701,"nodeType":"Return","src":"1994:17:8"}},{"expression":{"components":[{"hexValue":"74727565","id":1703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2034:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1704,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"2040:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1705,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"2044:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2040:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1707,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2033:13:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1694,"id":1708,"nodeType":"Return","src":"2026:20:8"}]}]},"documentation":{"id":1684,"nodeType":"StructuredDocumentation","src":"1762:102:8","text":" @dev Returns the division of two unsigned integers, with a division by zero flag."},"id":1711,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1879:6:8","nodeType":"FunctionDefinition","parameters":{"id":1689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1686,"mutability":"mutable","name":"a","nameLocation":"1894:1:8","nodeType":"VariableDeclaration","scope":1711,"src":"1886:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1685,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1688,"mutability":"mutable","name":"b","nameLocation":"1905:1:8","nodeType":"VariableDeclaration","scope":1711,"src":"1897:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1687,"name":"uint256","nodeType":"ElementaryTypeName","src":"1897:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1885:22:8"},"returnParameters":{"id":1694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1691,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1711,"src":"1931:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1690,"name":"bool","nodeType":"ElementaryTypeName","src":"1931:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1693,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1711,"src":"1937:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1692,"name":"uint256","nodeType":"ElementaryTypeName","src":"1937:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1930:15:8"},"scope":2624,"src":"1870:195:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1738,"nodeType":"Block","src":"2267:119:8","statements":[{"id":1737,"nodeType":"UncheckedBlock","src":"2278:101:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1723,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"2307:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2312:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2307:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1730,"nodeType":"IfStatement","src":"2303:29:8","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2323:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2330:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1728,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2322:10:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1722,"id":1729,"nodeType":"Return","src":"2315:17:8"}},{"expression":{"components":[{"hexValue":"74727565","id":1731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2355:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1732,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"2361:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1733,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"2365:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2361:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1735,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2354:13:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1722,"id":1736,"nodeType":"Return","src":"2347:20:8"}]}]},"documentation":{"id":1712,"nodeType":"StructuredDocumentation","src":"2073:112:8","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."},"id":1739,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2200:6:8","nodeType":"FunctionDefinition","parameters":{"id":1717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1714,"mutability":"mutable","name":"a","nameLocation":"2215:1:8","nodeType":"VariableDeclaration","scope":1739,"src":"2207:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1713,"name":"uint256","nodeType":"ElementaryTypeName","src":"2207:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1716,"mutability":"mutable","name":"b","nameLocation":"2226:1:8","nodeType":"VariableDeclaration","scope":1739,"src":"2218:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1715,"name":"uint256","nodeType":"ElementaryTypeName","src":"2218:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2206:22:8"},"returnParameters":{"id":1722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1719,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1739,"src":"2252:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1718,"name":"bool","nodeType":"ElementaryTypeName","src":"2252:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1721,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1739,"src":"2258:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1720,"name":"uint256","nodeType":"ElementaryTypeName","src":"2258:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2251:15:8"},"scope":2624,"src":"2191:195:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1756,"nodeType":"Block","src":"2528:39:8","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1749,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"2546:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1750,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1744,"src":"2550:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2546:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1753,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1744,"src":"2558:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2546:13:8","trueExpression":{"id":1752,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"2554:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1748,"id":1755,"nodeType":"Return","src":"2539:20:8"}]},"documentation":{"id":1740,"nodeType":"StructuredDocumentation","src":"2394:61:8","text":" @dev Returns the largest of two numbers."},"id":1757,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"2470:3:8","nodeType":"FunctionDefinition","parameters":{"id":1745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1742,"mutability":"mutable","name":"a","nameLocation":"2482:1:8","nodeType":"VariableDeclaration","scope":1757,"src":"2474:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1741,"name":"uint256","nodeType":"ElementaryTypeName","src":"2474:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1744,"mutability":"mutable","name":"b","nameLocation":"2493:1:8","nodeType":"VariableDeclaration","scope":1757,"src":"2485:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1743,"name":"uint256","nodeType":"ElementaryTypeName","src":"2485:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2473:22:8"},"returnParameters":{"id":1748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1747,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1757,"src":"2519:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1746,"name":"uint256","nodeType":"ElementaryTypeName","src":"2519:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2518:9:8"},"scope":2624,"src":"2461:106:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1774,"nodeType":"Block","src":"2710:39:8","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1767,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"2728:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1768,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1762,"src":"2732:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2728:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1771,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1762,"src":"2740:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2728:13:8","trueExpression":{"id":1770,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"2736:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1766,"id":1773,"nodeType":"Return","src":"2721:20:8"}]},"documentation":{"id":1758,"nodeType":"StructuredDocumentation","src":"2575:62:8","text":" @dev Returns the smallest of two numbers."},"id":1775,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"2652:3:8","nodeType":"FunctionDefinition","parameters":{"id":1763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1760,"mutability":"mutable","name":"a","nameLocation":"2664:1:8","nodeType":"VariableDeclaration","scope":1775,"src":"2656:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1759,"name":"uint256","nodeType":"ElementaryTypeName","src":"2656:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1762,"mutability":"mutable","name":"b","nameLocation":"2675:1:8","nodeType":"VariableDeclaration","scope":1775,"src":"2667:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1761,"name":"uint256","nodeType":"ElementaryTypeName","src":"2667:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2655:22:8"},"returnParameters":{"id":1766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1765,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1775,"src":"2701:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1764,"name":"uint256","nodeType":"ElementaryTypeName","src":"2701:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2700:9:8"},"scope":2624,"src":"2643:106:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1797,"nodeType":"Block","src":"2939:85:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1785,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1778,"src":"2996:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1786,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"3000:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2996:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1788,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2995:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1789,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1778,"src":"3006:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1790,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"3010:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3006:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1792,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3005:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":1793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3015:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"3005:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2995:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1784,"id":1796,"nodeType":"Return","src":"2988:28:8"}]},"documentation":{"id":1776,"nodeType":"StructuredDocumentation","src":"2757:105:8","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":1798,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"2877:7:8","nodeType":"FunctionDefinition","parameters":{"id":1781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1778,"mutability":"mutable","name":"a","nameLocation":"2893:1:8","nodeType":"VariableDeclaration","scope":1798,"src":"2885:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1777,"name":"uint256","nodeType":"ElementaryTypeName","src":"2885:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1780,"mutability":"mutable","name":"b","nameLocation":"2904:1:8","nodeType":"VariableDeclaration","scope":1798,"src":"2896:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1779,"name":"uint256","nodeType":"ElementaryTypeName","src":"2896:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2884:22:8"},"returnParameters":{"id":1784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1783,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1798,"src":"2930:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1782,"name":"uint256","nodeType":"ElementaryTypeName","src":"2930:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2929:9:8"},"scope":2624,"src":"2868:156:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1831,"nodeType":"Block","src":"3324:268:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1808,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1803,"src":"3339:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3344:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3339:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1816,"nodeType":"IfStatement","src":"3335:130:8","trueBody":{"id":1815,"nodeType":"Block","src":"3347:118:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1811,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"3448:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1812,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1803,"src":"3452:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3448:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1807,"id":1814,"nodeType":"Return","src":"3441:12:8"}]}},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1817,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"3556:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3561:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3556:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1821,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"3570:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3574:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3570:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1824,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3569:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1825,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1803,"src":"3579:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3569:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3583:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3569:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3556:28:8","trueExpression":{"hexValue":"30","id":1820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3565:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1807,"id":1830,"nodeType":"Return","src":"3549:35:8"}]},"documentation":{"id":1799,"nodeType":"StructuredDocumentation","src":"3032:215:8","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."},"id":1832,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"3262:7:8","nodeType":"FunctionDefinition","parameters":{"id":1804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1801,"mutability":"mutable","name":"a","nameLocation":"3278:1:8","nodeType":"VariableDeclaration","scope":1832,"src":"3270:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1800,"name":"uint256","nodeType":"ElementaryTypeName","src":"3270:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1803,"mutability":"mutable","name":"b","nameLocation":"3289:1:8","nodeType":"VariableDeclaration","scope":1832,"src":"3281:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1802,"name":"uint256","nodeType":"ElementaryTypeName","src":"3281:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3269:22:8"},"returnParameters":{"id":1807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1806,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1832,"src":"3315:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1805,"name":"uint256","nodeType":"ElementaryTypeName","src":"3315:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3314:9:8"},"scope":2624,"src":"3253:339:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1957,"nodeType":"Block","src":"4022:4097:8","statements":[{"id":1956,"nodeType":"UncheckedBlock","src":"4033:4079:8","statements":[{"assignments":[1845],"declarations":[{"constant":false,"id":1845,"mutability":"mutable","name":"prod0","nameLocation":"4366:5:8","nodeType":"VariableDeclaration","scope":1956,"src":"4358:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1844,"name":"uint256","nodeType":"ElementaryTypeName","src":"4358:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1849,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1846,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1835,"src":"4374:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1847,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1837,"src":"4378:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4374:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4358:21:8"},{"assignments":[1851],"declarations":[{"constant":false,"id":1851,"mutability":"mutable","name":"prod1","nameLocation":"4447:5:8","nodeType":"VariableDeclaration","scope":1956,"src":"4439:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1850,"name":"uint256","nodeType":"ElementaryTypeName","src":"4439:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1852,"nodeType":"VariableDeclarationStatement","src":"4439:13:8"},{"AST":{"nodeType":"YulBlock","src":"4520:125:8","statements":[{"nodeType":"YulVariableDeclaration","src":"4539:30:8","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4556:1:8"},{"name":"y","nodeType":"YulIdentifier","src":"4559:1:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4566:1:8","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4562:3:8"},"nodeType":"YulFunctionCall","src":"4562:6:8"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"4549:6:8"},"nodeType":"YulFunctionCall","src":"4549:20:8"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"4543:2:8","type":""}]},{"nodeType":"YulAssignment","src":"4587:43:8","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4604:2:8"},{"name":"prod0","nodeType":"YulIdentifier","src":"4608:5:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4600:3:8"},"nodeType":"YulFunctionCall","src":"4600:14:8"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4619:2:8"},{"name":"prod0","nodeType":"YulIdentifier","src":"4623:5:8"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4616:2:8"},"nodeType":"YulFunctionCall","src":"4616:13:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4596:3:8"},"nodeType":"YulFunctionCall","src":"4596:34:8"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"4587:5:8"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1845,"isOffset":false,"isSlot":false,"src":"4608:5:8","valueSize":1},{"declaration":1845,"isOffset":false,"isSlot":false,"src":"4623:5:8","valueSize":1},{"declaration":1851,"isOffset":false,"isSlot":false,"src":"4587:5:8","valueSize":1},{"declaration":1835,"isOffset":false,"isSlot":false,"src":"4556:1:8","valueSize":1},{"declaration":1837,"isOffset":false,"isSlot":false,"src":"4559:1:8","valueSize":1}],"id":1853,"nodeType":"InlineAssembly","src":"4511:134:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1854,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"4729:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4738:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4729:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1862,"nodeType":"IfStatement","src":"4725:373:8","trueBody":{"id":1861,"nodeType":"Block","src":"4741:357:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1857,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1845,"src":"5063:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1858,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"5071:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5063:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1843,"id":1860,"nodeType":"Return","src":"5056:26:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1863,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"5207:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":1864,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"5222:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5207:20:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1870,"nodeType":"IfStatement","src":"5203:90:8","trueBody":{"id":1869,"nodeType":"Block","src":"5229:64:8","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1866,"name":"MathOverflowedMulDiv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"5255:20:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5255:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1868,"nodeType":"RevertStatement","src":"5248:29:8"}]}},{"assignments":[1872],"declarations":[{"constant":false,"id":1872,"mutability":"mutable","name":"remainder","nameLocation":"5563:9:8","nodeType":"VariableDeclaration","scope":1956,"src":"5555:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1871,"name":"uint256","nodeType":"ElementaryTypeName","src":"5555:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1873,"nodeType":"VariableDeclarationStatement","src":"5555:17:8"},{"AST":{"nodeType":"YulBlock","src":"5596:298:8","statements":[{"nodeType":"YulAssignment","src":"5667:38:8","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5687:1:8"},{"name":"y","nodeType":"YulIdentifier","src":"5690:1:8"},{"name":"denominator","nodeType":"YulIdentifier","src":"5693:11:8"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5680:6:8"},"nodeType":"YulFunctionCall","src":"5680:25:8"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"5667:9:8"}]},{"nodeType":"YulAssignment","src":"5790:41:8","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"5803:5:8"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"5813:9:8"},{"name":"prod0","nodeType":"YulIdentifier","src":"5824:5:8"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5810:2:8"},"nodeType":"YulFunctionCall","src":"5810:20:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5799:3:8"},"nodeType":"YulFunctionCall","src":"5799:32:8"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"5790:5:8"}]},{"nodeType":"YulAssignment","src":"5849:30:8","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"5862:5:8"},{"name":"remainder","nodeType":"YulIdentifier","src":"5869:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5858:3:8"},"nodeType":"YulFunctionCall","src":"5858:21:8"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"5849:5:8"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1839,"isOffset":false,"isSlot":false,"src":"5693:11:8","valueSize":1},{"declaration":1845,"isOffset":false,"isSlot":false,"src":"5824:5:8","valueSize":1},{"declaration":1845,"isOffset":false,"isSlot":false,"src":"5849:5:8","valueSize":1},{"declaration":1845,"isOffset":false,"isSlot":false,"src":"5862:5:8","valueSize":1},{"declaration":1851,"isOffset":false,"isSlot":false,"src":"5790:5:8","valueSize":1},{"declaration":1851,"isOffset":false,"isSlot":false,"src":"5803:5:8","valueSize":1},{"declaration":1872,"isOffset":false,"isSlot":false,"src":"5667:9:8","valueSize":1},{"declaration":1872,"isOffset":false,"isSlot":false,"src":"5813:9:8","valueSize":1},{"declaration":1872,"isOffset":false,"isSlot":false,"src":"5869:9:8","valueSize":1},{"declaration":1835,"isOffset":false,"isSlot":false,"src":"5687:1:8","valueSize":1},{"declaration":1837,"isOffset":false,"isSlot":false,"src":"5690:1:8","valueSize":1}],"id":1874,"nodeType":"InlineAssembly","src":"5587:307:8"},{"assignments":[1876],"declarations":[{"constant":false,"id":1876,"mutability":"mutable","name":"twos","nameLocation":"6111:4:8","nodeType":"VariableDeclaration","scope":1956,"src":"6103:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1875,"name":"uint256","nodeType":"ElementaryTypeName","src":"6103:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1883,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1877,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"6118:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":1878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6133:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1879,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"6137:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6133:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1881,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6132:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6118:31:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6103:46:8"},{"AST":{"nodeType":"YulBlock","src":"6173:371:8","statements":[{"nodeType":"YulAssignment","src":"6240:37:8","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"6259:11:8"},{"name":"twos","nodeType":"YulIdentifier","src":"6272:4:8"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6255:3:8"},"nodeType":"YulFunctionCall","src":"6255:22:8"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"6240:11:8"}]},{"nodeType":"YulAssignment","src":"6347:25:8","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"6360:5:8"},{"name":"twos","nodeType":"YulIdentifier","src":"6367:4:8"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6356:3:8"},"nodeType":"YulFunctionCall","src":"6356:16:8"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"6347:5:8"}]},{"nodeType":"YulAssignment","src":"6490:39:8","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6510:1:8","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"6513:4:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6506:3:8"},"nodeType":"YulFunctionCall","src":"6506:12:8"},{"name":"twos","nodeType":"YulIdentifier","src":"6520:4:8"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6502:3:8"},"nodeType":"YulFunctionCall","src":"6502:23:8"},{"kind":"number","nodeType":"YulLiteral","src":"6527:1:8","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6498:3:8"},"nodeType":"YulFunctionCall","src":"6498:31:8"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"6490:4:8"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1839,"isOffset":false,"isSlot":false,"src":"6240:11:8","valueSize":1},{"declaration":1839,"isOffset":false,"isSlot":false,"src":"6259:11:8","valueSize":1},{"declaration":1845,"isOffset":false,"isSlot":false,"src":"6347:5:8","valueSize":1},{"declaration":1845,"isOffset":false,"isSlot":false,"src":"6360:5:8","valueSize":1},{"declaration":1876,"isOffset":false,"isSlot":false,"src":"6272:4:8","valueSize":1},{"declaration":1876,"isOffset":false,"isSlot":false,"src":"6367:4:8","valueSize":1},{"declaration":1876,"isOffset":false,"isSlot":false,"src":"6490:4:8","valueSize":1},{"declaration":1876,"isOffset":false,"isSlot":false,"src":"6513:4:8","valueSize":1},{"declaration":1876,"isOffset":false,"isSlot":false,"src":"6520:4:8","valueSize":1}],"id":1884,"nodeType":"InlineAssembly","src":"6164:380:8"},{"expression":{"id":1889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1885,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1845,"src":"6613:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1886,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"6622:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1887,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1876,"src":"6630:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6622:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6613:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1890,"nodeType":"ExpressionStatement","src":"6613:21:8"},{"assignments":[1892],"declarations":[{"constant":false,"id":1892,"mutability":"mutable","name":"inverse","nameLocation":"6965:7:8","nodeType":"VariableDeclaration","scope":1956,"src":"6957:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1891,"name":"uint256","nodeType":"ElementaryTypeName","src":"6957:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1899,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":1893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6976:1:8","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1894,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"6980:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6976:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1896,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6975:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":1897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6995:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6975:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6957:39:8"},{"expression":{"id":1906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1900,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"7217:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7228:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1902,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"7232:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1903,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"7246:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7232:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7228:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7217:36:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1907,"nodeType":"ExpressionStatement","src":"7217:36:8"},{"expression":{"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1908,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"7287:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7298:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1910,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"7302:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1911,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"7316:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7302:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7298:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7287:36:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1915,"nodeType":"ExpressionStatement","src":"7287:36:8"},{"expression":{"id":1922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1916,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"7358:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7369:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1918,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"7373:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1919,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"7387:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7373:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7369:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7358:36:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1923,"nodeType":"ExpressionStatement","src":"7358:36:8"},{"expression":{"id":1930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1924,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"7429:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7440:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1926,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"7444:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1927,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"7458:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7444:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7440:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7429:36:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1931,"nodeType":"ExpressionStatement","src":"7429:36:8"},{"expression":{"id":1938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1932,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"7500:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7511:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1934,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"7515:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1935,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"7529:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7515:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7511:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7500:36:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1939,"nodeType":"ExpressionStatement","src":"7500:36:8"},{"expression":{"id":1946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1940,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"7572:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7583:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1942,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"7587:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1943,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"7601:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7587:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7583:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7572:36:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1947,"nodeType":"ExpressionStatement","src":"7572:36:8"},{"expression":{"id":1952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1948,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"8048:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1949,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1845,"src":"8057:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1950,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"8065:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8057:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8048:24:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1953,"nodeType":"ExpressionStatement","src":"8048:24:8"},{"expression":{"id":1954,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"8094:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1843,"id":1955,"nodeType":"Return","src":"8087:13:8"}]}]},"documentation":{"id":1833,"nodeType":"StructuredDocumentation","src":"3600:318:8","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."},"id":1958,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"3933:6:8","nodeType":"FunctionDefinition","parameters":{"id":1840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1835,"mutability":"mutable","name":"x","nameLocation":"3948:1:8","nodeType":"VariableDeclaration","scope":1958,"src":"3940:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1834,"name":"uint256","nodeType":"ElementaryTypeName","src":"3940:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1837,"mutability":"mutable","name":"y","nameLocation":"3959:1:8","nodeType":"VariableDeclaration","scope":1958,"src":"3951:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1836,"name":"uint256","nodeType":"ElementaryTypeName","src":"3951:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1839,"mutability":"mutable","name":"denominator","nameLocation":"3970:11:8","nodeType":"VariableDeclaration","scope":1958,"src":"3962:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1838,"name":"uint256","nodeType":"ElementaryTypeName","src":"3962:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3939:43:8"},"returnParameters":{"id":1843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1842,"mutability":"mutable","name":"result","nameLocation":"4014:6:8","nodeType":"VariableDeclaration","scope":1958,"src":"4006:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1841,"name":"uint256","nodeType":"ElementaryTypeName","src":"4006:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4005:16:8"},"scope":2624,"src":"3924:4195:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2000,"nodeType":"Block","src":"8366:198:8","statements":[{"assignments":[1974],"declarations":[{"constant":false,"id":1974,"mutability":"mutable","name":"result","nameLocation":"8385:6:8","nodeType":"VariableDeclaration","scope":2000,"src":"8377:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1973,"name":"uint256","nodeType":"ElementaryTypeName","src":"8377:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1980,"initialValue":{"arguments":[{"id":1976,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"8401:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1977,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"8404:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1978,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"8407:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1975,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[1958,2001],"referencedDeclaration":1958,"src":"8394:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8394:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8377:42:8"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1982,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1968,"src":"8451:8:8","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"}],"id":1981,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2623,"src":"8434:16:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1581_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":1983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8434:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1985,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"8471:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1986,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"8474:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1987,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"8477:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1984,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"8464:6:8","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8464:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8492:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8464:29:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8434:59:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1997,"nodeType":"IfStatement","src":"8430:103:8","trueBody":{"id":1996,"nodeType":"Block","src":"8495:38:8","statements":[{"expression":{"id":1994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1992,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1974,"src":"8510:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8520:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8510:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1995,"nodeType":"ExpressionStatement","src":"8510:11:8"}]}},{"expression":{"id":1998,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1974,"src":"8550:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1972,"id":1999,"nodeType":"Return","src":"8543:13:8"}]},"documentation":{"id":1959,"nodeType":"StructuredDocumentation","src":"8127:123:8","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2001,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"8265:6:8","nodeType":"FunctionDefinition","parameters":{"id":1969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1961,"mutability":"mutable","name":"x","nameLocation":"8280:1:8","nodeType":"VariableDeclaration","scope":2001,"src":"8272:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1960,"name":"uint256","nodeType":"ElementaryTypeName","src":"8272:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1963,"mutability":"mutable","name":"y","nameLocation":"8291:1:8","nodeType":"VariableDeclaration","scope":2001,"src":"8283:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1962,"name":"uint256","nodeType":"ElementaryTypeName","src":"8283:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1965,"mutability":"mutable","name":"denominator","nameLocation":"8302:11:8","nodeType":"VariableDeclaration","scope":2001,"src":"8294:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1964,"name":"uint256","nodeType":"ElementaryTypeName","src":"8294:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1968,"mutability":"mutable","name":"rounding","nameLocation":"8324:8:8","nodeType":"VariableDeclaration","scope":2001,"src":"8315:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"},"typeName":{"id":1967,"nodeType":"UserDefinedTypeName","pathNode":{"id":1966,"name":"Rounding","nameLocations":["8315:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":1581,"src":"8315:8:8"},"referencedDeclaration":1581,"src":"8315:8:8","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8271:62:8"},"returnParameters":{"id":1972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1971,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2001,"src":"8357:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1970,"name":"uint256","nodeType":"ElementaryTypeName","src":"8357:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8356:9:8"},"scope":2624,"src":"8256:308:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2112,"nodeType":"Block","src":"8863:1616:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2009,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"8878:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8883:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8878:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2015,"nodeType":"IfStatement","src":"8874:47:8","trueBody":{"id":2014,"nodeType":"Block","src":"8886:35:8","statements":[{"expression":{"hexValue":"30","id":2012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8908:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2008,"id":2013,"nodeType":"Return","src":"8901:8:8"}]}},{"assignments":[2017],"declarations":[{"constant":false,"id":2017,"mutability":"mutable","name":"result","nameLocation":"9620:6:8","nodeType":"VariableDeclaration","scope":2112,"src":"9612:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2016,"name":"uint256","nodeType":"ElementaryTypeName","src":"9612:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2026,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9629:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2020,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"9640:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2019,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2280,2315],"referencedDeclaration":2280,"src":"9635:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9635:7:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9646:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9635:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2024,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9634:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9629:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9612:36:8"},{"id":2111,"nodeType":"UncheckedBlock","src":"10055:417:8","statements":[{"expression":{"id":2036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2027,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10080:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2028,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10090:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2029,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"10099:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2030,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10103:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10099:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10090:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2033,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10089:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10114:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10089:26:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10080:35:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2037,"nodeType":"ExpressionStatement","src":"10080:35:8"},{"expression":{"id":2047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2038,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10130:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2039,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10140:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2040,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"10149:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2041,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10153:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10149:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10140:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2044,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10139:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10164:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10139:26:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10130:35:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2048,"nodeType":"ExpressionStatement","src":"10130:35:8"},{"expression":{"id":2058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2049,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10180:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2050,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10190:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2051,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"10199:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2052,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10203:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10199:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10190:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2055,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10189:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10214:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10189:26:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10180:35:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2059,"nodeType":"ExpressionStatement","src":"10180:35:8"},{"expression":{"id":2069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2060,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10230:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2061,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10240:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2062,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"10249:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2063,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10253:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10249:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10240:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2066,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10239:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10264:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10239:26:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10230:35:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2070,"nodeType":"ExpressionStatement","src":"10230:35:8"},{"expression":{"id":2080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2071,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10280:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2072,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10290:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2073,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"10299:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2074,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10303:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10299:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10290:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2077,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10289:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10314:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10289:26:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10280:35:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2081,"nodeType":"ExpressionStatement","src":"10280:35:8"},{"expression":{"id":2091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2082,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10330:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2083,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10340:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2084,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"10349:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2085,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10353:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10349:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10340:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2088,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10339:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10364:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10339:26:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10330:35:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2092,"nodeType":"ExpressionStatement","src":"10330:35:8"},{"expression":{"id":2102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2093,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10380:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2094,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10390:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2095,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"10399:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2096,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10403:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10399:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10390:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2099,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10389:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10414:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10389:26:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10380:35:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2103,"nodeType":"ExpressionStatement","src":"10380:35:8"},{"expression":{"arguments":[{"id":2105,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10441:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2106,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"10449:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2107,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10453:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10449:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2104,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1775,"src":"10437:3:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10437:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2008,"id":2110,"nodeType":"Return","src":"10430:30:8"}]}]},"documentation":{"id":2002,"nodeType":"StructuredDocumentation","src":"8572:228:8","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2113,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8815:4:8","nodeType":"FunctionDefinition","parameters":{"id":2005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2004,"mutability":"mutable","name":"a","nameLocation":"8828:1:8","nodeType":"VariableDeclaration","scope":2113,"src":"8820:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2003,"name":"uint256","nodeType":"ElementaryTypeName","src":"8820:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8819:11:8"},"returnParameters":{"id":2008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2007,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2113,"src":"8854:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2006,"name":"uint256","nodeType":"ElementaryTypeName","src":"8854:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8853:9:8"},"scope":2624,"src":"8806:1673:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2147,"nodeType":"Block","src":"10660:169:8","statements":[{"id":2146,"nodeType":"UncheckedBlock","src":"10671:151:8","statements":[{"assignments":[2125],"declarations":[{"constant":false,"id":2125,"mutability":"mutable","name":"result","nameLocation":"10704:6:8","nodeType":"VariableDeclaration","scope":2146,"src":"10696:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2124,"name":"uint256","nodeType":"ElementaryTypeName","src":"10696:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2129,"initialValue":{"arguments":[{"id":2127,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2116,"src":"10718:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2126,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2113,2148],"referencedDeclaration":2113,"src":"10713:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10713:7:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10696:24:8"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2130,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"10742:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2132,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"10769:8:8","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"}],"id":2131,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2623,"src":"10752:16:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1581_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10752:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2134,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"10782:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2135,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"10791:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10782:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2137,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2116,"src":"10800:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10782:19:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10752:49:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10752:57:8","trueExpression":{"hexValue":"31","id":2140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10804:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2143,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10751:59:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"10742:68:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2123,"id":2145,"nodeType":"Return","src":"10735:75:8"}]}]},"documentation":{"id":2114,"nodeType":"StructuredDocumentation","src":"10487:91:8","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2148,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"10593:4:8","nodeType":"FunctionDefinition","parameters":{"id":2120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2116,"mutability":"mutable","name":"a","nameLocation":"10606:1:8","nodeType":"VariableDeclaration","scope":2148,"src":"10598:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2115,"name":"uint256","nodeType":"ElementaryTypeName","src":"10598:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2119,"mutability":"mutable","name":"rounding","nameLocation":"10618:8:8","nodeType":"VariableDeclaration","scope":2148,"src":"10609:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"},"typeName":{"id":2118,"nodeType":"UserDefinedTypeName","pathNode":{"id":2117,"name":"Rounding","nameLocations":["10609:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":1581,"src":"10609:8:8"},"referencedDeclaration":1581,"src":"10609:8:8","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10597:30:8"},"returnParameters":{"id":2123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2122,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2148,"src":"10651:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2121,"name":"uint256","nodeType":"ElementaryTypeName","src":"10651:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10650:9:8"},"scope":2624,"src":"10584:245:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2279,"nodeType":"Block","src":"11026:958:8","statements":[{"assignments":[2157],"declarations":[{"constant":false,"id":2157,"mutability":"mutable","name":"result","nameLocation":"11045:6:8","nodeType":"VariableDeclaration","scope":2279,"src":"11037:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2156,"name":"uint256","nodeType":"ElementaryTypeName","src":"11037:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2159,"initialValue":{"hexValue":"30","id":2158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11054:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11037:18:8"},{"id":2276,"nodeType":"UncheckedBlock","src":"11066:887:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2160,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"11095:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11104:3:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11095:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11110:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11095:16:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2174,"nodeType":"IfStatement","src":"11091:102:8","trueBody":{"id":2173,"nodeType":"Block","src":"11113:80:8","statements":[{"expression":{"id":2167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2165,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"11132:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11142:3:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11132:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2168,"nodeType":"ExpressionStatement","src":"11132:13:8"},{"expression":{"id":2171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2169,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"11164:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11174:3:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11164:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2172,"nodeType":"ExpressionStatement","src":"11164:13:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2175,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"11211:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11220:2:8","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11211:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11225:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11211:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2189,"nodeType":"IfStatement","src":"11207:99:8","trueBody":{"id":2188,"nodeType":"Block","src":"11228:78:8","statements":[{"expression":{"id":2182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2180,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"11247:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11257:2:8","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11247:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2183,"nodeType":"ExpressionStatement","src":"11247:12:8"},{"expression":{"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2184,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"11278:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11288:2:8","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11278:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2187,"nodeType":"ExpressionStatement","src":"11278:12:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2190,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"11324:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11333:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11324:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11338:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11324:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2204,"nodeType":"IfStatement","src":"11320:99:8","trueBody":{"id":2203,"nodeType":"Block","src":"11341:78:8","statements":[{"expression":{"id":2197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2195,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"11360:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11370:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11360:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2198,"nodeType":"ExpressionStatement","src":"11360:12:8"},{"expression":{"id":2201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2199,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"11391:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11401:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11391:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2202,"nodeType":"ExpressionStatement","src":"11391:12:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2205,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"11437:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11446:2:8","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11437:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11451:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11437:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2219,"nodeType":"IfStatement","src":"11433:99:8","trueBody":{"id":2218,"nodeType":"Block","src":"11454:78:8","statements":[{"expression":{"id":2212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2210,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"11473:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11483:2:8","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11473:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2213,"nodeType":"ExpressionStatement","src":"11473:12:8"},{"expression":{"id":2216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2214,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"11504:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11514:2:8","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11504:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2217,"nodeType":"ExpressionStatement","src":"11504:12:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2220,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"11550:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11559:1:8","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11550:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11563:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11550:14:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2234,"nodeType":"IfStatement","src":"11546:96:8","trueBody":{"id":2233,"nodeType":"Block","src":"11566:76:8","statements":[{"expression":{"id":2227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2225,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"11585:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11595:1:8","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11585:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2228,"nodeType":"ExpressionStatement","src":"11585:11:8"},{"expression":{"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2229,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"11615:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11625:1:8","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11615:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2232,"nodeType":"ExpressionStatement","src":"11615:11:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2235,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"11660:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11669:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11660:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11673:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11660:14:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2249,"nodeType":"IfStatement","src":"11656:96:8","trueBody":{"id":2248,"nodeType":"Block","src":"11676:76:8","statements":[{"expression":{"id":2242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2240,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"11695:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11705:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11695:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2243,"nodeType":"ExpressionStatement","src":"11695:11:8"},{"expression":{"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2244,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"11725:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11735:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11725:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2247,"nodeType":"ExpressionStatement","src":"11725:11:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2250,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"11770:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11779:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11770:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11783:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11770:14:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2264,"nodeType":"IfStatement","src":"11766:96:8","trueBody":{"id":2263,"nodeType":"Block","src":"11786:76:8","statements":[{"expression":{"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2255,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"11805:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11815:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11805:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2258,"nodeType":"ExpressionStatement","src":"11805:11:8"},{"expression":{"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2259,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"11835:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11845:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11835:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2262,"nodeType":"ExpressionStatement","src":"11835:11:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2265,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"11880:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11889:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11880:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11893:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11880:14:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2275,"nodeType":"IfStatement","src":"11876:66:8","trueBody":{"id":2274,"nodeType":"Block","src":"11896:46:8","statements":[{"expression":{"id":2272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2270,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"11915:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11925:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11915:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2273,"nodeType":"ExpressionStatement","src":"11915:11:8"}]}}]},{"expression":{"id":2277,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"11970:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2155,"id":2278,"nodeType":"Return","src":"11963:13:8"}]},"documentation":{"id":2149,"nodeType":"StructuredDocumentation","src":"10837:122:8","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":2280,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"10974:4:8","nodeType":"FunctionDefinition","parameters":{"id":2152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2151,"mutability":"mutable","name":"value","nameLocation":"10987:5:8","nodeType":"VariableDeclaration","scope":2280,"src":"10979:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2150,"name":"uint256","nodeType":"ElementaryTypeName","src":"10979:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10978:15:8"},"returnParameters":{"id":2155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2154,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2280,"src":"11017:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2153,"name":"uint256","nodeType":"ElementaryTypeName","src":"11017:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11016:9:8"},"scope":2624,"src":"10965:1019:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2314,"nodeType":"Block","src":"12223:173:8","statements":[{"id":2313,"nodeType":"UncheckedBlock","src":"12234:155:8","statements":[{"assignments":[2292],"declarations":[{"constant":false,"id":2292,"mutability":"mutable","name":"result","nameLocation":"12267:6:8","nodeType":"VariableDeclaration","scope":2313,"src":"12259:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2291,"name":"uint256","nodeType":"ElementaryTypeName","src":"12259:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2296,"initialValue":{"arguments":[{"id":2294,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2283,"src":"12281:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2293,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2280,2315],"referencedDeclaration":2280,"src":"12276:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12276:11:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12259:28:8"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2297,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2292,"src":"12309:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2299,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2286,"src":"12336:8:8","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"}],"id":2298,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2623,"src":"12319:16:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1581_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12319:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12349:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2302,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2292,"src":"12354:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12349:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2304,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2283,"src":"12363:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12349:19:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12319:49:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12375:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12319:57:8","trueExpression":{"hexValue":"31","id":2307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12371:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2310,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12318:59:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12309:68:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2290,"id":2312,"nodeType":"Return","src":"12302:75:8"}]}]},"documentation":{"id":2281,"nodeType":"StructuredDocumentation","src":"11992:145:8","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2315,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"12152:4:8","nodeType":"FunctionDefinition","parameters":{"id":2287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2283,"mutability":"mutable","name":"value","nameLocation":"12165:5:8","nodeType":"VariableDeclaration","scope":2315,"src":"12157:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2282,"name":"uint256","nodeType":"ElementaryTypeName","src":"12157:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2286,"mutability":"mutable","name":"rounding","nameLocation":"12181:8:8","nodeType":"VariableDeclaration","scope":2315,"src":"12172:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"},"typeName":{"id":2285,"nodeType":"UserDefinedTypeName","pathNode":{"id":2284,"name":"Rounding","nameLocations":["12172:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":1581,"src":"12172:8:8"},"referencedDeclaration":1581,"src":"12172:8:8","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12156:34:8"},"returnParameters":{"id":2290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2289,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2315,"src":"12214:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2288,"name":"uint256","nodeType":"ElementaryTypeName","src":"12214:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12213:9:8"},"scope":2624,"src":"12143:253:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2443,"nodeType":"Block","src":"12595:886:8","statements":[{"assignments":[2324],"declarations":[{"constant":false,"id":2324,"mutability":"mutable","name":"result","nameLocation":"12614:6:8","nodeType":"VariableDeclaration","scope":2443,"src":"12606:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2323,"name":"uint256","nodeType":"ElementaryTypeName","src":"12606:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2326,"initialValue":{"hexValue":"30","id":2325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12623:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12606:18:8"},{"id":2440,"nodeType":"UncheckedBlock","src":"12635:815:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2327,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2318,"src":"12664:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2330,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12673:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12679:2:8","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12673:8:8","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12664:17:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2343,"nodeType":"IfStatement","src":"12660:106:8","trueBody":{"id":2342,"nodeType":"Block","src":"12683:83:8","statements":[{"expression":{"id":2336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2332,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2318,"src":"12702:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2335,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12711:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12717:2:8","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12711:8:8","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12702:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2337,"nodeType":"ExpressionStatement","src":"12702:17:8"},{"expression":{"id":2340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2338,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"12738:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12748:2:8","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12738:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2341,"nodeType":"ExpressionStatement","src":"12738:12:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2344,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2318,"src":"12784:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2347,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12793:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12799:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12793:8:8","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12784:17:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2360,"nodeType":"IfStatement","src":"12780:106:8","trueBody":{"id":2359,"nodeType":"Block","src":"12803:83:8","statements":[{"expression":{"id":2353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2349,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2318,"src":"12822:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2352,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12831:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12837:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12831:8:8","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12822:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2354,"nodeType":"ExpressionStatement","src":"12822:17:8"},{"expression":{"id":2357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2355,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"12858:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12868:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12858:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2358,"nodeType":"ExpressionStatement","src":"12858:12:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2361,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2318,"src":"12904:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2364,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12913:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12919:2:8","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12913:8:8","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12904:17:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2377,"nodeType":"IfStatement","src":"12900:106:8","trueBody":{"id":2376,"nodeType":"Block","src":"12923:83:8","statements":[{"expression":{"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2366,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2318,"src":"12942:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2369,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12951:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12957:2:8","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12951:8:8","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12942:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2371,"nodeType":"ExpressionStatement","src":"12942:17:8"},{"expression":{"id":2374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2372,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"12978:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12988:2:8","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12978:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2375,"nodeType":"ExpressionStatement","src":"12978:12:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2378,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2318,"src":"13024:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2381,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13033:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13039:1:8","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"13033:7:8","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"13024:16:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2394,"nodeType":"IfStatement","src":"13020:103:8","trueBody":{"id":2393,"nodeType":"Block","src":"13042:81:8","statements":[{"expression":{"id":2387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2383,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2318,"src":"13061:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2386,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13070:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13076:1:8","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"13070:7:8","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"13061:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2388,"nodeType":"ExpressionStatement","src":"13061:16:8"},{"expression":{"id":2391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2389,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"13096:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13106:1:8","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"13096:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2392,"nodeType":"ExpressionStatement","src":"13096:11:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2395,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2318,"src":"13141:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2398,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13150:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13156:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"13150:7:8","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"13141:16:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2411,"nodeType":"IfStatement","src":"13137:103:8","trueBody":{"id":2410,"nodeType":"Block","src":"13159:81:8","statements":[{"expression":{"id":2404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2400,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2318,"src":"13178:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2403,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13187:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13193:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"13187:7:8","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"13178:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2405,"nodeType":"ExpressionStatement","src":"13178:16:8"},{"expression":{"id":2408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2406,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"13213:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13223:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"13213:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2409,"nodeType":"ExpressionStatement","src":"13213:11:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2412,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2318,"src":"13258:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2415,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13267:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13273:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"13267:7:8","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"13258:16:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2428,"nodeType":"IfStatement","src":"13254:103:8","trueBody":{"id":2427,"nodeType":"Block","src":"13276:81:8","statements":[{"expression":{"id":2421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2417,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2318,"src":"13295:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2420,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13304:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13310:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"13304:7:8","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"13295:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2422,"nodeType":"ExpressionStatement","src":"13295:16:8"},{"expression":{"id":2425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2423,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"13330:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13340:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"13330:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2426,"nodeType":"ExpressionStatement","src":"13330:11:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2429,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2318,"src":"13375:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2432,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13384:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13390:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13384:7:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"13375:16:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2439,"nodeType":"IfStatement","src":"13371:68:8","trueBody":{"id":2438,"nodeType":"Block","src":"13393:46:8","statements":[{"expression":{"id":2436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2434,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"13412:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13422:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13412:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2437,"nodeType":"ExpressionStatement","src":"13412:11:8"}]}}]},{"expression":{"id":2441,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"13467:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2322,"id":2442,"nodeType":"Return","src":"13460:13:8"}]},"documentation":{"id":2316,"nodeType":"StructuredDocumentation","src":"12404:123:8","text":" @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":2444,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"12542:5:8","nodeType":"FunctionDefinition","parameters":{"id":2319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2318,"mutability":"mutable","name":"value","nameLocation":"12556:5:8","nodeType":"VariableDeclaration","scope":2444,"src":"12548:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2317,"name":"uint256","nodeType":"ElementaryTypeName","src":"12548:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12547:15:8"},"returnParameters":{"id":2322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2321,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2444,"src":"12586:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2320,"name":"uint256","nodeType":"ElementaryTypeName","src":"12586:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12585:9:8"},"scope":2624,"src":"12533:948:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2478,"nodeType":"Block","src":"13722:175:8","statements":[{"id":2477,"nodeType":"UncheckedBlock","src":"13733:157:8","statements":[{"assignments":[2456],"declarations":[{"constant":false,"id":2456,"mutability":"mutable","name":"result","nameLocation":"13766:6:8","nodeType":"VariableDeclaration","scope":2477,"src":"13758:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2455,"name":"uint256","nodeType":"ElementaryTypeName","src":"13758:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2460,"initialValue":{"arguments":[{"id":2458,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2447,"src":"13781:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2457,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2444,2479],"referencedDeclaration":2444,"src":"13775:5:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13775:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13758:29:8"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2461,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"13809:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2463,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2450,"src":"13836:8:8","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"}],"id":2462,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2623,"src":"13819:16:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1581_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13819:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13849:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2466,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"13855:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13849:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2468,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2447,"src":"13864:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13849:20:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13819:50:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13876:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13819:58:8","trueExpression":{"hexValue":"31","id":2471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13872:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2474,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13818:60:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13809:69:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2454,"id":2476,"nodeType":"Return","src":"13802:76:8"}]}]},"documentation":{"id":2445,"nodeType":"StructuredDocumentation","src":"13489:146:8","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2479,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"13650:5:8","nodeType":"FunctionDefinition","parameters":{"id":2451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2447,"mutability":"mutable","name":"value","nameLocation":"13664:5:8","nodeType":"VariableDeclaration","scope":2479,"src":"13656:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2446,"name":"uint256","nodeType":"ElementaryTypeName","src":"13656:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2450,"mutability":"mutable","name":"rounding","nameLocation":"13680:8:8","nodeType":"VariableDeclaration","scope":2479,"src":"13671:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"},"typeName":{"id":2449,"nodeType":"UserDefinedTypeName","pathNode":{"id":2448,"name":"Rounding","nameLocations":["13671:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":1581,"src":"13671:8:8"},"referencedDeclaration":1581,"src":"13671:8:8","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"13655:34:8"},"returnParameters":{"id":2454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2453,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2479,"src":"13713:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2452,"name":"uint256","nodeType":"ElementaryTypeName","src":"13713:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13712:9:8"},"scope":2624,"src":"13641:256:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2565,"nodeType":"Block","src":"14225:624:8","statements":[{"assignments":[2488],"declarations":[{"constant":false,"id":2488,"mutability":"mutable","name":"result","nameLocation":"14244:6:8","nodeType":"VariableDeclaration","scope":2565,"src":"14236:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2487,"name":"uint256","nodeType":"ElementaryTypeName","src":"14236:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2490,"initialValue":{"hexValue":"30","id":2489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14253:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14236:18:8"},{"id":2562,"nodeType":"UncheckedBlock","src":"14265:553:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2491,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2482,"src":"14294:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14303:3:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"14294:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14309:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14294:16:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2505,"nodeType":"IfStatement","src":"14290:101:8","trueBody":{"id":2504,"nodeType":"Block","src":"14312:79:8","statements":[{"expression":{"id":2498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2496,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2482,"src":"14331:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14341:3:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"14331:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2499,"nodeType":"ExpressionStatement","src":"14331:13:8"},{"expression":{"id":2502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2500,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2488,"src":"14363:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14373:2:8","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14363:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2503,"nodeType":"ExpressionStatement","src":"14363:12:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2506,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2482,"src":"14409:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14418:2:8","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14409:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14423:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14409:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2520,"nodeType":"IfStatement","src":"14405:98:8","trueBody":{"id":2519,"nodeType":"Block","src":"14426:77:8","statements":[{"expression":{"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2511,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2482,"src":"14445:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14455:2:8","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14445:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2514,"nodeType":"ExpressionStatement","src":"14445:12:8"},{"expression":{"id":2517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2515,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2488,"src":"14476:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14486:1:8","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14476:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2518,"nodeType":"ExpressionStatement","src":"14476:11:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2521,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2482,"src":"14521:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14530:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14521:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14535:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14521:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2535,"nodeType":"IfStatement","src":"14517:98:8","trueBody":{"id":2534,"nodeType":"Block","src":"14538:77:8","statements":[{"expression":{"id":2528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2526,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2482,"src":"14557:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14567:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14557:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2529,"nodeType":"ExpressionStatement","src":"14557:12:8"},{"expression":{"id":2532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2530,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2488,"src":"14588:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14598:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"14588:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2533,"nodeType":"ExpressionStatement","src":"14588:11:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2536,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2482,"src":"14633:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14642:2:8","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14633:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14647:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14633:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2550,"nodeType":"IfStatement","src":"14629:98:8","trueBody":{"id":2549,"nodeType":"Block","src":"14650:77:8","statements":[{"expression":{"id":2543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2541,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2482,"src":"14669:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14679:2:8","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14669:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2544,"nodeType":"ExpressionStatement","src":"14669:12:8"},{"expression":{"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2545,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2488,"src":"14700:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14710:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"14700:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2548,"nodeType":"ExpressionStatement","src":"14700:11:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2551,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2482,"src":"14745:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14754:1:8","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14745:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14758:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14745:14:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2561,"nodeType":"IfStatement","src":"14741:66:8","trueBody":{"id":2560,"nodeType":"Block","src":"14761:46:8","statements":[{"expression":{"id":2558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2556,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2488,"src":"14780:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14790:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14780:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2559,"nodeType":"ExpressionStatement","src":"14780:11:8"}]}}]},{"expression":{"id":2563,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2488,"src":"14835:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2486,"id":2564,"nodeType":"Return","src":"14828:13:8"}]},"documentation":{"id":2480,"nodeType":"StructuredDocumentation","src":"13905:251:8","text":" @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2566,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"14171:6:8","nodeType":"FunctionDefinition","parameters":{"id":2483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2482,"mutability":"mutable","name":"value","nameLocation":"14186:5:8","nodeType":"VariableDeclaration","scope":2566,"src":"14178:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2481,"name":"uint256","nodeType":"ElementaryTypeName","src":"14178:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14177:15:8"},"returnParameters":{"id":2486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2485,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2566,"src":"14216:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2484,"name":"uint256","nodeType":"ElementaryTypeName","src":"14216:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14215:9:8"},"scope":2624,"src":"14162:687:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2603,"nodeType":"Block","src":"15092:182:8","statements":[{"id":2602,"nodeType":"UncheckedBlock","src":"15103:164:8","statements":[{"assignments":[2578],"declarations":[{"constant":false,"id":2578,"mutability":"mutable","name":"result","nameLocation":"15136:6:8","nodeType":"VariableDeclaration","scope":2602,"src":"15128:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2577,"name":"uint256","nodeType":"ElementaryTypeName","src":"15128:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2582,"initialValue":{"arguments":[{"id":2580,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"15152:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2579,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2566,2604],"referencedDeclaration":2566,"src":"15145:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15145:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15128:30:8"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2583,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"15180:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2585,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2572,"src":"15207:8:8","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"}],"id":2584,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2623,"src":"15190:16:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1581_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15190:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15220:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2588,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"15226:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":2589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15236:1:8","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"15226:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2591,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15225:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15220:18:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2593,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"15241:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15220:26:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15190:56:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15253:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15190:64:8","trueExpression":{"hexValue":"31","id":2596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15249:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2599,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15189:66:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"15180:75:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2576,"id":2601,"nodeType":"Return","src":"15173:82:8"}]}]},"documentation":{"id":2567,"nodeType":"StructuredDocumentation","src":"14857:147:8","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2604,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"15019:6:8","nodeType":"FunctionDefinition","parameters":{"id":2573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2569,"mutability":"mutable","name":"value","nameLocation":"15034:5:8","nodeType":"VariableDeclaration","scope":2604,"src":"15026:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2568,"name":"uint256","nodeType":"ElementaryTypeName","src":"15026:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2572,"mutability":"mutable","name":"rounding","nameLocation":"15050:8:8","nodeType":"VariableDeclaration","scope":2604,"src":"15041:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"},"typeName":{"id":2571,"nodeType":"UserDefinedTypeName","pathNode":{"id":2570,"name":"Rounding","nameLocations":["15041:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":1581,"src":"15041:8:8"},"referencedDeclaration":1581,"src":"15041:8:8","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"15025:34:8"},"returnParameters":{"id":2576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2575,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2604,"src":"15083:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2574,"name":"uint256","nodeType":"ElementaryTypeName","src":"15083:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15082:9:8"},"scope":2624,"src":"15010:264:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2622,"nodeType":"Block","src":"15477:50:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2615,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2608,"src":"15501:8:8","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"}],"id":2614,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15495:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2613,"name":"uint8","nodeType":"ElementaryTypeName","src":"15495:5:8","typeDescriptions":{}}},"id":2616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15495:15:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":2617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15513:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15495:19:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":2619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15518:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15495:24:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2612,"id":2621,"nodeType":"Return","src":"15488:31:8"}]},"documentation":{"id":2605,"nodeType":"StructuredDocumentation","src":"15282:115:8","text":" @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."},"id":2623,"implemented":true,"kind":"function","modifiers":[],"name":"unsignedRoundsUp","nameLocation":"15412:16:8","nodeType":"FunctionDefinition","parameters":{"id":2609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2608,"mutability":"mutable","name":"rounding","nameLocation":"15438:8:8","nodeType":"VariableDeclaration","scope":2623,"src":"15429:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"},"typeName":{"id":2607,"nodeType":"UserDefinedTypeName","pathNode":{"id":2606,"name":"Rounding","nameLocations":["15429:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":1581,"src":"15429:8:8"},"referencedDeclaration":1581,"src":"15429:8:8","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1581","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"15428:19:8"},"returnParameters":{"id":2612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2611,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2623,"src":"15471:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2610,"name":"bool","nodeType":"ElementaryTypeName","src":"15471:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15470:6:8"},"scope":2624,"src":"15403:124:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2625,"src":"210:15320:8","usedErrors":[1576]}],"src":"106:15426:8"},"id":8},"contracts/MessageHashUtils.sol":{"ast":{"absolutePath":"contracts/MessageHashUtils.sol","exportedSymbols":{"MessageHashUtils":[2698],"Strings":[6538]},"id":2699,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2626,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"126:23:9"},{"absolutePath":"contracts/Strings.sol","file":"./Strings.sol","id":2628,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2699,"sourceUnit":6539,"src":"153:38:9","symbolAliases":[{"foreign":{"id":2627,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6538,"src":"161:7:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"MessageHashUtils","contractDependencies":[],"contractKind":"library","documentation":{"id":2629,"nodeType":"StructuredDocumentation","src":"195:336:9","text":" @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n The library provides methods for generating a hash of a message that conforms to the\n https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n specifications."},"fullyImplemented":true,"id":2698,"linearizedBaseContracts":[2698],"name":"MessageHashUtils","nameLocation":"541:16:9","nodeType":"ContractDefinition","nodes":[{"body":{"id":2638,"nodeType":"Block","src":"1341:347:9","statements":[{"AST":{"nodeType":"YulBlock","src":"1377:304:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1399:4:9","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nodeType":"YulLiteral","src":"1405:34:9","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1392:6:9"},"nodeType":"YulFunctionCall","src":"1392:48:9"},"nodeType":"YulExpressionStatement","src":"1392:48:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1502:4:9","type":"","value":"0x1c"},{"name":"messageHash","nodeType":"YulIdentifier","src":"1508:11:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1495:6:9"},"nodeType":"YulFunctionCall","src":"1495:25:9"},"nodeType":"YulExpressionStatement","src":"1495:25:9"},{"nodeType":"YulAssignment","src":"1575:31:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1595:4:9","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"1601:4:9","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"1585:9:9"},"nodeType":"YulFunctionCall","src":"1585:21:9"},"variableNames":[{"name":"digest","nodeType":"YulIdentifier","src":"1575:6:9"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2635,"isOffset":false,"isSlot":false,"src":"1575:6:9","valueSize":1},{"declaration":2632,"isOffset":false,"isSlot":false,"src":"1508:11:9","valueSize":1}],"flags":["memory-safe"],"id":2637,"nodeType":"InlineAssembly","src":"1352:329:9"}]},"documentation":{"id":2630,"nodeType":"StructuredDocumentation","src":"565:678:9","text":" @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing a bytes32 `messageHash` with\n `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n keccak256, although any bytes32 value can be safely used because the final digest will\n be re-hashed.\n See {ECDSA-recover}."},"id":2639,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"1258:22:9","nodeType":"FunctionDefinition","parameters":{"id":2633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2632,"mutability":"mutable","name":"messageHash","nameLocation":"1289:11:9","nodeType":"VariableDeclaration","scope":2639,"src":"1281:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2631,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1281:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1280:21:9"},"returnParameters":{"id":2636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2635,"mutability":"mutable","name":"digest","nameLocation":"1333:6:9","nodeType":"VariableDeclaration","scope":2639,"src":"1325:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2634,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1325:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1324:16:9"},"scope":2698,"src":"1249:439:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2664,"nodeType":"Block","src":"2252:146:9","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":2651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2306:32:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"arguments":[{"expression":{"id":2656,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"2363:7:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2371:6:9","memberName":"length","nodeType":"MemberAccess","src":"2363:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2654,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6538,"src":"2346:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$6538_$","typeString":"type(library Strings)"}},"id":2655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2354:8:9","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":5427,"src":"2346:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2346:32:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2340:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2652,"name":"bytes","nodeType":"ElementaryTypeName","src":"2340:5:9","typeDescriptions":{}}},"id":2659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2340:39:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2660,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"2381:7:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2649,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2293:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2648,"name":"bytes","nodeType":"ElementaryTypeName","src":"2293:5:9","typeDescriptions":{}}},"id":2650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2299:6:9","memberName":"concat","nodeType":"MemberAccess","src":"2293:12:9","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2293:96:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2647,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2283:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2283:107:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2646,"id":2663,"nodeType":"Return","src":"2263:127:9"}]},"documentation":{"id":2640,"nodeType":"StructuredDocumentation","src":"1696:464:9","text":" @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing an arbitrary `message` with\n `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n See {ECDSA-recover}."},"id":2665,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"2175:22:9","nodeType":"FunctionDefinition","parameters":{"id":2643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2642,"mutability":"mutable","name":"message","nameLocation":"2211:7:9","nodeType":"VariableDeclaration","scope":2665,"src":"2198:20:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2641,"name":"bytes","nodeType":"ElementaryTypeName","src":"2198:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2197:22:9"},"returnParameters":{"id":2646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2645,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2665,"src":"2243:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2644,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2243:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2242:9:9"},"scope":2698,"src":"2166:232:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2684,"nodeType":"Block","src":"2863:82:9","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":2678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"2908:10:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":2679,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2668,"src":"2920:9:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2680,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"2931:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2676,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2891:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2677,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2895:12:9","memberName":"encodePacked","nodeType":"MemberAccess","src":"2891:16:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2891:45:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2675,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2881:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2881:56:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2674,"id":2683,"nodeType":"Return","src":"2874:63:9"}]},"documentation":{"id":2666,"nodeType":"StructuredDocumentation","src":"2406:340:9","text":" @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x00` (data with intended validator).\n The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n `validator` address. Then hashing the result.\n See {ECDSA-recover}."},"id":2685,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"2761:31:9","nodeType":"FunctionDefinition","parameters":{"id":2671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2668,"mutability":"mutable","name":"validator","nameLocation":"2801:9:9","nodeType":"VariableDeclaration","scope":2685,"src":"2793:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2667,"name":"address","nodeType":"ElementaryTypeName","src":"2793:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2670,"mutability":"mutable","name":"data","nameLocation":"2825:4:9","nodeType":"VariableDeclaration","scope":2685,"src":"2812:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2669,"name":"bytes","nodeType":"ElementaryTypeName","src":"2812:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2792:38:9"},"returnParameters":{"id":2674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2673,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2685,"src":"2854:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2672,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2854:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2853:9:9"},"scope":2698,"src":"2752:193:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2696,"nodeType":"Block","src":"3507:273:9","statements":[{"AST":{"nodeType":"YulBlock","src":"3543:230:9","statements":[{"nodeType":"YulVariableDeclaration","src":"3558:22:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3575:4:9","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3569:5:9"},"nodeType":"YulFunctionCall","src":"3569:11:9"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"3562:3:9","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3601:3:9"},{"hexValue":"1901","kind":"string","nodeType":"YulLiteral","src":"3606:10:9","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3594:6:9"},"nodeType":"YulFunctionCall","src":"3594:23:9"},"nodeType":"YulExpressionStatement","src":"3594:23:9"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3642:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"3647:4:9","type":"","value":"0x02"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3638:3:9"},"nodeType":"YulFunctionCall","src":"3638:14:9"},{"name":"domainSeparator","nodeType":"YulIdentifier","src":"3654:15:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3631:6:9"},"nodeType":"YulFunctionCall","src":"3631:39:9"},"nodeType":"YulExpressionStatement","src":"3631:39:9"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3695:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"3700:4:9","type":"","value":"0x22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3691:3:9"},"nodeType":"YulFunctionCall","src":"3691:14:9"},{"name":"structHash","nodeType":"YulIdentifier","src":"3707:10:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3684:6:9"},"nodeType":"YulFunctionCall","src":"3684:34:9"},"nodeType":"YulExpressionStatement","src":"3684:34:9"},{"nodeType":"YulAssignment","src":"3732:30:9","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3752:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"3757:4:9","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"3742:9:9"},"nodeType":"YulFunctionCall","src":"3742:20:9"},"variableNames":[{"name":"digest","nodeType":"YulIdentifier","src":"3732:6:9"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2693,"isOffset":false,"isSlot":false,"src":"3732:6:9","valueSize":1},{"declaration":2688,"isOffset":false,"isSlot":false,"src":"3654:15:9","valueSize":1},{"declaration":2690,"isOffset":false,"isSlot":false,"src":"3707:10:9","valueSize":1}],"flags":["memory-safe"],"id":2695,"nodeType":"InlineAssembly","src":"3518:255:9"}]},"documentation":{"id":2686,"nodeType":"StructuredDocumentation","src":"2953:439:9","text":" @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\n The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n See {ECDSA-recover}."},"id":2697,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"3407:15:9","nodeType":"FunctionDefinition","parameters":{"id":2691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2688,"mutability":"mutable","name":"domainSeparator","nameLocation":"3431:15:9","nodeType":"VariableDeclaration","scope":2697,"src":"3423:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2687,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3423:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2690,"mutability":"mutable","name":"structHash","nameLocation":"3456:10:9","nodeType":"VariableDeclaration","scope":2697,"src":"3448:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2689,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3448:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3422:45:9"},"returnParameters":{"id":2694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2693,"mutability":"mutable","name":"digest","nameLocation":"3499:6:9","nodeType":"VariableDeclaration","scope":2697,"src":"3491:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2692,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3491:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3490:16:9"},"scope":2698,"src":"3398:382:9","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2699,"src":"533:3250:9","usedErrors":[]}],"src":"126:3657:9"},"id":9},"contracts/Nonces.sol":{"ast":{"absolutePath":"contracts/Nonces.sol","exportedSymbols":{"Nonces":[2766]},"id":2767,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2700,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"101:23:10"},{"abstract":true,"baseContracts":[],"canonicalName":"Nonces","contractDependencies":[],"contractKind":"contract","documentation":{"id":2701,"nodeType":"StructuredDocumentation","src":"128:85:10","text":" @dev Provides tracking nonces for addresses. Nonces will only increment."},"fullyImplemented":true,"id":2766,"linearizedBaseContracts":[2766],"name":"Nonces","nameLocation":"233:6:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2702,"nodeType":"StructuredDocumentation","src":"247:92:10","text":" @dev The nonce used for an `account` is not the expected current nonce."},"errorSelector":"752d88c0","id":2708,"name":"InvalidAccountNonce","nameLocation":"351:19:10","nodeType":"ErrorDefinition","parameters":{"id":2707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2704,"mutability":"mutable","name":"account","nameLocation":"379:7:10","nodeType":"VariableDeclaration","scope":2708,"src":"371:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2703,"name":"address","nodeType":"ElementaryTypeName","src":"371:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2706,"mutability":"mutable","name":"currentNonce","nameLocation":"396:12:10","nodeType":"VariableDeclaration","scope":2708,"src":"388:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2705,"name":"uint256","nodeType":"ElementaryTypeName","src":"388:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"370:39:10"},"src":"345:65:10"},{"constant":false,"id":2712,"mutability":"mutable","name":"_nonces","nameLocation":"454:7:10","nodeType":"VariableDeclaration","scope":2766,"src":"418:43:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2711,"keyType":{"id":2709,"name":"address","nodeType":"ElementaryTypeName","src":"426:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"418:27:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":2710,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"body":{"id":2724,"nodeType":"Block","src":"616:40:10","statements":[{"expression":{"baseExpression":{"id":2720,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"634:7:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2722,"indexExpression":{"id":2721,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2715,"src":"642:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"634:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2719,"id":2723,"nodeType":"Return","src":"627:21:10"}]},"documentation":{"id":2713,"nodeType":"StructuredDocumentation","src":"470:71:10","text":" @dev Returns the next unused nonce for an address."},"functionSelector":"7ecebe00","id":2725,"implemented":true,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"556:6:10","nodeType":"FunctionDefinition","parameters":{"id":2716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2715,"mutability":"mutable","name":"owner","nameLocation":"571:5:10","nodeType":"VariableDeclaration","scope":2725,"src":"563:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2714,"name":"address","nodeType":"ElementaryTypeName","src":"563:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"562:15:10"},"returnParameters":{"id":2719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2718,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2725,"src":"607:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2717,"name":"uint256","nodeType":"ElementaryTypeName","src":"607:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"606:9:10"},"scope":2766,"src":"547:109:10","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2739,"nodeType":"Block","src":"846:333:10","statements":[{"id":2738,"nodeType":"UncheckedBlock","src":"1052:120:10","statements":[{"expression":{"id":2736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1144:16:10","subExpression":{"baseExpression":{"id":2733,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"1144:7:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2735,"indexExpression":{"id":2734,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"1152:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1144:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2732,"id":2737,"nodeType":"Return","src":"1137:23:10"}]}]},"documentation":{"id":2726,"nodeType":"StructuredDocumentation","src":"664:107:10","text":" @dev Consumes a nonce.\n Returns the current value and increments nonce."},"id":2740,"implemented":true,"kind":"function","modifiers":[],"name":"_useNonce","nameLocation":"786:9:10","nodeType":"FunctionDefinition","parameters":{"id":2729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2728,"mutability":"mutable","name":"owner","nameLocation":"804:5:10","nodeType":"VariableDeclaration","scope":2740,"src":"796:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2727,"name":"address","nodeType":"ElementaryTypeName","src":"796:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"795:15:10"},"returnParameters":{"id":2732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2731,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2740,"src":"837:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2730,"name":"uint256","nodeType":"ElementaryTypeName","src":"837:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"836:9:10"},"scope":2766,"src":"777:402:10","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2764,"nodeType":"Block","src":"1368:154:10","statements":[{"assignments":[2749],"declarations":[{"constant":false,"id":2749,"mutability":"mutable","name":"current","nameLocation":"1387:7:10","nodeType":"VariableDeclaration","scope":2764,"src":"1379:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2748,"name":"uint256","nodeType":"ElementaryTypeName","src":"1379:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2753,"initialValue":{"arguments":[{"id":2751,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"1407:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2750,"name":"_useNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2740,"src":"1397:9:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$","typeString":"function (address) returns (uint256)"}},"id":2752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1397:16:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1379:34:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2754,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2745,"src":"1428:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2755,"name":"current","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2749,"src":"1437:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1428:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2763,"nodeType":"IfStatement","src":"1424:91:10","trueBody":{"id":2762,"nodeType":"Block","src":"1446:69:10","statements":[{"errorCall":{"arguments":[{"id":2758,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"1488:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2759,"name":"current","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2749,"src":"1495:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2757,"name":"InvalidAccountNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2708,"src":"1468:19:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":2760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1468:35:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2761,"nodeType":"RevertStatement","src":"1461:42:10"}]}}]},"documentation":{"id":2741,"nodeType":"StructuredDocumentation","src":"1187:102:10","text":" @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`."},"id":2765,"implemented":true,"kind":"function","modifiers":[],"name":"_useCheckedNonce","nameLocation":"1304:16:10","nodeType":"FunctionDefinition","parameters":{"id":2746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2743,"mutability":"mutable","name":"owner","nameLocation":"1329:5:10","nodeType":"VariableDeclaration","scope":2765,"src":"1321:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2742,"name":"address","nodeType":"ElementaryTypeName","src":"1321:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2745,"mutability":"mutable","name":"nonce","nameLocation":"1344:5:10","nodeType":"VariableDeclaration","scope":2765,"src":"1336:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2744,"name":"uint256","nodeType":"ElementaryTypeName","src":"1336:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1320:30:10"},"returnParameters":{"id":2747,"nodeType":"ParameterList","parameters":[],"src":"1368:0:10"},"scope":2766,"src":"1295:227:10","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2767,"src":"215:1310:10","usedErrors":[2708]}],"src":"101:1424:10"},"id":10},"contracts/Panic.sol":{"ast":{"absolutePath":"contracts/Panic.sol","exportedSymbols":{"Panic":[2818]},"id":2819,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2768,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"102:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"Panic","contractDependencies":[],"contractKind":"library","documentation":{"id":2769,"nodeType":"StructuredDocumentation","src":"129:507:11","text":" @dev Helper library for emitting standardized panic codes.\n ```solidity\n contract Example {\n      using Panic for uint256;\n      // Use any of the declared internal constants\n      function foo() { Panic.GENERIC.panic(); }\n      // Alternatively\n      function foo() { Panic.panic(Panic.GENERIC); }\n }\n ```\n Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\n _Available since v5.1._"},"fullyImplemented":true,"id":2818,"linearizedBaseContracts":[2818],"name":"Panic","nameLocation":"689:5:11","nodeType":"ContractDefinition","nodes":[{"constant":true,"documentation":{"id":2770,"nodeType":"StructuredDocumentation","src":"702:36:11","text":"@dev generic / unspecified error"},"id":2773,"mutability":"constant","name":"GENERIC","nameLocation":"770:7:11","nodeType":"VariableDeclaration","scope":2818,"src":"744:40:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2771,"name":"uint256","nodeType":"ElementaryTypeName","src":"744:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783030","id":2772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"780:4:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"internal"},{"constant":true,"documentation":{"id":2774,"nodeType":"StructuredDocumentation","src":"791:37:11","text":"@dev used by the assert() builtin"},"id":2777,"mutability":"constant","name":"ASSERT","nameLocation":"860:6:11","nodeType":"VariableDeclaration","scope":2818,"src":"834:39:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2775,"name":"uint256","nodeType":"ElementaryTypeName","src":"834:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783031","id":2776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"869:4:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x01"},"visibility":"internal"},{"constant":true,"documentation":{"id":2778,"nodeType":"StructuredDocumentation","src":"880:41:11","text":"@dev arithmetic underflow or overflow"},"id":2781,"mutability":"constant","name":"UNDER_OVERFLOW","nameLocation":"953:14:11","nodeType":"VariableDeclaration","scope":2818,"src":"927:47:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2779,"name":"uint256","nodeType":"ElementaryTypeName","src":"927:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783131","id":2780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"970:4:11","typeDescriptions":{"typeIdentifier":"t_rational_17_by_1","typeString":"int_const 17"},"value":"0x11"},"visibility":"internal"},{"constant":true,"documentation":{"id":2782,"nodeType":"StructuredDocumentation","src":"981:35:11","text":"@dev division or modulo by zero"},"id":2785,"mutability":"constant","name":"DIVISION_BY_ZERO","nameLocation":"1048:16:11","nodeType":"VariableDeclaration","scope":2818,"src":"1022:49:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2783,"name":"uint256","nodeType":"ElementaryTypeName","src":"1022:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783132","id":2784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1067:4:11","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"0x12"},"visibility":"internal"},{"constant":true,"documentation":{"id":2786,"nodeType":"StructuredDocumentation","src":"1078:30:11","text":"@dev enum conversion error"},"id":2789,"mutability":"constant","name":"ENUM_CONVERSION_ERROR","nameLocation":"1140:21:11","nodeType":"VariableDeclaration","scope":2818,"src":"1114:54:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2787,"name":"uint256","nodeType":"ElementaryTypeName","src":"1114:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783231","id":2788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1164:4:11","typeDescriptions":{"typeIdentifier":"t_rational_33_by_1","typeString":"int_const 33"},"value":"0x21"},"visibility":"internal"},{"constant":true,"documentation":{"id":2790,"nodeType":"StructuredDocumentation","src":"1175:36:11","text":"@dev invalid encoding in storage"},"id":2793,"mutability":"constant","name":"STORAGE_ENCODING_ERROR","nameLocation":"1243:22:11","nodeType":"VariableDeclaration","scope":2818,"src":"1217:55:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2791,"name":"uint256","nodeType":"ElementaryTypeName","src":"1217:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783232","id":2792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1268:4:11","typeDescriptions":{"typeIdentifier":"t_rational_34_by_1","typeString":"int_const 34"},"value":"0x22"},"visibility":"internal"},{"constant":true,"documentation":{"id":2794,"nodeType":"StructuredDocumentation","src":"1279:24:11","text":"@dev empty array pop"},"id":2797,"mutability":"constant","name":"EMPTY_ARRAY_POP","nameLocation":"1335:15:11","nodeType":"VariableDeclaration","scope":2818,"src":"1309:48:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2795,"name":"uint256","nodeType":"ElementaryTypeName","src":"1309:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783331","id":2796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1353:4:11","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"0x31"},"visibility":"internal"},{"constant":true,"documentation":{"id":2798,"nodeType":"StructuredDocumentation","src":"1364:35:11","text":"@dev array out of bounds access"},"id":2801,"mutability":"constant","name":"ARRAY_OUT_OF_BOUNDS","nameLocation":"1431:19:11","nodeType":"VariableDeclaration","scope":2818,"src":"1405:52:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2799,"name":"uint256","nodeType":"ElementaryTypeName","src":"1405:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783332","id":2800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1453:4:11","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"0x32"},"visibility":"internal"},{"constant":true,"documentation":{"id":2802,"nodeType":"StructuredDocumentation","src":"1464:65:11","text":"@dev resource error (too large allocation or too large array)"},"id":2805,"mutability":"constant","name":"RESOURCE_ERROR","nameLocation":"1561:14:11","nodeType":"VariableDeclaration","scope":2818,"src":"1535:47:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2803,"name":"uint256","nodeType":"ElementaryTypeName","src":"1535:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783431","id":2804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1578:4:11","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"0x41"},"visibility":"internal"},{"constant":true,"documentation":{"id":2806,"nodeType":"StructuredDocumentation","src":"1589:42:11","text":"@dev calling invalid internal function"},"id":2809,"mutability":"constant","name":"INVALID_INTERNAL_FUNCTION","nameLocation":"1663:25:11","nodeType":"VariableDeclaration","scope":2818,"src":"1637:58:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2807,"name":"uint256","nodeType":"ElementaryTypeName","src":"1637:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783531","id":2808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1691:4:11","typeDescriptions":{"typeIdentifier":"t_rational_81_by_1","typeString":"int_const 81"},"value":"0x51"},"visibility":"internal"},{"body":{"id":2816,"nodeType":"Block","src":"1867:157:11","statements":[{"AST":{"nodeType":"YulBlock","src":"1903:114:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1925:4:11","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"1931:10:11","type":"","value":"0x4e487b71"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1918:6:11"},"nodeType":"YulFunctionCall","src":"1918:24:11"},"nodeType":"YulExpressionStatement","src":"1918:24:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1963:4:11","type":"","value":"0x20"},{"name":"code","nodeType":"YulIdentifier","src":"1969:4:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1956:6:11"},"nodeType":"YulFunctionCall","src":"1956:18:11"},"nodeType":"YulExpressionStatement","src":"1956:18:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1995:4:11","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"2001:4:11","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1988:6:11"},"nodeType":"YulFunctionCall","src":"1988:18:11"},"nodeType":"YulExpressionStatement","src":"1988:18:11"}]},"evmVersion":"london","externalReferences":[{"declaration":2812,"isOffset":false,"isSlot":false,"src":"1969:4:11","valueSize":1}],"flags":["memory-safe"],"id":2815,"nodeType":"InlineAssembly","src":"1878:139:11"}]},"documentation":{"id":2810,"nodeType":"StructuredDocumentation","src":"1704:114:11","text":"@dev Reverts with a panic code. Recommended to use with\n the internal constants with predefined codes."},"id":2817,"implemented":true,"kind":"function","modifiers":[],"name":"panic","nameLocation":"1833:5:11","nodeType":"FunctionDefinition","parameters":{"id":2813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2812,"mutability":"mutable","name":"code","nameLocation":"1847:4:11","nodeType":"VariableDeclaration","scope":2817,"src":"1839:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2811,"name":"uint256","nodeType":"ElementaryTypeName","src":"1839:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:14:11"},"returnParameters":{"id":2814,"nodeType":"ParameterList","parameters":[],"src":"1867:0:11"},"scope":2818,"src":"1824:200:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2819,"src":"681:1346:11","usedErrors":[]}],"src":"102:1925:11"},"id":11},"contracts/SafeCast.sol":{"ast":{"absolutePath":"contracts/SafeCast.sol","exportedSymbols":{"SafeCast":[4583]},"id":4584,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2820,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"196:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeCast","contractDependencies":[],"contractKind":"library","documentation":{"id":2821,"nodeType":"StructuredDocumentation","src":"223:561:12","text":" @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\n checks.\n Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n easily result in undesired exploitation or bugs, since developers usually\n assume that overflows raise errors. `SafeCast` restores this intuition by\n reverting the transaction when such an operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."},"fullyImplemented":true,"id":4583,"linearizedBaseContracts":[4583],"name":"SafeCast","nameLocation":"794:8:12","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2822,"nodeType":"StructuredDocumentation","src":"810:70:12","text":" @dev Value doesn't fit in an uint of `bits` size."},"errorSelector":"6dfcc650","id":2828,"name":"SafeCastOverflowedUintDowncast","nameLocation":"892:30:12","nodeType":"ErrorDefinition","parameters":{"id":2827,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2824,"mutability":"mutable","name":"bits","nameLocation":"929:4:12","nodeType":"VariableDeclaration","scope":2828,"src":"923:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2823,"name":"uint8","nodeType":"ElementaryTypeName","src":"923:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2826,"mutability":"mutable","name":"value","nameLocation":"943:5:12","nodeType":"VariableDeclaration","scope":2828,"src":"935:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2825,"name":"uint256","nodeType":"ElementaryTypeName","src":"935:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"922:27:12"},"src":"886:64:12"},{"documentation":{"id":2829,"nodeType":"StructuredDocumentation","src":"958:77:12","text":" @dev An int value doesn't fit in an uint of `bits` size."},"errorSelector":"a8ce4432","id":2833,"name":"SafeCastOverflowedIntToUint","nameLocation":"1047:27:12","nodeType":"ErrorDefinition","parameters":{"id":2832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2831,"mutability":"mutable","name":"value","nameLocation":"1082:5:12","nodeType":"VariableDeclaration","scope":2833,"src":"1075:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2830,"name":"int256","nodeType":"ElementaryTypeName","src":"1075:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1074:14:12"},"src":"1041:48:12"},{"documentation":{"id":2834,"nodeType":"StructuredDocumentation","src":"1097:69:12","text":" @dev Value doesn't fit in an int of `bits` size."},"errorSelector":"327269a7","id":2840,"name":"SafeCastOverflowedIntDowncast","nameLocation":"1178:29:12","nodeType":"ErrorDefinition","parameters":{"id":2839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2836,"mutability":"mutable","name":"bits","nameLocation":"1214:4:12","nodeType":"VariableDeclaration","scope":2840,"src":"1208:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2835,"name":"uint8","nodeType":"ElementaryTypeName","src":"1208:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2838,"mutability":"mutable","name":"value","nameLocation":"1227:5:12","nodeType":"VariableDeclaration","scope":2840,"src":"1220:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2837,"name":"int256","nodeType":"ElementaryTypeName","src":"1220:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1207:26:12"},"src":"1172:62:12"},{"documentation":{"id":2841,"nodeType":"StructuredDocumentation","src":"1242:77:12","text":" @dev An uint value doesn't fit in an int of `bits` size."},"errorSelector":"24775e06","id":2845,"name":"SafeCastOverflowedUintToInt","nameLocation":"1331:27:12","nodeType":"ErrorDefinition","parameters":{"id":2844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2843,"mutability":"mutable","name":"value","nameLocation":"1367:5:12","nodeType":"VariableDeclaration","scope":2845,"src":"1359:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2842,"name":"uint256","nodeType":"ElementaryTypeName","src":"1359:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1358:15:12"},"src":"1325:49:12"},{"body":{"id":2872,"nodeType":"Block","src":"1743:157:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2853,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2848,"src":"1758:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":2856,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1771:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":2855,"name":"uint248","nodeType":"ElementaryTypeName","src":"1771:7:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"}],"id":2854,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1766:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1766:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint248","typeString":"type(uint248)"}},"id":2858,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1780:3:12","memberName":"max","nodeType":"MemberAccess","src":"1766:17:12","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"src":"1758:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2866,"nodeType":"IfStatement","src":"1754:107:12","trueBody":{"id":2865,"nodeType":"Block","src":"1785:76:12","statements":[{"errorCall":{"arguments":[{"hexValue":"323438","id":2861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1838:3:12","typeDescriptions":{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},"value":"248"},{"id":2862,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2848,"src":"1843:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2860,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"1807:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":2863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1807:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2864,"nodeType":"RevertStatement","src":"1800:49:12"}]}},{"expression":{"arguments":[{"id":2869,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2848,"src":"1886:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2868,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1878:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":2867,"name":"uint248","nodeType":"ElementaryTypeName","src":"1878:7:12","typeDescriptions":{}}},"id":2870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1878:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"functionReturnParameters":2852,"id":2871,"nodeType":"Return","src":"1871:21:12"}]},"documentation":{"id":2846,"nodeType":"StructuredDocumentation","src":"1382:289:12","text":" @dev Returns the downcasted uint248 from uint256, reverting on\n overflow (when the input is greater than largest uint248).\n Counterpart to Solidity's `uint248` operator.\n Requirements:\n - input must fit into 248 bits"},"id":2873,"implemented":true,"kind":"function","modifiers":[],"name":"toUint248","nameLocation":"1686:9:12","nodeType":"FunctionDefinition","parameters":{"id":2849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2848,"mutability":"mutable","name":"value","nameLocation":"1704:5:12","nodeType":"VariableDeclaration","scope":2873,"src":"1696:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2847,"name":"uint256","nodeType":"ElementaryTypeName","src":"1696:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1695:15:12"},"returnParameters":{"id":2852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2851,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2873,"src":"1734:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"},"typeName":{"id":2850,"name":"uint248","nodeType":"ElementaryTypeName","src":"1734:7:12","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"visibility":"internal"}],"src":"1733:9:12"},"scope":4583,"src":"1677:223:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2900,"nodeType":"Block","src":"2269:157:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2881,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2876,"src":"2284:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":2884,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2297:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":2883,"name":"uint240","nodeType":"ElementaryTypeName","src":"2297:7:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"}],"id":2882,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2292:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2292:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint240","typeString":"type(uint240)"}},"id":2886,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2306:3:12","memberName":"max","nodeType":"MemberAccess","src":"2292:17:12","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"src":"2284:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2894,"nodeType":"IfStatement","src":"2280:107:12","trueBody":{"id":2893,"nodeType":"Block","src":"2311:76:12","statements":[{"errorCall":{"arguments":[{"hexValue":"323430","id":2889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2364:3:12","typeDescriptions":{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},"value":"240"},{"id":2890,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2876,"src":"2369:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2888,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"2333:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":2891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2333:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2892,"nodeType":"RevertStatement","src":"2326:49:12"}]}},{"expression":{"arguments":[{"id":2897,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2876,"src":"2412:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2896,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2404:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":2895,"name":"uint240","nodeType":"ElementaryTypeName","src":"2404:7:12","typeDescriptions":{}}},"id":2898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2404:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"functionReturnParameters":2880,"id":2899,"nodeType":"Return","src":"2397:21:12"}]},"documentation":{"id":2874,"nodeType":"StructuredDocumentation","src":"1908:289:12","text":" @dev Returns the downcasted uint240 from uint256, reverting on\n overflow (when the input is greater than largest uint240).\n Counterpart to Solidity's `uint240` operator.\n Requirements:\n - input must fit into 240 bits"},"id":2901,"implemented":true,"kind":"function","modifiers":[],"name":"toUint240","nameLocation":"2212:9:12","nodeType":"FunctionDefinition","parameters":{"id":2877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2876,"mutability":"mutable","name":"value","nameLocation":"2230:5:12","nodeType":"VariableDeclaration","scope":2901,"src":"2222:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2875,"name":"uint256","nodeType":"ElementaryTypeName","src":"2222:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2221:15:12"},"returnParameters":{"id":2880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2879,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2901,"src":"2260:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"},"typeName":{"id":2878,"name":"uint240","nodeType":"ElementaryTypeName","src":"2260:7:12","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"visibility":"internal"}],"src":"2259:9:12"},"scope":4583,"src":"2203:223:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2928,"nodeType":"Block","src":"2795:157:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2909,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"2810:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":2912,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2823:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":2911,"name":"uint232","nodeType":"ElementaryTypeName","src":"2823:7:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"}],"id":2910,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2818:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2818:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint232","typeString":"type(uint232)"}},"id":2914,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2832:3:12","memberName":"max","nodeType":"MemberAccess","src":"2818:17:12","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"src":"2810:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2922,"nodeType":"IfStatement","src":"2806:107:12","trueBody":{"id":2921,"nodeType":"Block","src":"2837:76:12","statements":[{"errorCall":{"arguments":[{"hexValue":"323332","id":2917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2890:3:12","typeDescriptions":{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},"value":"232"},{"id":2918,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"2895:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2916,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"2859:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2859:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2920,"nodeType":"RevertStatement","src":"2852:49:12"}]}},{"expression":{"arguments":[{"id":2925,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"2938:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2924,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2930:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":2923,"name":"uint232","nodeType":"ElementaryTypeName","src":"2930:7:12","typeDescriptions":{}}},"id":2926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2930:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"functionReturnParameters":2908,"id":2927,"nodeType":"Return","src":"2923:21:12"}]},"documentation":{"id":2902,"nodeType":"StructuredDocumentation","src":"2434:289:12","text":" @dev Returns the downcasted uint232 from uint256, reverting on\n overflow (when the input is greater than largest uint232).\n Counterpart to Solidity's `uint232` operator.\n Requirements:\n - input must fit into 232 bits"},"id":2929,"implemented":true,"kind":"function","modifiers":[],"name":"toUint232","nameLocation":"2738:9:12","nodeType":"FunctionDefinition","parameters":{"id":2905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2904,"mutability":"mutable","name":"value","nameLocation":"2756:5:12","nodeType":"VariableDeclaration","scope":2929,"src":"2748:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2903,"name":"uint256","nodeType":"ElementaryTypeName","src":"2748:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2747:15:12"},"returnParameters":{"id":2908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2907,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2929,"src":"2786:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"},"typeName":{"id":2906,"name":"uint232","nodeType":"ElementaryTypeName","src":"2786:7:12","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"visibility":"internal"}],"src":"2785:9:12"},"scope":4583,"src":"2729:223:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2956,"nodeType":"Block","src":"3321:157:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2937,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"3336:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":2940,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3349:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":2939,"name":"uint224","nodeType":"ElementaryTypeName","src":"3349:7:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"}],"id":2938,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3344:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3344:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint224","typeString":"type(uint224)"}},"id":2942,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3358:3:12","memberName":"max","nodeType":"MemberAccess","src":"3344:17:12","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"src":"3336:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2950,"nodeType":"IfStatement","src":"3332:107:12","trueBody":{"id":2949,"nodeType":"Block","src":"3363:76:12","statements":[{"errorCall":{"arguments":[{"hexValue":"323234","id":2945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3416:3:12","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},{"id":2946,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"3421:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2944,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"3385:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3385:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2948,"nodeType":"RevertStatement","src":"3378:49:12"}]}},{"expression":{"arguments":[{"id":2953,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"3464:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2952,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3456:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":2951,"name":"uint224","nodeType":"ElementaryTypeName","src":"3456:7:12","typeDescriptions":{}}},"id":2954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3456:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"functionReturnParameters":2936,"id":2955,"nodeType":"Return","src":"3449:21:12"}]},"documentation":{"id":2930,"nodeType":"StructuredDocumentation","src":"2960:289:12","text":" @dev Returns the downcasted uint224 from uint256, reverting on\n overflow (when the input is greater than largest uint224).\n Counterpart to Solidity's `uint224` operator.\n Requirements:\n - input must fit into 224 bits"},"id":2957,"implemented":true,"kind":"function","modifiers":[],"name":"toUint224","nameLocation":"3264:9:12","nodeType":"FunctionDefinition","parameters":{"id":2933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2932,"mutability":"mutable","name":"value","nameLocation":"3282:5:12","nodeType":"VariableDeclaration","scope":2957,"src":"3274:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2931,"name":"uint256","nodeType":"ElementaryTypeName","src":"3274:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3273:15:12"},"returnParameters":{"id":2936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2935,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2957,"src":"3312:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":2934,"name":"uint224","nodeType":"ElementaryTypeName","src":"3312:7:12","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"src":"3311:9:12"},"scope":4583,"src":"3255:223:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2984,"nodeType":"Block","src":"3847:157:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2965,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"3862:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":2968,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3875:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":2967,"name":"uint216","nodeType":"ElementaryTypeName","src":"3875:7:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"}],"id":2966,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3870:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3870:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint216","typeString":"type(uint216)"}},"id":2970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3884:3:12","memberName":"max","nodeType":"MemberAccess","src":"3870:17:12","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"src":"3862:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2978,"nodeType":"IfStatement","src":"3858:107:12","trueBody":{"id":2977,"nodeType":"Block","src":"3889:76:12","statements":[{"errorCall":{"arguments":[{"hexValue":"323136","id":2973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3942:3:12","typeDescriptions":{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},"value":"216"},{"id":2974,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"3947:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2972,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"3911:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":2975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3911:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2976,"nodeType":"RevertStatement","src":"3904:49:12"}]}},{"expression":{"arguments":[{"id":2981,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"3990:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2980,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3982:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":2979,"name":"uint216","nodeType":"ElementaryTypeName","src":"3982:7:12","typeDescriptions":{}}},"id":2982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3982:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"functionReturnParameters":2964,"id":2983,"nodeType":"Return","src":"3975:21:12"}]},"documentation":{"id":2958,"nodeType":"StructuredDocumentation","src":"3486:289:12","text":" @dev Returns the downcasted uint216 from uint256, reverting on\n overflow (when the input is greater than largest uint216).\n Counterpart to Solidity's `uint216` operator.\n Requirements:\n - input must fit into 216 bits"},"id":2985,"implemented":true,"kind":"function","modifiers":[],"name":"toUint216","nameLocation":"3790:9:12","nodeType":"FunctionDefinition","parameters":{"id":2961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2960,"mutability":"mutable","name":"value","nameLocation":"3808:5:12","nodeType":"VariableDeclaration","scope":2985,"src":"3800:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2959,"name":"uint256","nodeType":"ElementaryTypeName","src":"3800:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3799:15:12"},"returnParameters":{"id":2964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2963,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2985,"src":"3838:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"},"typeName":{"id":2962,"name":"uint216","nodeType":"ElementaryTypeName","src":"3838:7:12","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"visibility":"internal"}],"src":"3837:9:12"},"scope":4583,"src":"3781:223:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3012,"nodeType":"Block","src":"4373:157:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2993,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2988,"src":"4388:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":2996,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4401:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":2995,"name":"uint208","nodeType":"ElementaryTypeName","src":"4401:7:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"}],"id":2994,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4396:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4396:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint208","typeString":"type(uint208)"}},"id":2998,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4410:3:12","memberName":"max","nodeType":"MemberAccess","src":"4396:17:12","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"src":"4388:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3006,"nodeType":"IfStatement","src":"4384:107:12","trueBody":{"id":3005,"nodeType":"Block","src":"4415:76:12","statements":[{"errorCall":{"arguments":[{"hexValue":"323038","id":3001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4468:3:12","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"value":"208"},{"id":3002,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2988,"src":"4473:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3000,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"4437:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4437:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3004,"nodeType":"RevertStatement","src":"4430:49:12"}]}},{"expression":{"arguments":[{"id":3009,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2988,"src":"4516:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3008,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4508:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":3007,"name":"uint208","nodeType":"ElementaryTypeName","src":"4508:7:12","typeDescriptions":{}}},"id":3010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4508:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"functionReturnParameters":2992,"id":3011,"nodeType":"Return","src":"4501:21:12"}]},"documentation":{"id":2986,"nodeType":"StructuredDocumentation","src":"4012:289:12","text":" @dev Returns the downcasted uint208 from uint256, reverting on\n overflow (when the input is greater than largest uint208).\n Counterpart to Solidity's `uint208` operator.\n Requirements:\n - input must fit into 208 bits"},"id":3013,"implemented":true,"kind":"function","modifiers":[],"name":"toUint208","nameLocation":"4316:9:12","nodeType":"FunctionDefinition","parameters":{"id":2989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2988,"mutability":"mutable","name":"value","nameLocation":"4334:5:12","nodeType":"VariableDeclaration","scope":3013,"src":"4326:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2987,"name":"uint256","nodeType":"ElementaryTypeName","src":"4326:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4325:15:12"},"returnParameters":{"id":2992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2991,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3013,"src":"4364:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":2990,"name":"uint208","nodeType":"ElementaryTypeName","src":"4364:7:12","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"4363:9:12"},"scope":4583,"src":"4307:223:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3040,"nodeType":"Block","src":"4899:157:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3021,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"4914:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3024,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4927:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":3023,"name":"uint200","nodeType":"ElementaryTypeName","src":"4927:7:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"}],"id":3022,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4922:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3025,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4922:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint200","typeString":"type(uint200)"}},"id":3026,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4936:3:12","memberName":"max","nodeType":"MemberAccess","src":"4922:17:12","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"src":"4914:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3034,"nodeType":"IfStatement","src":"4910:107:12","trueBody":{"id":3033,"nodeType":"Block","src":"4941:76:12","statements":[{"errorCall":{"arguments":[{"hexValue":"323030","id":3029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4994:3:12","typeDescriptions":{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},"value":"200"},{"id":3030,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"4999:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3028,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"4963:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4963:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3032,"nodeType":"RevertStatement","src":"4956:49:12"}]}},{"expression":{"arguments":[{"id":3037,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"5042:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3036,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5034:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":3035,"name":"uint200","nodeType":"ElementaryTypeName","src":"5034:7:12","typeDescriptions":{}}},"id":3038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5034:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"functionReturnParameters":3020,"id":3039,"nodeType":"Return","src":"5027:21:12"}]},"documentation":{"id":3014,"nodeType":"StructuredDocumentation","src":"4538:289:12","text":" @dev Returns the downcasted uint200 from uint256, reverting on\n overflow (when the input is greater than largest uint200).\n Counterpart to Solidity's `uint200` operator.\n Requirements:\n - input must fit into 200 bits"},"id":3041,"implemented":true,"kind":"function","modifiers":[],"name":"toUint200","nameLocation":"4842:9:12","nodeType":"FunctionDefinition","parameters":{"id":3017,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3016,"mutability":"mutable","name":"value","nameLocation":"4860:5:12","nodeType":"VariableDeclaration","scope":3041,"src":"4852:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3015,"name":"uint256","nodeType":"ElementaryTypeName","src":"4852:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4851:15:12"},"returnParameters":{"id":3020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3019,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3041,"src":"4890:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"},"typeName":{"id":3018,"name":"uint200","nodeType":"ElementaryTypeName","src":"4890:7:12","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"visibility":"internal"}],"src":"4889:9:12"},"scope":4583,"src":"4833:223:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3068,"nodeType":"Block","src":"5425:157:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3049,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"5440:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3052,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5453:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":3051,"name":"uint192","nodeType":"ElementaryTypeName","src":"5453:7:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"}],"id":3050,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5448:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5448:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint192","typeString":"type(uint192)"}},"id":3054,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5462:3:12","memberName":"max","nodeType":"MemberAccess","src":"5448:17:12","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"src":"5440:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3062,"nodeType":"IfStatement","src":"5436:107:12","trueBody":{"id":3061,"nodeType":"Block","src":"5467:76:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313932","id":3057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5520:3:12","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},{"id":3058,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"5525:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3056,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"5489:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5489:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3060,"nodeType":"RevertStatement","src":"5482:49:12"}]}},{"expression":{"arguments":[{"id":3065,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"5568:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3064,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5560:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":3063,"name":"uint192","nodeType":"ElementaryTypeName","src":"5560:7:12","typeDescriptions":{}}},"id":3066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5560:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"functionReturnParameters":3048,"id":3067,"nodeType":"Return","src":"5553:21:12"}]},"documentation":{"id":3042,"nodeType":"StructuredDocumentation","src":"5064:289:12","text":" @dev Returns the downcasted uint192 from uint256, reverting on\n overflow (when the input is greater than largest uint192).\n Counterpart to Solidity's `uint192` operator.\n Requirements:\n - input must fit into 192 bits"},"id":3069,"implemented":true,"kind":"function","modifiers":[],"name":"toUint192","nameLocation":"5368:9:12","nodeType":"FunctionDefinition","parameters":{"id":3045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3044,"mutability":"mutable","name":"value","nameLocation":"5386:5:12","nodeType":"VariableDeclaration","scope":3069,"src":"5378:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3043,"name":"uint256","nodeType":"ElementaryTypeName","src":"5378:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5377:15:12"},"returnParameters":{"id":3048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3047,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3069,"src":"5416:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"},"typeName":{"id":3046,"name":"uint192","nodeType":"ElementaryTypeName","src":"5416:7:12","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"visibility":"internal"}],"src":"5415:9:12"},"scope":4583,"src":"5359:223:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3096,"nodeType":"Block","src":"5951:157:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3077,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"5966:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3080,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5979:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":3079,"name":"uint184","nodeType":"ElementaryTypeName","src":"5979:7:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"}],"id":3078,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5974:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5974:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint184","typeString":"type(uint184)"}},"id":3082,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5988:3:12","memberName":"max","nodeType":"MemberAccess","src":"5974:17:12","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"src":"5966:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3090,"nodeType":"IfStatement","src":"5962:107:12","trueBody":{"id":3089,"nodeType":"Block","src":"5993:76:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313834","id":3085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6046:3:12","typeDescriptions":{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},"value":"184"},{"id":3086,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"6051:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3084,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"6015:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6015:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3088,"nodeType":"RevertStatement","src":"6008:49:12"}]}},{"expression":{"arguments":[{"id":3093,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"6094:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3092,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6086:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":3091,"name":"uint184","nodeType":"ElementaryTypeName","src":"6086:7:12","typeDescriptions":{}}},"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6086:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"functionReturnParameters":3076,"id":3095,"nodeType":"Return","src":"6079:21:12"}]},"documentation":{"id":3070,"nodeType":"StructuredDocumentation","src":"5590:289:12","text":" @dev Returns the downcasted uint184 from uint256, reverting on\n overflow (when the input is greater than largest uint184).\n Counterpart to Solidity's `uint184` operator.\n Requirements:\n - input must fit into 184 bits"},"id":3097,"implemented":true,"kind":"function","modifiers":[],"name":"toUint184","nameLocation":"5894:9:12","nodeType":"FunctionDefinition","parameters":{"id":3073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3072,"mutability":"mutable","name":"value","nameLocation":"5912:5:12","nodeType":"VariableDeclaration","scope":3097,"src":"5904:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3071,"name":"uint256","nodeType":"ElementaryTypeName","src":"5904:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5903:15:12"},"returnParameters":{"id":3076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3075,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3097,"src":"5942:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"},"typeName":{"id":3074,"name":"uint184","nodeType":"ElementaryTypeName","src":"5942:7:12","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"visibility":"internal"}],"src":"5941:9:12"},"scope":4583,"src":"5885:223:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3124,"nodeType":"Block","src":"6477:157:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3105,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3100,"src":"6492:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6505:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":3107,"name":"uint176","nodeType":"ElementaryTypeName","src":"6505:7:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"}],"id":3106,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6500:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6500:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint176","typeString":"type(uint176)"}},"id":3110,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6514:3:12","memberName":"max","nodeType":"MemberAccess","src":"6500:17:12","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"src":"6492:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3118,"nodeType":"IfStatement","src":"6488:107:12","trueBody":{"id":3117,"nodeType":"Block","src":"6519:76:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313736","id":3113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6572:3:12","typeDescriptions":{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},"value":"176"},{"id":3114,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3100,"src":"6577:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3112,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"6541:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6541:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3116,"nodeType":"RevertStatement","src":"6534:49:12"}]}},{"expression":{"arguments":[{"id":3121,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3100,"src":"6620:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3120,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6612:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":3119,"name":"uint176","nodeType":"ElementaryTypeName","src":"6612:7:12","typeDescriptions":{}}},"id":3122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6612:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"functionReturnParameters":3104,"id":3123,"nodeType":"Return","src":"6605:21:12"}]},"documentation":{"id":3098,"nodeType":"StructuredDocumentation","src":"6116:289:12","text":" @dev Returns the downcasted uint176 from uint256, reverting on\n overflow (when the input is greater than largest uint176).\n Counterpart to Solidity's `uint176` operator.\n Requirements:\n - input must fit into 176 bits"},"id":3125,"implemented":true,"kind":"function","modifiers":[],"name":"toUint176","nameLocation":"6420:9:12","nodeType":"FunctionDefinition","parameters":{"id":3101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3100,"mutability":"mutable","name":"value","nameLocation":"6438:5:12","nodeType":"VariableDeclaration","scope":3125,"src":"6430:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3099,"name":"uint256","nodeType":"ElementaryTypeName","src":"6430:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6429:15:12"},"returnParameters":{"id":3104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3103,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3125,"src":"6468:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"},"typeName":{"id":3102,"name":"uint176","nodeType":"ElementaryTypeName","src":"6468:7:12","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"visibility":"internal"}],"src":"6467:9:12"},"scope":4583,"src":"6411:223:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3152,"nodeType":"Block","src":"7003:157:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3133,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3128,"src":"7018:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3136,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7031:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":3135,"name":"uint168","nodeType":"ElementaryTypeName","src":"7031:7:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"}],"id":3134,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"7026:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7026:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint168","typeString":"type(uint168)"}},"id":3138,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7040:3:12","memberName":"max","nodeType":"MemberAccess","src":"7026:17:12","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"src":"7018:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3146,"nodeType":"IfStatement","src":"7014:107:12","trueBody":{"id":3145,"nodeType":"Block","src":"7045:76:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313638","id":3141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7098:3:12","typeDescriptions":{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},"value":"168"},{"id":3142,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3128,"src":"7103:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3140,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"7067:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7067:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3144,"nodeType":"RevertStatement","src":"7060:49:12"}]}},{"expression":{"arguments":[{"id":3149,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3128,"src":"7146:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3148,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7138:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":3147,"name":"uint168","nodeType":"ElementaryTypeName","src":"7138:7:12","typeDescriptions":{}}},"id":3150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7138:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"functionReturnParameters":3132,"id":3151,"nodeType":"Return","src":"7131:21:12"}]},"documentation":{"id":3126,"nodeType":"StructuredDocumentation","src":"6642:289:12","text":" @dev Returns the downcasted uint168 from uint256, reverting on\n overflow (when the input is greater than largest uint168).\n Counterpart to Solidity's `uint168` operator.\n Requirements:\n - input must fit into 168 bits"},"id":3153,"implemented":true,"kind":"function","modifiers":[],"name":"toUint168","nameLocation":"6946:9:12","nodeType":"FunctionDefinition","parameters":{"id":3129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3128,"mutability":"mutable","name":"value","nameLocation":"6964:5:12","nodeType":"VariableDeclaration","scope":3153,"src":"6956:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3127,"name":"uint256","nodeType":"ElementaryTypeName","src":"6956:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6955:15:12"},"returnParameters":{"id":3132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3131,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3153,"src":"6994:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"},"typeName":{"id":3130,"name":"uint168","nodeType":"ElementaryTypeName","src":"6994:7:12","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"visibility":"internal"}],"src":"6993:9:12"},"scope":4583,"src":"6937:223:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3180,"nodeType":"Block","src":"7529:157:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3161,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3156,"src":"7544:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3164,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7557:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3163,"name":"uint160","nodeType":"ElementaryTypeName","src":"7557:7:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"}],"id":3162,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"7552:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7552:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint160","typeString":"type(uint160)"}},"id":3166,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7566:3:12","memberName":"max","nodeType":"MemberAccess","src":"7552:17:12","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"7544:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3174,"nodeType":"IfStatement","src":"7540:107:12","trueBody":{"id":3173,"nodeType":"Block","src":"7571:76:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313630","id":3169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7624:3:12","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},{"id":3170,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3156,"src":"7629:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3168,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"7593:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7593:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3172,"nodeType":"RevertStatement","src":"7586:49:12"}]}},{"expression":{"arguments":[{"id":3177,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3156,"src":"7672:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3176,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7664:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3175,"name":"uint160","nodeType":"ElementaryTypeName","src":"7664:7:12","typeDescriptions":{}}},"id":3178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7664:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":3160,"id":3179,"nodeType":"Return","src":"7657:21:12"}]},"documentation":{"id":3154,"nodeType":"StructuredDocumentation","src":"7168:289:12","text":" @dev Returns the downcasted uint160 from uint256, reverting on\n overflow (when the input is greater than largest uint160).\n Counterpart to Solidity's `uint160` operator.\n Requirements:\n - input must fit into 160 bits"},"id":3181,"implemented":true,"kind":"function","modifiers":[],"name":"toUint160","nameLocation":"7472:9:12","nodeType":"FunctionDefinition","parameters":{"id":3157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3156,"mutability":"mutable","name":"value","nameLocation":"7490:5:12","nodeType":"VariableDeclaration","scope":3181,"src":"7482:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3155,"name":"uint256","nodeType":"ElementaryTypeName","src":"7482:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7481:15:12"},"returnParameters":{"id":3160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3159,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3181,"src":"7520:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":3158,"name":"uint160","nodeType":"ElementaryTypeName","src":"7520:7:12","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"7519:9:12"},"scope":4583,"src":"7463:223:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3208,"nodeType":"Block","src":"8055:157:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3189,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3184,"src":"8070:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3192,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8083:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":3191,"name":"uint152","nodeType":"ElementaryTypeName","src":"8083:7:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"}],"id":3190,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8078:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8078:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint152","typeString":"type(uint152)"}},"id":3194,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8092:3:12","memberName":"max","nodeType":"MemberAccess","src":"8078:17:12","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"src":"8070:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3202,"nodeType":"IfStatement","src":"8066:107:12","trueBody":{"id":3201,"nodeType":"Block","src":"8097:76:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313532","id":3197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8150:3:12","typeDescriptions":{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},"value":"152"},{"id":3198,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3184,"src":"8155:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3196,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"8119:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8119:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3200,"nodeType":"RevertStatement","src":"8112:49:12"}]}},{"expression":{"arguments":[{"id":3205,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3184,"src":"8198:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3204,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8190:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":3203,"name":"uint152","nodeType":"ElementaryTypeName","src":"8190:7:12","typeDescriptions":{}}},"id":3206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8190:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"functionReturnParameters":3188,"id":3207,"nodeType":"Return","src":"8183:21:12"}]},"documentation":{"id":3182,"nodeType":"StructuredDocumentation","src":"7694:289:12","text":" @dev Returns the downcasted uint152 from uint256, reverting on\n overflow (when the input is greater than largest uint152).\n Counterpart to Solidity's `uint152` operator.\n Requirements:\n - input must fit into 152 bits"},"id":3209,"implemented":true,"kind":"function","modifiers":[],"name":"toUint152","nameLocation":"7998:9:12","nodeType":"FunctionDefinition","parameters":{"id":3185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3184,"mutability":"mutable","name":"value","nameLocation":"8016:5:12","nodeType":"VariableDeclaration","scope":3209,"src":"8008:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3183,"name":"uint256","nodeType":"ElementaryTypeName","src":"8008:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8007:15:12"},"returnParameters":{"id":3188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3187,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3209,"src":"8046:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"},"typeName":{"id":3186,"name":"uint152","nodeType":"ElementaryTypeName","src":"8046:7:12","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"visibility":"internal"}],"src":"8045:9:12"},"scope":4583,"src":"7989:223:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3236,"nodeType":"Block","src":"8581:157:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3217,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3212,"src":"8596:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3220,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8609:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":3219,"name":"uint144","nodeType":"ElementaryTypeName","src":"8609:7:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"}],"id":3218,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8604:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8604:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint144","typeString":"type(uint144)"}},"id":3222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8618:3:12","memberName":"max","nodeType":"MemberAccess","src":"8604:17:12","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"src":"8596:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3230,"nodeType":"IfStatement","src":"8592:107:12","trueBody":{"id":3229,"nodeType":"Block","src":"8623:76:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313434","id":3225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8676:3:12","typeDescriptions":{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},"value":"144"},{"id":3226,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3212,"src":"8681:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3224,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"8645:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8645:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3228,"nodeType":"RevertStatement","src":"8638:49:12"}]}},{"expression":{"arguments":[{"id":3233,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3212,"src":"8724:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3232,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8716:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":3231,"name":"uint144","nodeType":"ElementaryTypeName","src":"8716:7:12","typeDescriptions":{}}},"id":3234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8716:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"functionReturnParameters":3216,"id":3235,"nodeType":"Return","src":"8709:21:12"}]},"documentation":{"id":3210,"nodeType":"StructuredDocumentation","src":"8220:289:12","text":" @dev Returns the downcasted uint144 from uint256, reverting on\n overflow (when the input is greater than largest uint144).\n Counterpart to Solidity's `uint144` operator.\n Requirements:\n - input must fit into 144 bits"},"id":3237,"implemented":true,"kind":"function","modifiers":[],"name":"toUint144","nameLocation":"8524:9:12","nodeType":"FunctionDefinition","parameters":{"id":3213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3212,"mutability":"mutable","name":"value","nameLocation":"8542:5:12","nodeType":"VariableDeclaration","scope":3237,"src":"8534:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3211,"name":"uint256","nodeType":"ElementaryTypeName","src":"8534:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8533:15:12"},"returnParameters":{"id":3216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3215,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3237,"src":"8572:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"},"typeName":{"id":3214,"name":"uint144","nodeType":"ElementaryTypeName","src":"8572:7:12","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"visibility":"internal"}],"src":"8571:9:12"},"scope":4583,"src":"8515:223:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3264,"nodeType":"Block","src":"9107:157:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3245,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3240,"src":"9122:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3248,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9135:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":3247,"name":"uint136","nodeType":"ElementaryTypeName","src":"9135:7:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"}],"id":3246,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"9130:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9130:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint136","typeString":"type(uint136)"}},"id":3250,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9144:3:12","memberName":"max","nodeType":"MemberAccess","src":"9130:17:12","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"src":"9122:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3258,"nodeType":"IfStatement","src":"9118:107:12","trueBody":{"id":3257,"nodeType":"Block","src":"9149:76:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313336","id":3253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9202:3:12","typeDescriptions":{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},"value":"136"},{"id":3254,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3240,"src":"9207:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3252,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"9171:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9171:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3256,"nodeType":"RevertStatement","src":"9164:49:12"}]}},{"expression":{"arguments":[{"id":3261,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3240,"src":"9250:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3260,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9242:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":3259,"name":"uint136","nodeType":"ElementaryTypeName","src":"9242:7:12","typeDescriptions":{}}},"id":3262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9242:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"functionReturnParameters":3244,"id":3263,"nodeType":"Return","src":"9235:21:12"}]},"documentation":{"id":3238,"nodeType":"StructuredDocumentation","src":"8746:289:12","text":" @dev Returns the downcasted uint136 from uint256, reverting on\n overflow (when the input is greater than largest uint136).\n Counterpart to Solidity's `uint136` operator.\n Requirements:\n - input must fit into 136 bits"},"id":3265,"implemented":true,"kind":"function","modifiers":[],"name":"toUint136","nameLocation":"9050:9:12","nodeType":"FunctionDefinition","parameters":{"id":3241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3240,"mutability":"mutable","name":"value","nameLocation":"9068:5:12","nodeType":"VariableDeclaration","scope":3265,"src":"9060:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3239,"name":"uint256","nodeType":"ElementaryTypeName","src":"9060:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9059:15:12"},"returnParameters":{"id":3244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3243,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3265,"src":"9098:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"},"typeName":{"id":3242,"name":"uint136","nodeType":"ElementaryTypeName","src":"9098:7:12","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"visibility":"internal"}],"src":"9097:9:12"},"scope":4583,"src":"9041:223:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3292,"nodeType":"Block","src":"9633:157:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3273,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3268,"src":"9648:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9661:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":3275,"name":"uint128","nodeType":"ElementaryTypeName","src":"9661:7:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":3274,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"9656:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9656:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":3278,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9670:3:12","memberName":"max","nodeType":"MemberAccess","src":"9656:17:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"9648:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3286,"nodeType":"IfStatement","src":"9644:107:12","trueBody":{"id":3285,"nodeType":"Block","src":"9675:76:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313238","id":3281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9728:3:12","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},{"id":3282,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3268,"src":"9733:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3280,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"9697:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9697:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3284,"nodeType":"RevertStatement","src":"9690:49:12"}]}},{"expression":{"arguments":[{"id":3289,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3268,"src":"9776:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3288,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9768:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":3287,"name":"uint128","nodeType":"ElementaryTypeName","src":"9768:7:12","typeDescriptions":{}}},"id":3290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9768:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":3272,"id":3291,"nodeType":"Return","src":"9761:21:12"}]},"documentation":{"id":3266,"nodeType":"StructuredDocumentation","src":"9272:289:12","text":" @dev Returns the downcasted uint128 from uint256, reverting on\n overflow (when the input is greater than largest uint128).\n Counterpart to Solidity's `uint128` operator.\n Requirements:\n - input must fit into 128 bits"},"id":3293,"implemented":true,"kind":"function","modifiers":[],"name":"toUint128","nameLocation":"9576:9:12","nodeType":"FunctionDefinition","parameters":{"id":3269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3268,"mutability":"mutable","name":"value","nameLocation":"9594:5:12","nodeType":"VariableDeclaration","scope":3293,"src":"9586:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3267,"name":"uint256","nodeType":"ElementaryTypeName","src":"9586:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9585:15:12"},"returnParameters":{"id":3272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3271,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3293,"src":"9624:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":3270,"name":"uint128","nodeType":"ElementaryTypeName","src":"9624:7:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"9623:9:12"},"scope":4583,"src":"9567:223:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3320,"nodeType":"Block","src":"10159:157:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3301,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3296,"src":"10174:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3304,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10187:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":3303,"name":"uint120","nodeType":"ElementaryTypeName","src":"10187:7:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"}],"id":3302,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10182:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10182:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint120","typeString":"type(uint120)"}},"id":3306,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10196:3:12","memberName":"max","nodeType":"MemberAccess","src":"10182:17:12","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"src":"10174:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3314,"nodeType":"IfStatement","src":"10170:107:12","trueBody":{"id":3313,"nodeType":"Block","src":"10201:76:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313230","id":3309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10254:3:12","typeDescriptions":{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},"value":"120"},{"id":3310,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3296,"src":"10259:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3308,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"10223:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10223:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3312,"nodeType":"RevertStatement","src":"10216:49:12"}]}},{"expression":{"arguments":[{"id":3317,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3296,"src":"10302:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3316,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10294:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":3315,"name":"uint120","nodeType":"ElementaryTypeName","src":"10294:7:12","typeDescriptions":{}}},"id":3318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10294:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"functionReturnParameters":3300,"id":3319,"nodeType":"Return","src":"10287:21:12"}]},"documentation":{"id":3294,"nodeType":"StructuredDocumentation","src":"9798:289:12","text":" @dev Returns the downcasted uint120 from uint256, reverting on\n overflow (when the input is greater than largest uint120).\n Counterpart to Solidity's `uint120` operator.\n Requirements:\n - input must fit into 120 bits"},"id":3321,"implemented":true,"kind":"function","modifiers":[],"name":"toUint120","nameLocation":"10102:9:12","nodeType":"FunctionDefinition","parameters":{"id":3297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3296,"mutability":"mutable","name":"value","nameLocation":"10120:5:12","nodeType":"VariableDeclaration","scope":3321,"src":"10112:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3295,"name":"uint256","nodeType":"ElementaryTypeName","src":"10112:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10111:15:12"},"returnParameters":{"id":3300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3299,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3321,"src":"10150:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"},"typeName":{"id":3298,"name":"uint120","nodeType":"ElementaryTypeName","src":"10150:7:12","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"visibility":"internal"}],"src":"10149:9:12"},"scope":4583,"src":"10093:223:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3348,"nodeType":"Block","src":"10685:157:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3329,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3324,"src":"10700:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3332,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10713:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":3331,"name":"uint112","nodeType":"ElementaryTypeName","src":"10713:7:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"}],"id":3330,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10708:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10708:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint112","typeString":"type(uint112)"}},"id":3334,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10722:3:12","memberName":"max","nodeType":"MemberAccess","src":"10708:17:12","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"src":"10700:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3342,"nodeType":"IfStatement","src":"10696:107:12","trueBody":{"id":3341,"nodeType":"Block","src":"10727:76:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313132","id":3337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10780:3:12","typeDescriptions":{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},"value":"112"},{"id":3338,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3324,"src":"10785:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3336,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"10749:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10749:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3340,"nodeType":"RevertStatement","src":"10742:49:12"}]}},{"expression":{"arguments":[{"id":3345,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3324,"src":"10828:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3344,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10820:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":3343,"name":"uint112","nodeType":"ElementaryTypeName","src":"10820:7:12","typeDescriptions":{}}},"id":3346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10820:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"functionReturnParameters":3328,"id":3347,"nodeType":"Return","src":"10813:21:12"}]},"documentation":{"id":3322,"nodeType":"StructuredDocumentation","src":"10324:289:12","text":" @dev Returns the downcasted uint112 from uint256, reverting on\n overflow (when the input is greater than largest uint112).\n Counterpart to Solidity's `uint112` operator.\n Requirements:\n - input must fit into 112 bits"},"id":3349,"implemented":true,"kind":"function","modifiers":[],"name":"toUint112","nameLocation":"10628:9:12","nodeType":"FunctionDefinition","parameters":{"id":3325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3324,"mutability":"mutable","name":"value","nameLocation":"10646:5:12","nodeType":"VariableDeclaration","scope":3349,"src":"10638:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3323,"name":"uint256","nodeType":"ElementaryTypeName","src":"10638:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10637:15:12"},"returnParameters":{"id":3328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3327,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3349,"src":"10676:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":3326,"name":"uint112","nodeType":"ElementaryTypeName","src":"10676:7:12","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"}],"src":"10675:9:12"},"scope":4583,"src":"10619:223:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3376,"nodeType":"Block","src":"11211:157:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3357,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3352,"src":"11226:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3360,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11239:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":3359,"name":"uint104","nodeType":"ElementaryTypeName","src":"11239:7:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"}],"id":3358,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11234:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11234:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint104","typeString":"type(uint104)"}},"id":3362,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11248:3:12","memberName":"max","nodeType":"MemberAccess","src":"11234:17:12","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"src":"11226:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3370,"nodeType":"IfStatement","src":"11222:107:12","trueBody":{"id":3369,"nodeType":"Block","src":"11253:76:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313034","id":3365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11306:3:12","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},{"id":3366,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3352,"src":"11311:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3364,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"11275:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11275:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3368,"nodeType":"RevertStatement","src":"11268:49:12"}]}},{"expression":{"arguments":[{"id":3373,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3352,"src":"11354:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3372,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11346:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":3371,"name":"uint104","nodeType":"ElementaryTypeName","src":"11346:7:12","typeDescriptions":{}}},"id":3374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11346:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"functionReturnParameters":3356,"id":3375,"nodeType":"Return","src":"11339:21:12"}]},"documentation":{"id":3350,"nodeType":"StructuredDocumentation","src":"10850:289:12","text":" @dev Returns the downcasted uint104 from uint256, reverting on\n overflow (when the input is greater than largest uint104).\n Counterpart to Solidity's `uint104` operator.\n Requirements:\n - input must fit into 104 bits"},"id":3377,"implemented":true,"kind":"function","modifiers":[],"name":"toUint104","nameLocation":"11154:9:12","nodeType":"FunctionDefinition","parameters":{"id":3353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3352,"mutability":"mutable","name":"value","nameLocation":"11172:5:12","nodeType":"VariableDeclaration","scope":3377,"src":"11164:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3351,"name":"uint256","nodeType":"ElementaryTypeName","src":"11164:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11163:15:12"},"returnParameters":{"id":3356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3355,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3377,"src":"11202:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"},"typeName":{"id":3354,"name":"uint104","nodeType":"ElementaryTypeName","src":"11202:7:12","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"visibility":"internal"}],"src":"11201:9:12"},"scope":4583,"src":"11145:223:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3404,"nodeType":"Block","src":"11731:154:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3385,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3380,"src":"11746:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3388,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11759:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":3387,"name":"uint96","nodeType":"ElementaryTypeName","src":"11759:6:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"}],"id":3386,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11754:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11754:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint96","typeString":"type(uint96)"}},"id":3390,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11767:3:12","memberName":"max","nodeType":"MemberAccess","src":"11754:16:12","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"11746:24:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3398,"nodeType":"IfStatement","src":"11742:105:12","trueBody":{"id":3397,"nodeType":"Block","src":"11772:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"3936","id":3393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11825:2:12","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},{"id":3394,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3380,"src":"11829:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3392,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"11794:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11794:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3396,"nodeType":"RevertStatement","src":"11787:48:12"}]}},{"expression":{"arguments":[{"id":3401,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3380,"src":"11871:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3400,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11864:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":3399,"name":"uint96","nodeType":"ElementaryTypeName","src":"11864:6:12","typeDescriptions":{}}},"id":3402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11864:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"functionReturnParameters":3384,"id":3403,"nodeType":"Return","src":"11857:20:12"}]},"documentation":{"id":3378,"nodeType":"StructuredDocumentation","src":"11376:285:12","text":" @dev Returns the downcasted uint96 from uint256, reverting on\n overflow (when the input is greater than largest uint96).\n Counterpart to Solidity's `uint96` operator.\n Requirements:\n - input must fit into 96 bits"},"id":3405,"implemented":true,"kind":"function","modifiers":[],"name":"toUint96","nameLocation":"11676:8:12","nodeType":"FunctionDefinition","parameters":{"id":3381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3380,"mutability":"mutable","name":"value","nameLocation":"11693:5:12","nodeType":"VariableDeclaration","scope":3405,"src":"11685:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3379,"name":"uint256","nodeType":"ElementaryTypeName","src":"11685:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11684:15:12"},"returnParameters":{"id":3384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3383,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3405,"src":"11723:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3382,"name":"uint96","nodeType":"ElementaryTypeName","src":"11723:6:12","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"11722:8:12"},"scope":4583,"src":"11667:218:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3432,"nodeType":"Block","src":"12248:154:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3413,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3408,"src":"12263:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3416,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12276:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":3415,"name":"uint88","nodeType":"ElementaryTypeName","src":"12276:6:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"}],"id":3414,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"12271:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12271:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint88","typeString":"type(uint88)"}},"id":3418,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12284:3:12","memberName":"max","nodeType":"MemberAccess","src":"12271:16:12","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"src":"12263:24:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3426,"nodeType":"IfStatement","src":"12259:105:12","trueBody":{"id":3425,"nodeType":"Block","src":"12289:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"3838","id":3421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12342:2:12","typeDescriptions":{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},"value":"88"},{"id":3422,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3408,"src":"12346:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3420,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"12311:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12311:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3424,"nodeType":"RevertStatement","src":"12304:48:12"}]}},{"expression":{"arguments":[{"id":3429,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3408,"src":"12388:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3428,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12381:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":3427,"name":"uint88","nodeType":"ElementaryTypeName","src":"12381:6:12","typeDescriptions":{}}},"id":3430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12381:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"functionReturnParameters":3412,"id":3431,"nodeType":"Return","src":"12374:20:12"}]},"documentation":{"id":3406,"nodeType":"StructuredDocumentation","src":"11893:285:12","text":" @dev Returns the downcasted uint88 from uint256, reverting on\n overflow (when the input is greater than largest uint88).\n Counterpart to Solidity's `uint88` operator.\n Requirements:\n - input must fit into 88 bits"},"id":3433,"implemented":true,"kind":"function","modifiers":[],"name":"toUint88","nameLocation":"12193:8:12","nodeType":"FunctionDefinition","parameters":{"id":3409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3408,"mutability":"mutable","name":"value","nameLocation":"12210:5:12","nodeType":"VariableDeclaration","scope":3433,"src":"12202:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3407,"name":"uint256","nodeType":"ElementaryTypeName","src":"12202:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12201:15:12"},"returnParameters":{"id":3412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3411,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3433,"src":"12240:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"},"typeName":{"id":3410,"name":"uint88","nodeType":"ElementaryTypeName","src":"12240:6:12","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"visibility":"internal"}],"src":"12239:8:12"},"scope":4583,"src":"12184:218:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3460,"nodeType":"Block","src":"12765:154:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3441,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"12780:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3444,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12793:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":3443,"name":"uint80","nodeType":"ElementaryTypeName","src":"12793:6:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"}],"id":3442,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"12788:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12788:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint80","typeString":"type(uint80)"}},"id":3446,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12801:3:12","memberName":"max","nodeType":"MemberAccess","src":"12788:16:12","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"src":"12780:24:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3454,"nodeType":"IfStatement","src":"12776:105:12","trueBody":{"id":3453,"nodeType":"Block","src":"12806:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"3830","id":3449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12859:2:12","typeDescriptions":{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},"value":"80"},{"id":3450,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"12863:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3448,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"12828:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12828:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3452,"nodeType":"RevertStatement","src":"12821:48:12"}]}},{"expression":{"arguments":[{"id":3457,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"12905:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3456,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12898:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":3455,"name":"uint80","nodeType":"ElementaryTypeName","src":"12898:6:12","typeDescriptions":{}}},"id":3458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12898:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"functionReturnParameters":3440,"id":3459,"nodeType":"Return","src":"12891:20:12"}]},"documentation":{"id":3434,"nodeType":"StructuredDocumentation","src":"12410:285:12","text":" @dev Returns the downcasted uint80 from uint256, reverting on\n overflow (when the input is greater than largest uint80).\n Counterpart to Solidity's `uint80` operator.\n Requirements:\n - input must fit into 80 bits"},"id":3461,"implemented":true,"kind":"function","modifiers":[],"name":"toUint80","nameLocation":"12710:8:12","nodeType":"FunctionDefinition","parameters":{"id":3437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3436,"mutability":"mutable","name":"value","nameLocation":"12727:5:12","nodeType":"VariableDeclaration","scope":3461,"src":"12719:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3435,"name":"uint256","nodeType":"ElementaryTypeName","src":"12719:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12718:15:12"},"returnParameters":{"id":3440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3439,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3461,"src":"12757:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":3438,"name":"uint80","nodeType":"ElementaryTypeName","src":"12757:6:12","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"}],"src":"12756:8:12"},"scope":4583,"src":"12701:218:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3488,"nodeType":"Block","src":"13282:154:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3469,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3464,"src":"13297:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3472,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13310:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":3471,"name":"uint72","nodeType":"ElementaryTypeName","src":"13310:6:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"}],"id":3470,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"13305:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13305:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint72","typeString":"type(uint72)"}},"id":3474,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13318:3:12","memberName":"max","nodeType":"MemberAccess","src":"13305:16:12","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"src":"13297:24:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3482,"nodeType":"IfStatement","src":"13293:105:12","trueBody":{"id":3481,"nodeType":"Block","src":"13323:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"3732","id":3477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13376:2:12","typeDescriptions":{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},"value":"72"},{"id":3478,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3464,"src":"13380:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3476,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"13345:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13345:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3480,"nodeType":"RevertStatement","src":"13338:48:12"}]}},{"expression":{"arguments":[{"id":3485,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3464,"src":"13422:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3484,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13415:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":3483,"name":"uint72","nodeType":"ElementaryTypeName","src":"13415:6:12","typeDescriptions":{}}},"id":3486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13415:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"functionReturnParameters":3468,"id":3487,"nodeType":"Return","src":"13408:20:12"}]},"documentation":{"id":3462,"nodeType":"StructuredDocumentation","src":"12927:285:12","text":" @dev Returns the downcasted uint72 from uint256, reverting on\n overflow (when the input is greater than largest uint72).\n Counterpart to Solidity's `uint72` operator.\n Requirements:\n - input must fit into 72 bits"},"id":3489,"implemented":true,"kind":"function","modifiers":[],"name":"toUint72","nameLocation":"13227:8:12","nodeType":"FunctionDefinition","parameters":{"id":3465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3464,"mutability":"mutable","name":"value","nameLocation":"13244:5:12","nodeType":"VariableDeclaration","scope":3489,"src":"13236:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3463,"name":"uint256","nodeType":"ElementaryTypeName","src":"13236:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13235:15:12"},"returnParameters":{"id":3468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3467,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3489,"src":"13274:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"},"typeName":{"id":3466,"name":"uint72","nodeType":"ElementaryTypeName","src":"13274:6:12","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"visibility":"internal"}],"src":"13273:8:12"},"scope":4583,"src":"13218:218:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3516,"nodeType":"Block","src":"13799:154:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3497,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3492,"src":"13814:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3500,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13827:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":3499,"name":"uint64","nodeType":"ElementaryTypeName","src":"13827:6:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":3498,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"13822:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13822:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":3502,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13835:3:12","memberName":"max","nodeType":"MemberAccess","src":"13822:16:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"13814:24:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3510,"nodeType":"IfStatement","src":"13810:105:12","trueBody":{"id":3509,"nodeType":"Block","src":"13840:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"3634","id":3505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13893:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},{"id":3506,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3492,"src":"13897:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3504,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"13862:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13862:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3508,"nodeType":"RevertStatement","src":"13855:48:12"}]}},{"expression":{"arguments":[{"id":3513,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3492,"src":"13939:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3512,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13932:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":3511,"name":"uint64","nodeType":"ElementaryTypeName","src":"13932:6:12","typeDescriptions":{}}},"id":3514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13932:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":3496,"id":3515,"nodeType":"Return","src":"13925:20:12"}]},"documentation":{"id":3490,"nodeType":"StructuredDocumentation","src":"13444:285:12","text":" @dev Returns the downcasted uint64 from uint256, reverting on\n overflow (when the input is greater than largest uint64).\n Counterpart to Solidity's `uint64` operator.\n Requirements:\n - input must fit into 64 bits"},"id":3517,"implemented":true,"kind":"function","modifiers":[],"name":"toUint64","nameLocation":"13744:8:12","nodeType":"FunctionDefinition","parameters":{"id":3493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3492,"mutability":"mutable","name":"value","nameLocation":"13761:5:12","nodeType":"VariableDeclaration","scope":3517,"src":"13753:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3491,"name":"uint256","nodeType":"ElementaryTypeName","src":"13753:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13752:15:12"},"returnParameters":{"id":3496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3495,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3517,"src":"13791:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3494,"name":"uint64","nodeType":"ElementaryTypeName","src":"13791:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"13790:8:12"},"scope":4583,"src":"13735:218:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3544,"nodeType":"Block","src":"14316:154:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3525,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3520,"src":"14331:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3528,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14344:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":3527,"name":"uint56","nodeType":"ElementaryTypeName","src":"14344:6:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"}],"id":3526,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"14339:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14339:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint56","typeString":"type(uint56)"}},"id":3530,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14352:3:12","memberName":"max","nodeType":"MemberAccess","src":"14339:16:12","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"src":"14331:24:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3538,"nodeType":"IfStatement","src":"14327:105:12","trueBody":{"id":3537,"nodeType":"Block","src":"14357:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"3536","id":3533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14410:2:12","typeDescriptions":{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},"value":"56"},{"id":3534,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3520,"src":"14414:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3532,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"14379:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14379:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3536,"nodeType":"RevertStatement","src":"14372:48:12"}]}},{"expression":{"arguments":[{"id":3541,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3520,"src":"14456:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3540,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14449:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":3539,"name":"uint56","nodeType":"ElementaryTypeName","src":"14449:6:12","typeDescriptions":{}}},"id":3542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14449:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"functionReturnParameters":3524,"id":3543,"nodeType":"Return","src":"14442:20:12"}]},"documentation":{"id":3518,"nodeType":"StructuredDocumentation","src":"13961:285:12","text":" @dev Returns the downcasted uint56 from uint256, reverting on\n overflow (when the input is greater than largest uint56).\n Counterpart to Solidity's `uint56` operator.\n Requirements:\n - input must fit into 56 bits"},"id":3545,"implemented":true,"kind":"function","modifiers":[],"name":"toUint56","nameLocation":"14261:8:12","nodeType":"FunctionDefinition","parameters":{"id":3521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3520,"mutability":"mutable","name":"value","nameLocation":"14278:5:12","nodeType":"VariableDeclaration","scope":3545,"src":"14270:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3519,"name":"uint256","nodeType":"ElementaryTypeName","src":"14270:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14269:15:12"},"returnParameters":{"id":3524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3523,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3545,"src":"14308:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"},"typeName":{"id":3522,"name":"uint56","nodeType":"ElementaryTypeName","src":"14308:6:12","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"visibility":"internal"}],"src":"14307:8:12"},"scope":4583,"src":"14252:218:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3572,"nodeType":"Block","src":"14833:154:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3553,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"14848:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3556,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14861:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":3555,"name":"uint48","nodeType":"ElementaryTypeName","src":"14861:6:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"}],"id":3554,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"14856:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14856:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint48","typeString":"type(uint48)"}},"id":3558,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14869:3:12","memberName":"max","nodeType":"MemberAccess","src":"14856:16:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"14848:24:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3566,"nodeType":"IfStatement","src":"14844:105:12","trueBody":{"id":3565,"nodeType":"Block","src":"14874:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"3438","id":3561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14927:2:12","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},{"id":3562,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"14931:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3560,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"14896:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14896:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3564,"nodeType":"RevertStatement","src":"14889:48:12"}]}},{"expression":{"arguments":[{"id":3569,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"14973:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3568,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14966:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":3567,"name":"uint48","nodeType":"ElementaryTypeName","src":"14966:6:12","typeDescriptions":{}}},"id":3570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14966:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"functionReturnParameters":3552,"id":3571,"nodeType":"Return","src":"14959:20:12"}]},"documentation":{"id":3546,"nodeType":"StructuredDocumentation","src":"14478:285:12","text":" @dev Returns the downcasted uint48 from uint256, reverting on\n overflow (when the input is greater than largest uint48).\n Counterpart to Solidity's `uint48` operator.\n Requirements:\n - input must fit into 48 bits"},"id":3573,"implemented":true,"kind":"function","modifiers":[],"name":"toUint48","nameLocation":"14778:8:12","nodeType":"FunctionDefinition","parameters":{"id":3549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3548,"mutability":"mutable","name":"value","nameLocation":"14795:5:12","nodeType":"VariableDeclaration","scope":3573,"src":"14787:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3547,"name":"uint256","nodeType":"ElementaryTypeName","src":"14787:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14786:15:12"},"returnParameters":{"id":3552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3551,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3573,"src":"14825:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":3550,"name":"uint48","nodeType":"ElementaryTypeName","src":"14825:6:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"14824:8:12"},"scope":4583,"src":"14769:218:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3600,"nodeType":"Block","src":"15350:154:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3581,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3576,"src":"15365:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3584,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15378:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":3583,"name":"uint40","nodeType":"ElementaryTypeName","src":"15378:6:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"}],"id":3582,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"15373:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15373:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint40","typeString":"type(uint40)"}},"id":3586,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15386:3:12","memberName":"max","nodeType":"MemberAccess","src":"15373:16:12","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"src":"15365:24:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3594,"nodeType":"IfStatement","src":"15361:105:12","trueBody":{"id":3593,"nodeType":"Block","src":"15391:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"3430","id":3589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15444:2:12","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},{"id":3590,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3576,"src":"15448:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3588,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"15413:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15413:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3592,"nodeType":"RevertStatement","src":"15406:48:12"}]}},{"expression":{"arguments":[{"id":3597,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3576,"src":"15490:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3596,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15483:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":3595,"name":"uint40","nodeType":"ElementaryTypeName","src":"15483:6:12","typeDescriptions":{}}},"id":3598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15483:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"functionReturnParameters":3580,"id":3599,"nodeType":"Return","src":"15476:20:12"}]},"documentation":{"id":3574,"nodeType":"StructuredDocumentation","src":"14995:285:12","text":" @dev Returns the downcasted uint40 from uint256, reverting on\n overflow (when the input is greater than largest uint40).\n Counterpart to Solidity's `uint40` operator.\n Requirements:\n - input must fit into 40 bits"},"id":3601,"implemented":true,"kind":"function","modifiers":[],"name":"toUint40","nameLocation":"15295:8:12","nodeType":"FunctionDefinition","parameters":{"id":3577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3576,"mutability":"mutable","name":"value","nameLocation":"15312:5:12","nodeType":"VariableDeclaration","scope":3601,"src":"15304:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3575,"name":"uint256","nodeType":"ElementaryTypeName","src":"15304:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15303:15:12"},"returnParameters":{"id":3580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3579,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3601,"src":"15342:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"},"typeName":{"id":3578,"name":"uint40","nodeType":"ElementaryTypeName","src":"15342:6:12","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"visibility":"internal"}],"src":"15341:8:12"},"scope":4583,"src":"15286:218:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3628,"nodeType":"Block","src":"15867:154:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3609,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3604,"src":"15882:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3612,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15895:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":3611,"name":"uint32","nodeType":"ElementaryTypeName","src":"15895:6:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"}],"id":3610,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"15890:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15890:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint32","typeString":"type(uint32)"}},"id":3614,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15903:3:12","memberName":"max","nodeType":"MemberAccess","src":"15890:16:12","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"15882:24:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3622,"nodeType":"IfStatement","src":"15878:105:12","trueBody":{"id":3621,"nodeType":"Block","src":"15908:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"3332","id":3617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15961:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},{"id":3618,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3604,"src":"15965:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3616,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"15930:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15930:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3620,"nodeType":"RevertStatement","src":"15923:48:12"}]}},{"expression":{"arguments":[{"id":3625,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3604,"src":"16007:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3624,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16000:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":3623,"name":"uint32","nodeType":"ElementaryTypeName","src":"16000:6:12","typeDescriptions":{}}},"id":3626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16000:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":3608,"id":3627,"nodeType":"Return","src":"15993:20:12"}]},"documentation":{"id":3602,"nodeType":"StructuredDocumentation","src":"15512:285:12","text":" @dev Returns the downcasted uint32 from uint256, reverting on\n overflow (when the input is greater than largest uint32).\n Counterpart to Solidity's `uint32` operator.\n Requirements:\n - input must fit into 32 bits"},"id":3629,"implemented":true,"kind":"function","modifiers":[],"name":"toUint32","nameLocation":"15812:8:12","nodeType":"FunctionDefinition","parameters":{"id":3605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3604,"mutability":"mutable","name":"value","nameLocation":"15829:5:12","nodeType":"VariableDeclaration","scope":3629,"src":"15821:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3603,"name":"uint256","nodeType":"ElementaryTypeName","src":"15821:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15820:15:12"},"returnParameters":{"id":3608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3607,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3629,"src":"15859:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3606,"name":"uint32","nodeType":"ElementaryTypeName","src":"15859:6:12","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"15858:8:12"},"scope":4583,"src":"15803:218:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3656,"nodeType":"Block","src":"16384:154:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3637,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3632,"src":"16399:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3640,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16412:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":3639,"name":"uint24","nodeType":"ElementaryTypeName","src":"16412:6:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"}],"id":3638,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"16407:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16407:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint24","typeString":"type(uint24)"}},"id":3642,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16420:3:12","memberName":"max","nodeType":"MemberAccess","src":"16407:16:12","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"16399:24:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3650,"nodeType":"IfStatement","src":"16395:105:12","trueBody":{"id":3649,"nodeType":"Block","src":"16425:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"3234","id":3645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16478:2:12","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},{"id":3646,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3632,"src":"16482:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3644,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"16447:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16447:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3648,"nodeType":"RevertStatement","src":"16440:48:12"}]}},{"expression":{"arguments":[{"id":3653,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3632,"src":"16524:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3652,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16517:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":3651,"name":"uint24","nodeType":"ElementaryTypeName","src":"16517:6:12","typeDescriptions":{}}},"id":3654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16517:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"functionReturnParameters":3636,"id":3655,"nodeType":"Return","src":"16510:20:12"}]},"documentation":{"id":3630,"nodeType":"StructuredDocumentation","src":"16029:285:12","text":" @dev Returns the downcasted uint24 from uint256, reverting on\n overflow (when the input is greater than largest uint24).\n Counterpart to Solidity's `uint24` operator.\n Requirements:\n - input must fit into 24 bits"},"id":3657,"implemented":true,"kind":"function","modifiers":[],"name":"toUint24","nameLocation":"16329:8:12","nodeType":"FunctionDefinition","parameters":{"id":3633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3632,"mutability":"mutable","name":"value","nameLocation":"16346:5:12","nodeType":"VariableDeclaration","scope":3657,"src":"16338:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3631,"name":"uint256","nodeType":"ElementaryTypeName","src":"16338:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16337:15:12"},"returnParameters":{"id":3636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3635,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3657,"src":"16376:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":3634,"name":"uint24","nodeType":"ElementaryTypeName","src":"16376:6:12","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"16375:8:12"},"scope":4583,"src":"16320:218:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3684,"nodeType":"Block","src":"16901:154:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3665,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3660,"src":"16916:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3668,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16929:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":3667,"name":"uint16","nodeType":"ElementaryTypeName","src":"16929:6:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"}],"id":3666,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"16924:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16924:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint16","typeString":"type(uint16)"}},"id":3670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16937:3:12","memberName":"max","nodeType":"MemberAccess","src":"16924:16:12","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"16916:24:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3678,"nodeType":"IfStatement","src":"16912:105:12","trueBody":{"id":3677,"nodeType":"Block","src":"16942:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"3136","id":3673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16995:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},{"id":3674,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3660,"src":"16999:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3672,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"16964:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16964:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3676,"nodeType":"RevertStatement","src":"16957:48:12"}]}},{"expression":{"arguments":[{"id":3681,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3660,"src":"17041:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3680,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17034:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":3679,"name":"uint16","nodeType":"ElementaryTypeName","src":"17034:6:12","typeDescriptions":{}}},"id":3682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17034:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":3664,"id":3683,"nodeType":"Return","src":"17027:20:12"}]},"documentation":{"id":3658,"nodeType":"StructuredDocumentation","src":"16546:285:12","text":" @dev Returns the downcasted uint16 from uint256, reverting on\n overflow (when the input is greater than largest uint16).\n Counterpart to Solidity's `uint16` operator.\n Requirements:\n - input must fit into 16 bits"},"id":3685,"implemented":true,"kind":"function","modifiers":[],"name":"toUint16","nameLocation":"16846:8:12","nodeType":"FunctionDefinition","parameters":{"id":3661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3660,"mutability":"mutable","name":"value","nameLocation":"16863:5:12","nodeType":"VariableDeclaration","scope":3685,"src":"16855:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3659,"name":"uint256","nodeType":"ElementaryTypeName","src":"16855:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16854:15:12"},"returnParameters":{"id":3664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3663,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3685,"src":"16893:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3662,"name":"uint16","nodeType":"ElementaryTypeName","src":"16893:6:12","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"16892:8:12"},"scope":4583,"src":"16837:218:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3712,"nodeType":"Block","src":"17412:151:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3693,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3688,"src":"17427:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3696,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17440:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3695,"name":"uint8","nodeType":"ElementaryTypeName","src":"17440:5:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":3694,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"17435:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17435:11:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":3698,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17447:3:12","memberName":"max","nodeType":"MemberAccess","src":"17435:15:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"17427:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3706,"nodeType":"IfStatement","src":"17423:103:12","trueBody":{"id":3705,"nodeType":"Block","src":"17452:74:12","statements":[{"errorCall":{"arguments":[{"hexValue":"38","id":3701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17505:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"id":3702,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3688,"src":"17508:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3700,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"17474:30:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17474:40:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3704,"nodeType":"RevertStatement","src":"17467:47:12"}]}},{"expression":{"arguments":[{"id":3709,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3688,"src":"17549:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3708,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17543:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3707,"name":"uint8","nodeType":"ElementaryTypeName","src":"17543:5:12","typeDescriptions":{}}},"id":3710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17543:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":3692,"id":3711,"nodeType":"Return","src":"17536:19:12"}]},"documentation":{"id":3686,"nodeType":"StructuredDocumentation","src":"17063:281:12","text":" @dev Returns the downcasted uint8 from uint256, reverting on\n overflow (when the input is greater than largest uint8).\n Counterpart to Solidity's `uint8` operator.\n Requirements:\n - input must fit into 8 bits"},"id":3713,"implemented":true,"kind":"function","modifiers":[],"name":"toUint8","nameLocation":"17359:7:12","nodeType":"FunctionDefinition","parameters":{"id":3689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3688,"mutability":"mutable","name":"value","nameLocation":"17375:5:12","nodeType":"VariableDeclaration","scope":3713,"src":"17367:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3687,"name":"uint256","nodeType":"ElementaryTypeName","src":"17367:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17366:15:12"},"returnParameters":{"id":3692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3691,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3713,"src":"17405:5:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3690,"name":"uint8","nodeType":"ElementaryTypeName","src":"17405:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"17404:7:12"},"scope":4583,"src":"17350:213:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3735,"nodeType":"Block","src":"17808:133:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3721,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3716,"src":"17823:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":3722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17831:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17823:9:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3729,"nodeType":"IfStatement","src":"17819:83:12","trueBody":{"id":3728,"nodeType":"Block","src":"17834:68:12","statements":[{"errorCall":{"arguments":[{"id":3725,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3716,"src":"17884:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3724,"name":"SafeCastOverflowedIntToUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2833,"src":"17856:27:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_int256_$returns$__$","typeString":"function (int256) pure"}},"id":3726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17856:34:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3727,"nodeType":"RevertStatement","src":"17849:41:12"}]}},{"expression":{"arguments":[{"id":3732,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3716,"src":"17927:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3731,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17919:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3730,"name":"uint256","nodeType":"ElementaryTypeName","src":"17919:7:12","typeDescriptions":{}}},"id":3733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17919:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3720,"id":3734,"nodeType":"Return","src":"17912:21:12"}]},"documentation":{"id":3714,"nodeType":"StructuredDocumentation","src":"17571:166:12","text":" @dev Converts a signed int256 into an unsigned uint256.\n Requirements:\n - input must be greater than or equal to 0."},"id":3736,"implemented":true,"kind":"function","modifiers":[],"name":"toUint256","nameLocation":"17752:9:12","nodeType":"FunctionDefinition","parameters":{"id":3717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3716,"mutability":"mutable","name":"value","nameLocation":"17769:5:12","nodeType":"VariableDeclaration","scope":3736,"src":"17762:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3715,"name":"int256","nodeType":"ElementaryTypeName","src":"17762:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17761:14:12"},"returnParameters":{"id":3720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3719,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3736,"src":"17799:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3718,"name":"uint256","nodeType":"ElementaryTypeName","src":"17799:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17798:9:12"},"scope":4583,"src":"17743:198:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3761,"nodeType":"Block","src":"18351:155:12","statements":[{"expression":{"id":3749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3744,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3742,"src":"18362:10:12","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3747,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"18382:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3746,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18375:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int248_$","typeString":"type(int248)"},"typeName":{"id":3745,"name":"int248","nodeType":"ElementaryTypeName","src":"18375:6:12","typeDescriptions":{}}},"id":3748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18375:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"src":"18362:26:12","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"id":3750,"nodeType":"ExpressionStatement","src":"18362:26:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3751,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3742,"src":"18403:10:12","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3752,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"18417:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18403:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3760,"nodeType":"IfStatement","src":"18399:100:12","trueBody":{"id":3759,"nodeType":"Block","src":"18424:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"323438","id":3755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18476:3:12","typeDescriptions":{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},"value":"248"},{"id":3756,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"18481:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3754,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"18446:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":3757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18446:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3758,"nodeType":"RevertStatement","src":"18439:48:12"}]}}]},"documentation":{"id":3737,"nodeType":"StructuredDocumentation","src":"17949:322:12","text":" @dev Returns the downcasted int248 from int256, reverting on\n overflow (when the input is less than smallest int248 or\n greater than largest int248).\n Counterpart to Solidity's `int248` operator.\n Requirements:\n - input must fit into 248 bits"},"id":3762,"implemented":true,"kind":"function","modifiers":[],"name":"toInt248","nameLocation":"18286:8:12","nodeType":"FunctionDefinition","parameters":{"id":3740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3739,"mutability":"mutable","name":"value","nameLocation":"18302:5:12","nodeType":"VariableDeclaration","scope":3762,"src":"18295:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3738,"name":"int256","nodeType":"ElementaryTypeName","src":"18295:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18294:14:12"},"returnParameters":{"id":3743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3742,"mutability":"mutable","name":"downcasted","nameLocation":"18339:10:12","nodeType":"VariableDeclaration","scope":3762,"src":"18332:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"},"typeName":{"id":3741,"name":"int248","nodeType":"ElementaryTypeName","src":"18332:6:12","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"visibility":"internal"}],"src":"18331:19:12"},"scope":4583,"src":"18277:229:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3787,"nodeType":"Block","src":"18916:155:12","statements":[{"expression":{"id":3775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3770,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3768,"src":"18927:10:12","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3773,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"18947:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3772,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18940:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int240_$","typeString":"type(int240)"},"typeName":{"id":3771,"name":"int240","nodeType":"ElementaryTypeName","src":"18940:6:12","typeDescriptions":{}}},"id":3774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18940:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"src":"18927:26:12","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"id":3776,"nodeType":"ExpressionStatement","src":"18927:26:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3777,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3768,"src":"18968:10:12","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3778,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"18982:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18968:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3786,"nodeType":"IfStatement","src":"18964:100:12","trueBody":{"id":3785,"nodeType":"Block","src":"18989:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"323430","id":3781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19041:3:12","typeDescriptions":{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},"value":"240"},{"id":3782,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"19046:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3780,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"19011:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":3783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19011:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3784,"nodeType":"RevertStatement","src":"19004:48:12"}]}}]},"documentation":{"id":3763,"nodeType":"StructuredDocumentation","src":"18514:322:12","text":" @dev Returns the downcasted int240 from int256, reverting on\n overflow (when the input is less than smallest int240 or\n greater than largest int240).\n Counterpart to Solidity's `int240` operator.\n Requirements:\n - input must fit into 240 bits"},"id":3788,"implemented":true,"kind":"function","modifiers":[],"name":"toInt240","nameLocation":"18851:8:12","nodeType":"FunctionDefinition","parameters":{"id":3766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3765,"mutability":"mutable","name":"value","nameLocation":"18867:5:12","nodeType":"VariableDeclaration","scope":3788,"src":"18860:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3764,"name":"int256","nodeType":"ElementaryTypeName","src":"18860:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18859:14:12"},"returnParameters":{"id":3769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3768,"mutability":"mutable","name":"downcasted","nameLocation":"18904:10:12","nodeType":"VariableDeclaration","scope":3788,"src":"18897:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"},"typeName":{"id":3767,"name":"int240","nodeType":"ElementaryTypeName","src":"18897:6:12","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"visibility":"internal"}],"src":"18896:19:12"},"scope":4583,"src":"18842:229:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3813,"nodeType":"Block","src":"19481:155:12","statements":[{"expression":{"id":3801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3796,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"19492:10:12","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3799,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3791,"src":"19512:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3798,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19505:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int232_$","typeString":"type(int232)"},"typeName":{"id":3797,"name":"int232","nodeType":"ElementaryTypeName","src":"19505:6:12","typeDescriptions":{}}},"id":3800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19505:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"src":"19492:26:12","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"id":3802,"nodeType":"ExpressionStatement","src":"19492:26:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3803,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"19533:10:12","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3804,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3791,"src":"19547:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19533:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3812,"nodeType":"IfStatement","src":"19529:100:12","trueBody":{"id":3811,"nodeType":"Block","src":"19554:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"323332","id":3807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19606:3:12","typeDescriptions":{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},"value":"232"},{"id":3808,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3791,"src":"19611:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3806,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"19576:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":3809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19576:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3810,"nodeType":"RevertStatement","src":"19569:48:12"}]}}]},"documentation":{"id":3789,"nodeType":"StructuredDocumentation","src":"19079:322:12","text":" @dev Returns the downcasted int232 from int256, reverting on\n overflow (when the input is less than smallest int232 or\n greater than largest int232).\n Counterpart to Solidity's `int232` operator.\n Requirements:\n - input must fit into 232 bits"},"id":3814,"implemented":true,"kind":"function","modifiers":[],"name":"toInt232","nameLocation":"19416:8:12","nodeType":"FunctionDefinition","parameters":{"id":3792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3791,"mutability":"mutable","name":"value","nameLocation":"19432:5:12","nodeType":"VariableDeclaration","scope":3814,"src":"19425:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3790,"name":"int256","nodeType":"ElementaryTypeName","src":"19425:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19424:14:12"},"returnParameters":{"id":3795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3794,"mutability":"mutable","name":"downcasted","nameLocation":"19469:10:12","nodeType":"VariableDeclaration","scope":3814,"src":"19462:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"},"typeName":{"id":3793,"name":"int232","nodeType":"ElementaryTypeName","src":"19462:6:12","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"visibility":"internal"}],"src":"19461:19:12"},"scope":4583,"src":"19407:229:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3839,"nodeType":"Block","src":"20046:155:12","statements":[{"expression":{"id":3827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3822,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3820,"src":"20057:10:12","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3825,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3817,"src":"20077:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3824,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20070:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int224_$","typeString":"type(int224)"},"typeName":{"id":3823,"name":"int224","nodeType":"ElementaryTypeName","src":"20070:6:12","typeDescriptions":{}}},"id":3826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20070:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"src":"20057:26:12","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"id":3828,"nodeType":"ExpressionStatement","src":"20057:26:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3829,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3820,"src":"20098:10:12","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3830,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3817,"src":"20112:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"20098:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3838,"nodeType":"IfStatement","src":"20094:100:12","trueBody":{"id":3837,"nodeType":"Block","src":"20119:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"323234","id":3833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20171:3:12","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},{"id":3834,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3817,"src":"20176:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3832,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"20141:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":3835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20141:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3836,"nodeType":"RevertStatement","src":"20134:48:12"}]}}]},"documentation":{"id":3815,"nodeType":"StructuredDocumentation","src":"19644:322:12","text":" @dev Returns the downcasted int224 from int256, reverting on\n overflow (when the input is less than smallest int224 or\n greater than largest int224).\n Counterpart to Solidity's `int224` operator.\n Requirements:\n - input must fit into 224 bits"},"id":3840,"implemented":true,"kind":"function","modifiers":[],"name":"toInt224","nameLocation":"19981:8:12","nodeType":"FunctionDefinition","parameters":{"id":3818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3817,"mutability":"mutable","name":"value","nameLocation":"19997:5:12","nodeType":"VariableDeclaration","scope":3840,"src":"19990:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3816,"name":"int256","nodeType":"ElementaryTypeName","src":"19990:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19989:14:12"},"returnParameters":{"id":3821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3820,"mutability":"mutable","name":"downcasted","nameLocation":"20034:10:12","nodeType":"VariableDeclaration","scope":3840,"src":"20027:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"},"typeName":{"id":3819,"name":"int224","nodeType":"ElementaryTypeName","src":"20027:6:12","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"visibility":"internal"}],"src":"20026:19:12"},"scope":4583,"src":"19972:229:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3865,"nodeType":"Block","src":"20611:155:12","statements":[{"expression":{"id":3853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3848,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3846,"src":"20622:10:12","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3851,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3843,"src":"20642:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3850,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20635:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int216_$","typeString":"type(int216)"},"typeName":{"id":3849,"name":"int216","nodeType":"ElementaryTypeName","src":"20635:6:12","typeDescriptions":{}}},"id":3852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20635:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"src":"20622:26:12","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"id":3854,"nodeType":"ExpressionStatement","src":"20622:26:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3855,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3846,"src":"20663:10:12","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3856,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3843,"src":"20677:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"20663:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3864,"nodeType":"IfStatement","src":"20659:100:12","trueBody":{"id":3863,"nodeType":"Block","src":"20684:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"323136","id":3859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20736:3:12","typeDescriptions":{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},"value":"216"},{"id":3860,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3843,"src":"20741:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3858,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"20706:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":3861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20706:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3862,"nodeType":"RevertStatement","src":"20699:48:12"}]}}]},"documentation":{"id":3841,"nodeType":"StructuredDocumentation","src":"20209:322:12","text":" @dev Returns the downcasted int216 from int256, reverting on\n overflow (when the input is less than smallest int216 or\n greater than largest int216).\n Counterpart to Solidity's `int216` operator.\n Requirements:\n - input must fit into 216 bits"},"id":3866,"implemented":true,"kind":"function","modifiers":[],"name":"toInt216","nameLocation":"20546:8:12","nodeType":"FunctionDefinition","parameters":{"id":3844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3843,"mutability":"mutable","name":"value","nameLocation":"20562:5:12","nodeType":"VariableDeclaration","scope":3866,"src":"20555:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3842,"name":"int256","nodeType":"ElementaryTypeName","src":"20555:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20554:14:12"},"returnParameters":{"id":3847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3846,"mutability":"mutable","name":"downcasted","nameLocation":"20599:10:12","nodeType":"VariableDeclaration","scope":3866,"src":"20592:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"},"typeName":{"id":3845,"name":"int216","nodeType":"ElementaryTypeName","src":"20592:6:12","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"visibility":"internal"}],"src":"20591:19:12"},"scope":4583,"src":"20537:229:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3891,"nodeType":"Block","src":"21176:155:12","statements":[{"expression":{"id":3879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3874,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3872,"src":"21187:10:12","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3877,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3869,"src":"21207:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3876,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21200:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int208_$","typeString":"type(int208)"},"typeName":{"id":3875,"name":"int208","nodeType":"ElementaryTypeName","src":"21200:6:12","typeDescriptions":{}}},"id":3878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21200:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"src":"21187:26:12","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"id":3880,"nodeType":"ExpressionStatement","src":"21187:26:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3881,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3872,"src":"21228:10:12","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3882,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3869,"src":"21242:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21228:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3890,"nodeType":"IfStatement","src":"21224:100:12","trueBody":{"id":3889,"nodeType":"Block","src":"21249:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"323038","id":3885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21301:3:12","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"value":"208"},{"id":3886,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3869,"src":"21306:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3884,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"21271:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":3887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21271:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3888,"nodeType":"RevertStatement","src":"21264:48:12"}]}}]},"documentation":{"id":3867,"nodeType":"StructuredDocumentation","src":"20774:322:12","text":" @dev Returns the downcasted int208 from int256, reverting on\n overflow (when the input is less than smallest int208 or\n greater than largest int208).\n Counterpart to Solidity's `int208` operator.\n Requirements:\n - input must fit into 208 bits"},"id":3892,"implemented":true,"kind":"function","modifiers":[],"name":"toInt208","nameLocation":"21111:8:12","nodeType":"FunctionDefinition","parameters":{"id":3870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3869,"mutability":"mutable","name":"value","nameLocation":"21127:5:12","nodeType":"VariableDeclaration","scope":3892,"src":"21120:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3868,"name":"int256","nodeType":"ElementaryTypeName","src":"21120:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"21119:14:12"},"returnParameters":{"id":3873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3872,"mutability":"mutable","name":"downcasted","nameLocation":"21164:10:12","nodeType":"VariableDeclaration","scope":3892,"src":"21157:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"},"typeName":{"id":3871,"name":"int208","nodeType":"ElementaryTypeName","src":"21157:6:12","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"visibility":"internal"}],"src":"21156:19:12"},"scope":4583,"src":"21102:229:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3917,"nodeType":"Block","src":"21741:155:12","statements":[{"expression":{"id":3905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3900,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"21752:10:12","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3903,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3895,"src":"21772:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3902,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21765:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int200_$","typeString":"type(int200)"},"typeName":{"id":3901,"name":"int200","nodeType":"ElementaryTypeName","src":"21765:6:12","typeDescriptions":{}}},"id":3904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21765:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"src":"21752:26:12","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"id":3906,"nodeType":"ExpressionStatement","src":"21752:26:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3907,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"21793:10:12","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3908,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3895,"src":"21807:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21793:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3916,"nodeType":"IfStatement","src":"21789:100:12","trueBody":{"id":3915,"nodeType":"Block","src":"21814:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"323030","id":3911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21866:3:12","typeDescriptions":{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},"value":"200"},{"id":3912,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3895,"src":"21871:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3910,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"21836:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":3913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21836:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3914,"nodeType":"RevertStatement","src":"21829:48:12"}]}}]},"documentation":{"id":3893,"nodeType":"StructuredDocumentation","src":"21339:322:12","text":" @dev Returns the downcasted int200 from int256, reverting on\n overflow (when the input is less than smallest int200 or\n greater than largest int200).\n Counterpart to Solidity's `int200` operator.\n Requirements:\n - input must fit into 200 bits"},"id":3918,"implemented":true,"kind":"function","modifiers":[],"name":"toInt200","nameLocation":"21676:8:12","nodeType":"FunctionDefinition","parameters":{"id":3896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3895,"mutability":"mutable","name":"value","nameLocation":"21692:5:12","nodeType":"VariableDeclaration","scope":3918,"src":"21685:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3894,"name":"int256","nodeType":"ElementaryTypeName","src":"21685:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"21684:14:12"},"returnParameters":{"id":3899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3898,"mutability":"mutable","name":"downcasted","nameLocation":"21729:10:12","nodeType":"VariableDeclaration","scope":3918,"src":"21722:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"},"typeName":{"id":3897,"name":"int200","nodeType":"ElementaryTypeName","src":"21722:6:12","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"visibility":"internal"}],"src":"21721:19:12"},"scope":4583,"src":"21667:229:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3943,"nodeType":"Block","src":"22306:155:12","statements":[{"expression":{"id":3931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3926,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3924,"src":"22317:10:12","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3929,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3921,"src":"22337:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3928,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22330:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int192_$","typeString":"type(int192)"},"typeName":{"id":3927,"name":"int192","nodeType":"ElementaryTypeName","src":"22330:6:12","typeDescriptions":{}}},"id":3930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22330:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"src":"22317:26:12","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"id":3932,"nodeType":"ExpressionStatement","src":"22317:26:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3933,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3924,"src":"22358:10:12","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3934,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3921,"src":"22372:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22358:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3942,"nodeType":"IfStatement","src":"22354:100:12","trueBody":{"id":3941,"nodeType":"Block","src":"22379:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313932","id":3937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22431:3:12","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},{"id":3938,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3921,"src":"22436:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3936,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"22401:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":3939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22401:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3940,"nodeType":"RevertStatement","src":"22394:48:12"}]}}]},"documentation":{"id":3919,"nodeType":"StructuredDocumentation","src":"21904:322:12","text":" @dev Returns the downcasted int192 from int256, reverting on\n overflow (when the input is less than smallest int192 or\n greater than largest int192).\n Counterpart to Solidity's `int192` operator.\n Requirements:\n - input must fit into 192 bits"},"id":3944,"implemented":true,"kind":"function","modifiers":[],"name":"toInt192","nameLocation":"22241:8:12","nodeType":"FunctionDefinition","parameters":{"id":3922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3921,"mutability":"mutable","name":"value","nameLocation":"22257:5:12","nodeType":"VariableDeclaration","scope":3944,"src":"22250:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3920,"name":"int256","nodeType":"ElementaryTypeName","src":"22250:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22249:14:12"},"returnParameters":{"id":3925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3924,"mutability":"mutable","name":"downcasted","nameLocation":"22294:10:12","nodeType":"VariableDeclaration","scope":3944,"src":"22287:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"},"typeName":{"id":3923,"name":"int192","nodeType":"ElementaryTypeName","src":"22287:6:12","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"visibility":"internal"}],"src":"22286:19:12"},"scope":4583,"src":"22232:229:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3969,"nodeType":"Block","src":"22871:155:12","statements":[{"expression":{"id":3957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3952,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3950,"src":"22882:10:12","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3955,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3947,"src":"22902:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3954,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22895:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int184_$","typeString":"type(int184)"},"typeName":{"id":3953,"name":"int184","nodeType":"ElementaryTypeName","src":"22895:6:12","typeDescriptions":{}}},"id":3956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22895:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"src":"22882:26:12","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"id":3958,"nodeType":"ExpressionStatement","src":"22882:26:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3959,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3950,"src":"22923:10:12","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3960,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3947,"src":"22937:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22923:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3968,"nodeType":"IfStatement","src":"22919:100:12","trueBody":{"id":3967,"nodeType":"Block","src":"22944:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313834","id":3963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22996:3:12","typeDescriptions":{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},"value":"184"},{"id":3964,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3947,"src":"23001:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3962,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"22966:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":3965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22966:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3966,"nodeType":"RevertStatement","src":"22959:48:12"}]}}]},"documentation":{"id":3945,"nodeType":"StructuredDocumentation","src":"22469:322:12","text":" @dev Returns the downcasted int184 from int256, reverting on\n overflow (when the input is less than smallest int184 or\n greater than largest int184).\n Counterpart to Solidity's `int184` operator.\n Requirements:\n - input must fit into 184 bits"},"id":3970,"implemented":true,"kind":"function","modifiers":[],"name":"toInt184","nameLocation":"22806:8:12","nodeType":"FunctionDefinition","parameters":{"id":3948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3947,"mutability":"mutable","name":"value","nameLocation":"22822:5:12","nodeType":"VariableDeclaration","scope":3970,"src":"22815:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3946,"name":"int256","nodeType":"ElementaryTypeName","src":"22815:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22814:14:12"},"returnParameters":{"id":3951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3950,"mutability":"mutable","name":"downcasted","nameLocation":"22859:10:12","nodeType":"VariableDeclaration","scope":3970,"src":"22852:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"},"typeName":{"id":3949,"name":"int184","nodeType":"ElementaryTypeName","src":"22852:6:12","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"visibility":"internal"}],"src":"22851:19:12"},"scope":4583,"src":"22797:229:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3995,"nodeType":"Block","src":"23436:155:12","statements":[{"expression":{"id":3983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3978,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3976,"src":"23447:10:12","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3981,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3973,"src":"23467:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3980,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23460:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int176_$","typeString":"type(int176)"},"typeName":{"id":3979,"name":"int176","nodeType":"ElementaryTypeName","src":"23460:6:12","typeDescriptions":{}}},"id":3982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23460:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"src":"23447:26:12","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"id":3984,"nodeType":"ExpressionStatement","src":"23447:26:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3985,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3976,"src":"23488:10:12","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3986,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3973,"src":"23502:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23488:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3994,"nodeType":"IfStatement","src":"23484:100:12","trueBody":{"id":3993,"nodeType":"Block","src":"23509:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313736","id":3989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23561:3:12","typeDescriptions":{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},"value":"176"},{"id":3990,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3973,"src":"23566:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3988,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"23531:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":3991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23531:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3992,"nodeType":"RevertStatement","src":"23524:48:12"}]}}]},"documentation":{"id":3971,"nodeType":"StructuredDocumentation","src":"23034:322:12","text":" @dev Returns the downcasted int176 from int256, reverting on\n overflow (when the input is less than smallest int176 or\n greater than largest int176).\n Counterpart to Solidity's `int176` operator.\n Requirements:\n - input must fit into 176 bits"},"id":3996,"implemented":true,"kind":"function","modifiers":[],"name":"toInt176","nameLocation":"23371:8:12","nodeType":"FunctionDefinition","parameters":{"id":3974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3973,"mutability":"mutable","name":"value","nameLocation":"23387:5:12","nodeType":"VariableDeclaration","scope":3996,"src":"23380:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3972,"name":"int256","nodeType":"ElementaryTypeName","src":"23380:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23379:14:12"},"returnParameters":{"id":3977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3976,"mutability":"mutable","name":"downcasted","nameLocation":"23424:10:12","nodeType":"VariableDeclaration","scope":3996,"src":"23417:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"},"typeName":{"id":3975,"name":"int176","nodeType":"ElementaryTypeName","src":"23417:6:12","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"visibility":"internal"}],"src":"23416:19:12"},"scope":4583,"src":"23362:229:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4021,"nodeType":"Block","src":"24001:155:12","statements":[{"expression":{"id":4009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4004,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4002,"src":"24012:10:12","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4007,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3999,"src":"24032:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4006,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24025:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int168_$","typeString":"type(int168)"},"typeName":{"id":4005,"name":"int168","nodeType":"ElementaryTypeName","src":"24025:6:12","typeDescriptions":{}}},"id":4008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24025:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"src":"24012:26:12","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"id":4010,"nodeType":"ExpressionStatement","src":"24012:26:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4011,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4002,"src":"24053:10:12","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4012,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3999,"src":"24067:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"24053:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4020,"nodeType":"IfStatement","src":"24049:100:12","trueBody":{"id":4019,"nodeType":"Block","src":"24074:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313638","id":4015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24126:3:12","typeDescriptions":{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},"value":"168"},{"id":4016,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3999,"src":"24131:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4014,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"24096:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24096:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4018,"nodeType":"RevertStatement","src":"24089:48:12"}]}}]},"documentation":{"id":3997,"nodeType":"StructuredDocumentation","src":"23599:322:12","text":" @dev Returns the downcasted int168 from int256, reverting on\n overflow (when the input is less than smallest int168 or\n greater than largest int168).\n Counterpart to Solidity's `int168` operator.\n Requirements:\n - input must fit into 168 bits"},"id":4022,"implemented":true,"kind":"function","modifiers":[],"name":"toInt168","nameLocation":"23936:8:12","nodeType":"FunctionDefinition","parameters":{"id":4000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3999,"mutability":"mutable","name":"value","nameLocation":"23952:5:12","nodeType":"VariableDeclaration","scope":4022,"src":"23945:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3998,"name":"int256","nodeType":"ElementaryTypeName","src":"23945:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23944:14:12"},"returnParameters":{"id":4003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4002,"mutability":"mutable","name":"downcasted","nameLocation":"23989:10:12","nodeType":"VariableDeclaration","scope":4022,"src":"23982:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"},"typeName":{"id":4001,"name":"int168","nodeType":"ElementaryTypeName","src":"23982:6:12","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"visibility":"internal"}],"src":"23981:19:12"},"scope":4583,"src":"23927:229:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4047,"nodeType":"Block","src":"24566:155:12","statements":[{"expression":{"id":4035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4030,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4028,"src":"24577:10:12","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4033,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4025,"src":"24597:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4032,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24590:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int160_$","typeString":"type(int160)"},"typeName":{"id":4031,"name":"int160","nodeType":"ElementaryTypeName","src":"24590:6:12","typeDescriptions":{}}},"id":4034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24590:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"src":"24577:26:12","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"id":4036,"nodeType":"ExpressionStatement","src":"24577:26:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4037,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4028,"src":"24618:10:12","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4038,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4025,"src":"24632:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"24618:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4046,"nodeType":"IfStatement","src":"24614:100:12","trueBody":{"id":4045,"nodeType":"Block","src":"24639:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313630","id":4041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24691:3:12","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},{"id":4042,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4025,"src":"24696:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4040,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"24661:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24661:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4044,"nodeType":"RevertStatement","src":"24654:48:12"}]}}]},"documentation":{"id":4023,"nodeType":"StructuredDocumentation","src":"24164:322:12","text":" @dev Returns the downcasted int160 from int256, reverting on\n overflow (when the input is less than smallest int160 or\n greater than largest int160).\n Counterpart to Solidity's `int160` operator.\n Requirements:\n - input must fit into 160 bits"},"id":4048,"implemented":true,"kind":"function","modifiers":[],"name":"toInt160","nameLocation":"24501:8:12","nodeType":"FunctionDefinition","parameters":{"id":4026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4025,"mutability":"mutable","name":"value","nameLocation":"24517:5:12","nodeType":"VariableDeclaration","scope":4048,"src":"24510:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4024,"name":"int256","nodeType":"ElementaryTypeName","src":"24510:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"24509:14:12"},"returnParameters":{"id":4029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4028,"mutability":"mutable","name":"downcasted","nameLocation":"24554:10:12","nodeType":"VariableDeclaration","scope":4048,"src":"24547:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"},"typeName":{"id":4027,"name":"int160","nodeType":"ElementaryTypeName","src":"24547:6:12","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"visibility":"internal"}],"src":"24546:19:12"},"scope":4583,"src":"24492:229:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4073,"nodeType":"Block","src":"25131:155:12","statements":[{"expression":{"id":4061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4056,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4054,"src":"25142:10:12","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4059,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4051,"src":"25162:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4058,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25155:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int152_$","typeString":"type(int152)"},"typeName":{"id":4057,"name":"int152","nodeType":"ElementaryTypeName","src":"25155:6:12","typeDescriptions":{}}},"id":4060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25155:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"src":"25142:26:12","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"id":4062,"nodeType":"ExpressionStatement","src":"25142:26:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4063,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4054,"src":"25183:10:12","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4064,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4051,"src":"25197:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"25183:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4072,"nodeType":"IfStatement","src":"25179:100:12","trueBody":{"id":4071,"nodeType":"Block","src":"25204:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313532","id":4067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25256:3:12","typeDescriptions":{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},"value":"152"},{"id":4068,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4051,"src":"25261:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4066,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"25226:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25226:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4070,"nodeType":"RevertStatement","src":"25219:48:12"}]}}]},"documentation":{"id":4049,"nodeType":"StructuredDocumentation","src":"24729:322:12","text":" @dev Returns the downcasted int152 from int256, reverting on\n overflow (when the input is less than smallest int152 or\n greater than largest int152).\n Counterpart to Solidity's `int152` operator.\n Requirements:\n - input must fit into 152 bits"},"id":4074,"implemented":true,"kind":"function","modifiers":[],"name":"toInt152","nameLocation":"25066:8:12","nodeType":"FunctionDefinition","parameters":{"id":4052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4051,"mutability":"mutable","name":"value","nameLocation":"25082:5:12","nodeType":"VariableDeclaration","scope":4074,"src":"25075:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4050,"name":"int256","nodeType":"ElementaryTypeName","src":"25075:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25074:14:12"},"returnParameters":{"id":4055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4054,"mutability":"mutable","name":"downcasted","nameLocation":"25119:10:12","nodeType":"VariableDeclaration","scope":4074,"src":"25112:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"},"typeName":{"id":4053,"name":"int152","nodeType":"ElementaryTypeName","src":"25112:6:12","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"visibility":"internal"}],"src":"25111:19:12"},"scope":4583,"src":"25057:229:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4099,"nodeType":"Block","src":"25696:155:12","statements":[{"expression":{"id":4087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4082,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4080,"src":"25707:10:12","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4085,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"25727:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4084,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25720:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int144_$","typeString":"type(int144)"},"typeName":{"id":4083,"name":"int144","nodeType":"ElementaryTypeName","src":"25720:6:12","typeDescriptions":{}}},"id":4086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25720:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"src":"25707:26:12","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"id":4088,"nodeType":"ExpressionStatement","src":"25707:26:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4089,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4080,"src":"25748:10:12","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4090,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"25762:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"25748:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4098,"nodeType":"IfStatement","src":"25744:100:12","trueBody":{"id":4097,"nodeType":"Block","src":"25769:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313434","id":4093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25821:3:12","typeDescriptions":{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},"value":"144"},{"id":4094,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"25826:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4092,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"25791:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25791:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4096,"nodeType":"RevertStatement","src":"25784:48:12"}]}}]},"documentation":{"id":4075,"nodeType":"StructuredDocumentation","src":"25294:322:12","text":" @dev Returns the downcasted int144 from int256, reverting on\n overflow (when the input is less than smallest int144 or\n greater than largest int144).\n Counterpart to Solidity's `int144` operator.\n Requirements:\n - input must fit into 144 bits"},"id":4100,"implemented":true,"kind":"function","modifiers":[],"name":"toInt144","nameLocation":"25631:8:12","nodeType":"FunctionDefinition","parameters":{"id":4078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4077,"mutability":"mutable","name":"value","nameLocation":"25647:5:12","nodeType":"VariableDeclaration","scope":4100,"src":"25640:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4076,"name":"int256","nodeType":"ElementaryTypeName","src":"25640:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25639:14:12"},"returnParameters":{"id":4081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4080,"mutability":"mutable","name":"downcasted","nameLocation":"25684:10:12","nodeType":"VariableDeclaration","scope":4100,"src":"25677:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"},"typeName":{"id":4079,"name":"int144","nodeType":"ElementaryTypeName","src":"25677:6:12","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"visibility":"internal"}],"src":"25676:19:12"},"scope":4583,"src":"25622:229:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4125,"nodeType":"Block","src":"26261:155:12","statements":[{"expression":{"id":4113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4108,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4106,"src":"26272:10:12","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4111,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4103,"src":"26292:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4110,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26285:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int136_$","typeString":"type(int136)"},"typeName":{"id":4109,"name":"int136","nodeType":"ElementaryTypeName","src":"26285:6:12","typeDescriptions":{}}},"id":4112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26285:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"src":"26272:26:12","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"id":4114,"nodeType":"ExpressionStatement","src":"26272:26:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4115,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4106,"src":"26313:10:12","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4116,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4103,"src":"26327:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"26313:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4124,"nodeType":"IfStatement","src":"26309:100:12","trueBody":{"id":4123,"nodeType":"Block","src":"26334:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313336","id":4119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26386:3:12","typeDescriptions":{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},"value":"136"},{"id":4120,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4103,"src":"26391:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4118,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"26356:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26356:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4122,"nodeType":"RevertStatement","src":"26349:48:12"}]}}]},"documentation":{"id":4101,"nodeType":"StructuredDocumentation","src":"25859:322:12","text":" @dev Returns the downcasted int136 from int256, reverting on\n overflow (when the input is less than smallest int136 or\n greater than largest int136).\n Counterpart to Solidity's `int136` operator.\n Requirements:\n - input must fit into 136 bits"},"id":4126,"implemented":true,"kind":"function","modifiers":[],"name":"toInt136","nameLocation":"26196:8:12","nodeType":"FunctionDefinition","parameters":{"id":4104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4103,"mutability":"mutable","name":"value","nameLocation":"26212:5:12","nodeType":"VariableDeclaration","scope":4126,"src":"26205:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4102,"name":"int256","nodeType":"ElementaryTypeName","src":"26205:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"26204:14:12"},"returnParameters":{"id":4107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4106,"mutability":"mutable","name":"downcasted","nameLocation":"26249:10:12","nodeType":"VariableDeclaration","scope":4126,"src":"26242:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"},"typeName":{"id":4105,"name":"int136","nodeType":"ElementaryTypeName","src":"26242:6:12","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"visibility":"internal"}],"src":"26241:19:12"},"scope":4583,"src":"26187:229:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4151,"nodeType":"Block","src":"26826:155:12","statements":[{"expression":{"id":4139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4134,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4132,"src":"26837:10:12","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4137,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4129,"src":"26857:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4136,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26850:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int128_$","typeString":"type(int128)"},"typeName":{"id":4135,"name":"int128","nodeType":"ElementaryTypeName","src":"26850:6:12","typeDescriptions":{}}},"id":4138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26850:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"src":"26837:26:12","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"id":4140,"nodeType":"ExpressionStatement","src":"26837:26:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4141,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4132,"src":"26878:10:12","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4142,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4129,"src":"26892:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"26878:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4150,"nodeType":"IfStatement","src":"26874:100:12","trueBody":{"id":4149,"nodeType":"Block","src":"26899:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313238","id":4145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26951:3:12","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},{"id":4146,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4129,"src":"26956:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4144,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"26921:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26921:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4148,"nodeType":"RevertStatement","src":"26914:48:12"}]}}]},"documentation":{"id":4127,"nodeType":"StructuredDocumentation","src":"26424:322:12","text":" @dev Returns the downcasted int128 from int256, reverting on\n overflow (when the input is less than smallest int128 or\n greater than largest int128).\n Counterpart to Solidity's `int128` operator.\n Requirements:\n - input must fit into 128 bits"},"id":4152,"implemented":true,"kind":"function","modifiers":[],"name":"toInt128","nameLocation":"26761:8:12","nodeType":"FunctionDefinition","parameters":{"id":4130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4129,"mutability":"mutable","name":"value","nameLocation":"26777:5:12","nodeType":"VariableDeclaration","scope":4152,"src":"26770:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4128,"name":"int256","nodeType":"ElementaryTypeName","src":"26770:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"26769:14:12"},"returnParameters":{"id":4133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4132,"mutability":"mutable","name":"downcasted","nameLocation":"26814:10:12","nodeType":"VariableDeclaration","scope":4152,"src":"26807:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":4131,"name":"int128","nodeType":"ElementaryTypeName","src":"26807:6:12","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"}],"src":"26806:19:12"},"scope":4583,"src":"26752:229:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4177,"nodeType":"Block","src":"27391:155:12","statements":[{"expression":{"id":4165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4160,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4158,"src":"27402:10:12","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4163,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"27422:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27415:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int120_$","typeString":"type(int120)"},"typeName":{"id":4161,"name":"int120","nodeType":"ElementaryTypeName","src":"27415:6:12","typeDescriptions":{}}},"id":4164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27415:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"src":"27402:26:12","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"id":4166,"nodeType":"ExpressionStatement","src":"27402:26:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4167,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4158,"src":"27443:10:12","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4168,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"27457:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"27443:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4176,"nodeType":"IfStatement","src":"27439:100:12","trueBody":{"id":4175,"nodeType":"Block","src":"27464:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313230","id":4171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27516:3:12","typeDescriptions":{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},"value":"120"},{"id":4172,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"27521:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4170,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"27486:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27486:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4174,"nodeType":"RevertStatement","src":"27479:48:12"}]}}]},"documentation":{"id":4153,"nodeType":"StructuredDocumentation","src":"26989:322:12","text":" @dev Returns the downcasted int120 from int256, reverting on\n overflow (when the input is less than smallest int120 or\n greater than largest int120).\n Counterpart to Solidity's `int120` operator.\n Requirements:\n - input must fit into 120 bits"},"id":4178,"implemented":true,"kind":"function","modifiers":[],"name":"toInt120","nameLocation":"27326:8:12","nodeType":"FunctionDefinition","parameters":{"id":4156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4155,"mutability":"mutable","name":"value","nameLocation":"27342:5:12","nodeType":"VariableDeclaration","scope":4178,"src":"27335:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4154,"name":"int256","nodeType":"ElementaryTypeName","src":"27335:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"27334:14:12"},"returnParameters":{"id":4159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4158,"mutability":"mutable","name":"downcasted","nameLocation":"27379:10:12","nodeType":"VariableDeclaration","scope":4178,"src":"27372:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"},"typeName":{"id":4157,"name":"int120","nodeType":"ElementaryTypeName","src":"27372:6:12","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"visibility":"internal"}],"src":"27371:19:12"},"scope":4583,"src":"27317:229:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4203,"nodeType":"Block","src":"27956:155:12","statements":[{"expression":{"id":4191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4186,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4184,"src":"27967:10:12","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4189,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4181,"src":"27987:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4188,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27980:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int112_$","typeString":"type(int112)"},"typeName":{"id":4187,"name":"int112","nodeType":"ElementaryTypeName","src":"27980:6:12","typeDescriptions":{}}},"id":4190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27980:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"src":"27967:26:12","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"id":4192,"nodeType":"ExpressionStatement","src":"27967:26:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4193,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4184,"src":"28008:10:12","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4194,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4181,"src":"28022:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"28008:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4202,"nodeType":"IfStatement","src":"28004:100:12","trueBody":{"id":4201,"nodeType":"Block","src":"28029:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313132","id":4197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28081:3:12","typeDescriptions":{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},"value":"112"},{"id":4198,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4181,"src":"28086:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4196,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"28051:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28051:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4200,"nodeType":"RevertStatement","src":"28044:48:12"}]}}]},"documentation":{"id":4179,"nodeType":"StructuredDocumentation","src":"27554:322:12","text":" @dev Returns the downcasted int112 from int256, reverting on\n overflow (when the input is less than smallest int112 or\n greater than largest int112).\n Counterpart to Solidity's `int112` operator.\n Requirements:\n - input must fit into 112 bits"},"id":4204,"implemented":true,"kind":"function","modifiers":[],"name":"toInt112","nameLocation":"27891:8:12","nodeType":"FunctionDefinition","parameters":{"id":4182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4181,"mutability":"mutable","name":"value","nameLocation":"27907:5:12","nodeType":"VariableDeclaration","scope":4204,"src":"27900:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4180,"name":"int256","nodeType":"ElementaryTypeName","src":"27900:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"27899:14:12"},"returnParameters":{"id":4185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4184,"mutability":"mutable","name":"downcasted","nameLocation":"27944:10:12","nodeType":"VariableDeclaration","scope":4204,"src":"27937:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"},"typeName":{"id":4183,"name":"int112","nodeType":"ElementaryTypeName","src":"27937:6:12","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"visibility":"internal"}],"src":"27936:19:12"},"scope":4583,"src":"27882:229:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4229,"nodeType":"Block","src":"28521:155:12","statements":[{"expression":{"id":4217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4212,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4210,"src":"28532:10:12","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4215,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4207,"src":"28552:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4214,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28545:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int104_$","typeString":"type(int104)"},"typeName":{"id":4213,"name":"int104","nodeType":"ElementaryTypeName","src":"28545:6:12","typeDescriptions":{}}},"id":4216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28545:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"src":"28532:26:12","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"id":4218,"nodeType":"ExpressionStatement","src":"28532:26:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4219,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4210,"src":"28573:10:12","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4220,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4207,"src":"28587:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"28573:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4228,"nodeType":"IfStatement","src":"28569:100:12","trueBody":{"id":4227,"nodeType":"Block","src":"28594:75:12","statements":[{"errorCall":{"arguments":[{"hexValue":"313034","id":4223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28646:3:12","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},{"id":4224,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4207,"src":"28651:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4222,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"28616:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28616:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4226,"nodeType":"RevertStatement","src":"28609:48:12"}]}}]},"documentation":{"id":4205,"nodeType":"StructuredDocumentation","src":"28119:322:12","text":" @dev Returns the downcasted int104 from int256, reverting on\n overflow (when the input is less than smallest int104 or\n greater than largest int104).\n Counterpart to Solidity's `int104` operator.\n Requirements:\n - input must fit into 104 bits"},"id":4230,"implemented":true,"kind":"function","modifiers":[],"name":"toInt104","nameLocation":"28456:8:12","nodeType":"FunctionDefinition","parameters":{"id":4208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4207,"mutability":"mutable","name":"value","nameLocation":"28472:5:12","nodeType":"VariableDeclaration","scope":4230,"src":"28465:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4206,"name":"int256","nodeType":"ElementaryTypeName","src":"28465:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"28464:14:12"},"returnParameters":{"id":4211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4210,"mutability":"mutable","name":"downcasted","nameLocation":"28509:10:12","nodeType":"VariableDeclaration","scope":4230,"src":"28502:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"},"typeName":{"id":4209,"name":"int104","nodeType":"ElementaryTypeName","src":"28502:6:12","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"visibility":"internal"}],"src":"28501:19:12"},"scope":4583,"src":"28447:229:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4255,"nodeType":"Block","src":"29079:153:12","statements":[{"expression":{"id":4243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4238,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4236,"src":"29090:10:12","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4241,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4233,"src":"29109:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4240,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29103:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int96_$","typeString":"type(int96)"},"typeName":{"id":4239,"name":"int96","nodeType":"ElementaryTypeName","src":"29103:5:12","typeDescriptions":{}}},"id":4242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29103:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"src":"29090:25:12","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"id":4244,"nodeType":"ExpressionStatement","src":"29090:25:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4245,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4236,"src":"29130:10:12","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4246,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4233,"src":"29144:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"29130:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4254,"nodeType":"IfStatement","src":"29126:99:12","trueBody":{"id":4253,"nodeType":"Block","src":"29151:74:12","statements":[{"errorCall":{"arguments":[{"hexValue":"3936","id":4249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29203:2:12","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},{"id":4250,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4233,"src":"29207:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4248,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"29173:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29173:40:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4252,"nodeType":"RevertStatement","src":"29166:47:12"}]}}]},"documentation":{"id":4231,"nodeType":"StructuredDocumentation","src":"28684:317:12","text":" @dev Returns the downcasted int96 from int256, reverting on\n overflow (when the input is less than smallest int96 or\n greater than largest int96).\n Counterpart to Solidity's `int96` operator.\n Requirements:\n - input must fit into 96 bits"},"id":4256,"implemented":true,"kind":"function","modifiers":[],"name":"toInt96","nameLocation":"29016:7:12","nodeType":"FunctionDefinition","parameters":{"id":4234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4233,"mutability":"mutable","name":"value","nameLocation":"29031:5:12","nodeType":"VariableDeclaration","scope":4256,"src":"29024:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4232,"name":"int256","nodeType":"ElementaryTypeName","src":"29024:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29023:14:12"},"returnParameters":{"id":4237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4236,"mutability":"mutable","name":"downcasted","nameLocation":"29067:10:12","nodeType":"VariableDeclaration","scope":4256,"src":"29061:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"},"typeName":{"id":4235,"name":"int96","nodeType":"ElementaryTypeName","src":"29061:5:12","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"visibility":"internal"}],"src":"29060:18:12"},"scope":4583,"src":"29007:225:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4281,"nodeType":"Block","src":"29635:153:12","statements":[{"expression":{"id":4269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4264,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"29646:10:12","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4267,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4259,"src":"29665:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4266,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29659:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int88_$","typeString":"type(int88)"},"typeName":{"id":4265,"name":"int88","nodeType":"ElementaryTypeName","src":"29659:5:12","typeDescriptions":{}}},"id":4268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29659:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"src":"29646:25:12","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"id":4270,"nodeType":"ExpressionStatement","src":"29646:25:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4271,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"29686:10:12","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4272,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4259,"src":"29700:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"29686:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4280,"nodeType":"IfStatement","src":"29682:99:12","trueBody":{"id":4279,"nodeType":"Block","src":"29707:74:12","statements":[{"errorCall":{"arguments":[{"hexValue":"3838","id":4275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29759:2:12","typeDescriptions":{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},"value":"88"},{"id":4276,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4259,"src":"29763:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4274,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"29729:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29729:40:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4278,"nodeType":"RevertStatement","src":"29722:47:12"}]}}]},"documentation":{"id":4257,"nodeType":"StructuredDocumentation","src":"29240:317:12","text":" @dev Returns the downcasted int88 from int256, reverting on\n overflow (when the input is less than smallest int88 or\n greater than largest int88).\n Counterpart to Solidity's `int88` operator.\n Requirements:\n - input must fit into 88 bits"},"id":4282,"implemented":true,"kind":"function","modifiers":[],"name":"toInt88","nameLocation":"29572:7:12","nodeType":"FunctionDefinition","parameters":{"id":4260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4259,"mutability":"mutable","name":"value","nameLocation":"29587:5:12","nodeType":"VariableDeclaration","scope":4282,"src":"29580:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4258,"name":"int256","nodeType":"ElementaryTypeName","src":"29580:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29579:14:12"},"returnParameters":{"id":4263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4262,"mutability":"mutable","name":"downcasted","nameLocation":"29623:10:12","nodeType":"VariableDeclaration","scope":4282,"src":"29617:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"},"typeName":{"id":4261,"name":"int88","nodeType":"ElementaryTypeName","src":"29617:5:12","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"visibility":"internal"}],"src":"29616:18:12"},"scope":4583,"src":"29563:225:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4307,"nodeType":"Block","src":"30191:153:12","statements":[{"expression":{"id":4295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4290,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4288,"src":"30202:10:12","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4293,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4285,"src":"30221:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4292,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30215:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int80_$","typeString":"type(int80)"},"typeName":{"id":4291,"name":"int80","nodeType":"ElementaryTypeName","src":"30215:5:12","typeDescriptions":{}}},"id":4294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30215:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"src":"30202:25:12","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"id":4296,"nodeType":"ExpressionStatement","src":"30202:25:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4297,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4288,"src":"30242:10:12","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4298,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4285,"src":"30256:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"30242:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4306,"nodeType":"IfStatement","src":"30238:99:12","trueBody":{"id":4305,"nodeType":"Block","src":"30263:74:12","statements":[{"errorCall":{"arguments":[{"hexValue":"3830","id":4301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30315:2:12","typeDescriptions":{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},"value":"80"},{"id":4302,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4285,"src":"30319:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4300,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"30285:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30285:40:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4304,"nodeType":"RevertStatement","src":"30278:47:12"}]}}]},"documentation":{"id":4283,"nodeType":"StructuredDocumentation","src":"29796:317:12","text":" @dev Returns the downcasted int80 from int256, reverting on\n overflow (when the input is less than smallest int80 or\n greater than largest int80).\n Counterpart to Solidity's `int80` operator.\n Requirements:\n - input must fit into 80 bits"},"id":4308,"implemented":true,"kind":"function","modifiers":[],"name":"toInt80","nameLocation":"30128:7:12","nodeType":"FunctionDefinition","parameters":{"id":4286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4285,"mutability":"mutable","name":"value","nameLocation":"30143:5:12","nodeType":"VariableDeclaration","scope":4308,"src":"30136:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4284,"name":"int256","nodeType":"ElementaryTypeName","src":"30136:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"30135:14:12"},"returnParameters":{"id":4289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4288,"mutability":"mutable","name":"downcasted","nameLocation":"30179:10:12","nodeType":"VariableDeclaration","scope":4308,"src":"30173:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"},"typeName":{"id":4287,"name":"int80","nodeType":"ElementaryTypeName","src":"30173:5:12","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"visibility":"internal"}],"src":"30172:18:12"},"scope":4583,"src":"30119:225:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4333,"nodeType":"Block","src":"30747:153:12","statements":[{"expression":{"id":4321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4316,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"30758:10:12","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4319,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4311,"src":"30777:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4318,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30771:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int72_$","typeString":"type(int72)"},"typeName":{"id":4317,"name":"int72","nodeType":"ElementaryTypeName","src":"30771:5:12","typeDescriptions":{}}},"id":4320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30771:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"src":"30758:25:12","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"id":4322,"nodeType":"ExpressionStatement","src":"30758:25:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4323,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"30798:10:12","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4324,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4311,"src":"30812:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"30798:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4332,"nodeType":"IfStatement","src":"30794:99:12","trueBody":{"id":4331,"nodeType":"Block","src":"30819:74:12","statements":[{"errorCall":{"arguments":[{"hexValue":"3732","id":4327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30871:2:12","typeDescriptions":{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},"value":"72"},{"id":4328,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4311,"src":"30875:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4326,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"30841:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30841:40:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4330,"nodeType":"RevertStatement","src":"30834:47:12"}]}}]},"documentation":{"id":4309,"nodeType":"StructuredDocumentation","src":"30352:317:12","text":" @dev Returns the downcasted int72 from int256, reverting on\n overflow (when the input is less than smallest int72 or\n greater than largest int72).\n Counterpart to Solidity's `int72` operator.\n Requirements:\n - input must fit into 72 bits"},"id":4334,"implemented":true,"kind":"function","modifiers":[],"name":"toInt72","nameLocation":"30684:7:12","nodeType":"FunctionDefinition","parameters":{"id":4312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4311,"mutability":"mutable","name":"value","nameLocation":"30699:5:12","nodeType":"VariableDeclaration","scope":4334,"src":"30692:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4310,"name":"int256","nodeType":"ElementaryTypeName","src":"30692:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"30691:14:12"},"returnParameters":{"id":4315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4314,"mutability":"mutable","name":"downcasted","nameLocation":"30735:10:12","nodeType":"VariableDeclaration","scope":4334,"src":"30729:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"},"typeName":{"id":4313,"name":"int72","nodeType":"ElementaryTypeName","src":"30729:5:12","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"visibility":"internal"}],"src":"30728:18:12"},"scope":4583,"src":"30675:225:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4359,"nodeType":"Block","src":"31303:153:12","statements":[{"expression":{"id":4347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4342,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4340,"src":"31314:10:12","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4345,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4337,"src":"31333:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4344,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31327:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int64_$","typeString":"type(int64)"},"typeName":{"id":4343,"name":"int64","nodeType":"ElementaryTypeName","src":"31327:5:12","typeDescriptions":{}}},"id":4346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31327:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"src":"31314:25:12","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"id":4348,"nodeType":"ExpressionStatement","src":"31314:25:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4349,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4340,"src":"31354:10:12","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4350,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4337,"src":"31368:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"31354:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4358,"nodeType":"IfStatement","src":"31350:99:12","trueBody":{"id":4357,"nodeType":"Block","src":"31375:74:12","statements":[{"errorCall":{"arguments":[{"hexValue":"3634","id":4353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31427:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},{"id":4354,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4337,"src":"31431:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4352,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"31397:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31397:40:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4356,"nodeType":"RevertStatement","src":"31390:47:12"}]}}]},"documentation":{"id":4335,"nodeType":"StructuredDocumentation","src":"30908:317:12","text":" @dev Returns the downcasted int64 from int256, reverting on\n overflow (when the input is less than smallest int64 or\n greater than largest int64).\n Counterpart to Solidity's `int64` operator.\n Requirements:\n - input must fit into 64 bits"},"id":4360,"implemented":true,"kind":"function","modifiers":[],"name":"toInt64","nameLocation":"31240:7:12","nodeType":"FunctionDefinition","parameters":{"id":4338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4337,"mutability":"mutable","name":"value","nameLocation":"31255:5:12","nodeType":"VariableDeclaration","scope":4360,"src":"31248:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4336,"name":"int256","nodeType":"ElementaryTypeName","src":"31248:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"31247:14:12"},"returnParameters":{"id":4341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4340,"mutability":"mutable","name":"downcasted","nameLocation":"31291:10:12","nodeType":"VariableDeclaration","scope":4360,"src":"31285:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":4339,"name":"int64","nodeType":"ElementaryTypeName","src":"31285:5:12","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"}],"src":"31284:18:12"},"scope":4583,"src":"31231:225:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4385,"nodeType":"Block","src":"31859:153:12","statements":[{"expression":{"id":4373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4368,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"31870:10:12","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4371,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4363,"src":"31889:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4370,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31883:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int56_$","typeString":"type(int56)"},"typeName":{"id":4369,"name":"int56","nodeType":"ElementaryTypeName","src":"31883:5:12","typeDescriptions":{}}},"id":4372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31883:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"src":"31870:25:12","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"id":4374,"nodeType":"ExpressionStatement","src":"31870:25:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4375,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"31910:10:12","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4376,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4363,"src":"31924:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"31910:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4384,"nodeType":"IfStatement","src":"31906:99:12","trueBody":{"id":4383,"nodeType":"Block","src":"31931:74:12","statements":[{"errorCall":{"arguments":[{"hexValue":"3536","id":4379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31983:2:12","typeDescriptions":{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},"value":"56"},{"id":4380,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4363,"src":"31987:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4378,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"31953:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31953:40:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4382,"nodeType":"RevertStatement","src":"31946:47:12"}]}}]},"documentation":{"id":4361,"nodeType":"StructuredDocumentation","src":"31464:317:12","text":" @dev Returns the downcasted int56 from int256, reverting on\n overflow (when the input is less than smallest int56 or\n greater than largest int56).\n Counterpart to Solidity's `int56` operator.\n Requirements:\n - input must fit into 56 bits"},"id":4386,"implemented":true,"kind":"function","modifiers":[],"name":"toInt56","nameLocation":"31796:7:12","nodeType":"FunctionDefinition","parameters":{"id":4364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4363,"mutability":"mutable","name":"value","nameLocation":"31811:5:12","nodeType":"VariableDeclaration","scope":4386,"src":"31804:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4362,"name":"int256","nodeType":"ElementaryTypeName","src":"31804:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"31803:14:12"},"returnParameters":{"id":4367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4366,"mutability":"mutable","name":"downcasted","nameLocation":"31847:10:12","nodeType":"VariableDeclaration","scope":4386,"src":"31841:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":4365,"name":"int56","nodeType":"ElementaryTypeName","src":"31841:5:12","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"}],"src":"31840:18:12"},"scope":4583,"src":"31787:225:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4411,"nodeType":"Block","src":"32415:153:12","statements":[{"expression":{"id":4399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4394,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4392,"src":"32426:10:12","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4397,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4389,"src":"32445:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4396,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32439:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int48_$","typeString":"type(int48)"},"typeName":{"id":4395,"name":"int48","nodeType":"ElementaryTypeName","src":"32439:5:12","typeDescriptions":{}}},"id":4398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32439:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"src":"32426:25:12","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"id":4400,"nodeType":"ExpressionStatement","src":"32426:25:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4401,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4392,"src":"32466:10:12","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4402,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4389,"src":"32480:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"32466:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4410,"nodeType":"IfStatement","src":"32462:99:12","trueBody":{"id":4409,"nodeType":"Block","src":"32487:74:12","statements":[{"errorCall":{"arguments":[{"hexValue":"3438","id":4405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32539:2:12","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},{"id":4406,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4389,"src":"32543:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4404,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"32509:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32509:40:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4408,"nodeType":"RevertStatement","src":"32502:47:12"}]}}]},"documentation":{"id":4387,"nodeType":"StructuredDocumentation","src":"32020:317:12","text":" @dev Returns the downcasted int48 from int256, reverting on\n overflow (when the input is less than smallest int48 or\n greater than largest int48).\n Counterpart to Solidity's `int48` operator.\n Requirements:\n - input must fit into 48 bits"},"id":4412,"implemented":true,"kind":"function","modifiers":[],"name":"toInt48","nameLocation":"32352:7:12","nodeType":"FunctionDefinition","parameters":{"id":4390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4389,"mutability":"mutable","name":"value","nameLocation":"32367:5:12","nodeType":"VariableDeclaration","scope":4412,"src":"32360:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4388,"name":"int256","nodeType":"ElementaryTypeName","src":"32360:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32359:14:12"},"returnParameters":{"id":4393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4392,"mutability":"mutable","name":"downcasted","nameLocation":"32403:10:12","nodeType":"VariableDeclaration","scope":4412,"src":"32397:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"},"typeName":{"id":4391,"name":"int48","nodeType":"ElementaryTypeName","src":"32397:5:12","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"visibility":"internal"}],"src":"32396:18:12"},"scope":4583,"src":"32343:225:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4437,"nodeType":"Block","src":"32971:153:12","statements":[{"expression":{"id":4425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4420,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4418,"src":"32982:10:12","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4423,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4415,"src":"33001:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4422,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32995:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int40_$","typeString":"type(int40)"},"typeName":{"id":4421,"name":"int40","nodeType":"ElementaryTypeName","src":"32995:5:12","typeDescriptions":{}}},"id":4424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32995:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"src":"32982:25:12","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"id":4426,"nodeType":"ExpressionStatement","src":"32982:25:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4427,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4418,"src":"33022:10:12","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4428,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4415,"src":"33036:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"33022:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4436,"nodeType":"IfStatement","src":"33018:99:12","trueBody":{"id":4435,"nodeType":"Block","src":"33043:74:12","statements":[{"errorCall":{"arguments":[{"hexValue":"3430","id":4431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33095:2:12","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},{"id":4432,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4415,"src":"33099:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4430,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"33065:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33065:40:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4434,"nodeType":"RevertStatement","src":"33058:47:12"}]}}]},"documentation":{"id":4413,"nodeType":"StructuredDocumentation","src":"32576:317:12","text":" @dev Returns the downcasted int40 from int256, reverting on\n overflow (when the input is less than smallest int40 or\n greater than largest int40).\n Counterpart to Solidity's `int40` operator.\n Requirements:\n - input must fit into 40 bits"},"id":4438,"implemented":true,"kind":"function","modifiers":[],"name":"toInt40","nameLocation":"32908:7:12","nodeType":"FunctionDefinition","parameters":{"id":4416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4415,"mutability":"mutable","name":"value","nameLocation":"32923:5:12","nodeType":"VariableDeclaration","scope":4438,"src":"32916:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4414,"name":"int256","nodeType":"ElementaryTypeName","src":"32916:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32915:14:12"},"returnParameters":{"id":4419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4418,"mutability":"mutable","name":"downcasted","nameLocation":"32959:10:12","nodeType":"VariableDeclaration","scope":4438,"src":"32953:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"},"typeName":{"id":4417,"name":"int40","nodeType":"ElementaryTypeName","src":"32953:5:12","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"visibility":"internal"}],"src":"32952:18:12"},"scope":4583,"src":"32899:225:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4463,"nodeType":"Block","src":"33527:153:12","statements":[{"expression":{"id":4451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4446,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4444,"src":"33538:10:12","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4449,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4441,"src":"33557:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4448,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33551:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int32_$","typeString":"type(int32)"},"typeName":{"id":4447,"name":"int32","nodeType":"ElementaryTypeName","src":"33551:5:12","typeDescriptions":{}}},"id":4450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33551:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"src":"33538:25:12","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"id":4452,"nodeType":"ExpressionStatement","src":"33538:25:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4453,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4444,"src":"33578:10:12","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4454,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4441,"src":"33592:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"33578:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4462,"nodeType":"IfStatement","src":"33574:99:12","trueBody":{"id":4461,"nodeType":"Block","src":"33599:74:12","statements":[{"errorCall":{"arguments":[{"hexValue":"3332","id":4457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33651:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},{"id":4458,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4441,"src":"33655:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4456,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"33621:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33621:40:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4460,"nodeType":"RevertStatement","src":"33614:47:12"}]}}]},"documentation":{"id":4439,"nodeType":"StructuredDocumentation","src":"33132:317:12","text":" @dev Returns the downcasted int32 from int256, reverting on\n overflow (when the input is less than smallest int32 or\n greater than largest int32).\n Counterpart to Solidity's `int32` operator.\n Requirements:\n - input must fit into 32 bits"},"id":4464,"implemented":true,"kind":"function","modifiers":[],"name":"toInt32","nameLocation":"33464:7:12","nodeType":"FunctionDefinition","parameters":{"id":4442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4441,"mutability":"mutable","name":"value","nameLocation":"33479:5:12","nodeType":"VariableDeclaration","scope":4464,"src":"33472:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4440,"name":"int256","nodeType":"ElementaryTypeName","src":"33472:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"33471:14:12"},"returnParameters":{"id":4445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4444,"mutability":"mutable","name":"downcasted","nameLocation":"33515:10:12","nodeType":"VariableDeclaration","scope":4464,"src":"33509:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"},"typeName":{"id":4443,"name":"int32","nodeType":"ElementaryTypeName","src":"33509:5:12","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"visibility":"internal"}],"src":"33508:18:12"},"scope":4583,"src":"33455:225:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4489,"nodeType":"Block","src":"34083:153:12","statements":[{"expression":{"id":4477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4472,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4470,"src":"34094:10:12","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4475,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4467,"src":"34113:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4474,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34107:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":4473,"name":"int24","nodeType":"ElementaryTypeName","src":"34107:5:12","typeDescriptions":{}}},"id":4476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34107:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"34094:25:12","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4478,"nodeType":"ExpressionStatement","src":"34094:25:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4479,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4470,"src":"34134:10:12","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4480,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4467,"src":"34148:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"34134:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4488,"nodeType":"IfStatement","src":"34130:99:12","trueBody":{"id":4487,"nodeType":"Block","src":"34155:74:12","statements":[{"errorCall":{"arguments":[{"hexValue":"3234","id":4483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"34207:2:12","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},{"id":4484,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4467,"src":"34211:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4482,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"34177:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34177:40:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4486,"nodeType":"RevertStatement","src":"34170:47:12"}]}}]},"documentation":{"id":4465,"nodeType":"StructuredDocumentation","src":"33688:317:12","text":" @dev Returns the downcasted int24 from int256, reverting on\n overflow (when the input is less than smallest int24 or\n greater than largest int24).\n Counterpart to Solidity's `int24` operator.\n Requirements:\n - input must fit into 24 bits"},"id":4490,"implemented":true,"kind":"function","modifiers":[],"name":"toInt24","nameLocation":"34020:7:12","nodeType":"FunctionDefinition","parameters":{"id":4468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4467,"mutability":"mutable","name":"value","nameLocation":"34035:5:12","nodeType":"VariableDeclaration","scope":4490,"src":"34028:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4466,"name":"int256","nodeType":"ElementaryTypeName","src":"34028:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"34027:14:12"},"returnParameters":{"id":4471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4470,"mutability":"mutable","name":"downcasted","nameLocation":"34071:10:12","nodeType":"VariableDeclaration","scope":4490,"src":"34065:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4469,"name":"int24","nodeType":"ElementaryTypeName","src":"34065:5:12","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"34064:18:12"},"scope":4583,"src":"34011:225:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4515,"nodeType":"Block","src":"34639:153:12","statements":[{"expression":{"id":4503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4498,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4496,"src":"34650:10:12","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4501,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4493,"src":"34669:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4500,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34663:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int16_$","typeString":"type(int16)"},"typeName":{"id":4499,"name":"int16","nodeType":"ElementaryTypeName","src":"34663:5:12","typeDescriptions":{}}},"id":4502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34663:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"src":"34650:25:12","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"id":4504,"nodeType":"ExpressionStatement","src":"34650:25:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4505,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4496,"src":"34690:10:12","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4506,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4493,"src":"34704:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"34690:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4514,"nodeType":"IfStatement","src":"34686:99:12","trueBody":{"id":4513,"nodeType":"Block","src":"34711:74:12","statements":[{"errorCall":{"arguments":[{"hexValue":"3136","id":4509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"34763:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},{"id":4510,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4493,"src":"34767:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4508,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"34733:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34733:40:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4512,"nodeType":"RevertStatement","src":"34726:47:12"}]}}]},"documentation":{"id":4491,"nodeType":"StructuredDocumentation","src":"34244:317:12","text":" @dev Returns the downcasted int16 from int256, reverting on\n overflow (when the input is less than smallest int16 or\n greater than largest int16).\n Counterpart to Solidity's `int16` operator.\n Requirements:\n - input must fit into 16 bits"},"id":4516,"implemented":true,"kind":"function","modifiers":[],"name":"toInt16","nameLocation":"34576:7:12","nodeType":"FunctionDefinition","parameters":{"id":4494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4493,"mutability":"mutable","name":"value","nameLocation":"34591:5:12","nodeType":"VariableDeclaration","scope":4516,"src":"34584:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4492,"name":"int256","nodeType":"ElementaryTypeName","src":"34584:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"34583:14:12"},"returnParameters":{"id":4497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4496,"mutability":"mutable","name":"downcasted","nameLocation":"34627:10:12","nodeType":"VariableDeclaration","scope":4516,"src":"34621:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"},"typeName":{"id":4495,"name":"int16","nodeType":"ElementaryTypeName","src":"34621:5:12","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"visibility":"internal"}],"src":"34620:18:12"},"scope":4583,"src":"34567:225:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4541,"nodeType":"Block","src":"35188:151:12","statements":[{"expression":{"id":4529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4524,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4522,"src":"35199:10:12","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4527,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4519,"src":"35217:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4526,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"35212:4:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int8_$","typeString":"type(int8)"},"typeName":{"id":4525,"name":"int8","nodeType":"ElementaryTypeName","src":"35212:4:12","typeDescriptions":{}}},"id":4528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"35212:11:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"src":"35199:24:12","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"id":4530,"nodeType":"ExpressionStatement","src":"35199:24:12"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4531,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4522,"src":"35238:10:12","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4532,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4519,"src":"35252:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"35238:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4540,"nodeType":"IfStatement","src":"35234:98:12","trueBody":{"id":4539,"nodeType":"Block","src":"35259:73:12","statements":[{"errorCall":{"arguments":[{"hexValue":"38","id":4535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35311:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"id":4536,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4519,"src":"35314:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4534,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"35281:29:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"35281:39:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4538,"nodeType":"RevertStatement","src":"35274:46:12"}]}}]},"documentation":{"id":4517,"nodeType":"StructuredDocumentation","src":"34800:312:12","text":" @dev Returns the downcasted int8 from int256, reverting on\n overflow (when the input is less than smallest int8 or\n greater than largest int8).\n Counterpart to Solidity's `int8` operator.\n Requirements:\n - input must fit into 8 bits"},"id":4542,"implemented":true,"kind":"function","modifiers":[],"name":"toInt8","nameLocation":"35127:6:12","nodeType":"FunctionDefinition","parameters":{"id":4520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4519,"mutability":"mutable","name":"value","nameLocation":"35141:5:12","nodeType":"VariableDeclaration","scope":4542,"src":"35134:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4518,"name":"int256","nodeType":"ElementaryTypeName","src":"35134:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"35133:14:12"},"returnParameters":{"id":4523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4522,"mutability":"mutable","name":"downcasted","nameLocation":"35176:10:12","nodeType":"VariableDeclaration","scope":4542,"src":"35171:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"},"typeName":{"id":4521,"name":"int8","nodeType":"ElementaryTypeName","src":"35171:4:12","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"visibility":"internal"}],"src":"35170:17:12"},"scope":4583,"src":"35118:221:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4571,"nodeType":"Block","src":"35588:256:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4550,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4545,"src":"35703:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[{"expression":{"arguments":[{"id":4555,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"35724:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":4554,"name":"int256","nodeType":"ElementaryTypeName","src":"35724:6:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"}],"id":4553,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"35719:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"35719:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int256","typeString":"type(int256)"}},"id":4557,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"35732:3:12","memberName":"max","nodeType":"MemberAccess","src":"35719:16:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"35711:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4551,"name":"uint256","nodeType":"ElementaryTypeName","src":"35711:7:12","typeDescriptions":{}}},"id":4558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"35711:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"35703:33:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4565,"nodeType":"IfStatement","src":"35699:107:12","trueBody":{"id":4564,"nodeType":"Block","src":"35738:68:12","statements":[{"errorCall":{"arguments":[{"id":4561,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4545,"src":"35788:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4560,"name":"SafeCastOverflowedUintToInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"35760:27:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":4562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"35760:34:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4563,"nodeType":"RevertStatement","src":"35753:41:12"}]}},{"expression":{"arguments":[{"id":4568,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4545,"src":"35830:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4567,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"35823:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":4566,"name":"int256","nodeType":"ElementaryTypeName","src":"35823:6:12","typeDescriptions":{}}},"id":4569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"35823:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4549,"id":4570,"nodeType":"Return","src":"35816:20:12"}]},"documentation":{"id":4543,"nodeType":"StructuredDocumentation","src":"35347:171:12","text":" @dev Converts an unsigned uint256 into a signed int256.\n Requirements:\n - input must be less than or equal to maxInt256."},"id":4572,"implemented":true,"kind":"function","modifiers":[],"name":"toInt256","nameLocation":"35533:8:12","nodeType":"FunctionDefinition","parameters":{"id":4546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4545,"mutability":"mutable","name":"value","nameLocation":"35550:5:12","nodeType":"VariableDeclaration","scope":4572,"src":"35542:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4544,"name":"uint256","nodeType":"ElementaryTypeName","src":"35542:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"35541:15:12"},"returnParameters":{"id":4549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4548,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4572,"src":"35580:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4547,"name":"int256","nodeType":"ElementaryTypeName","src":"35580:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"35579:8:12"},"scope":4583,"src":"35524:320:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4581,"nodeType":"Block","src":"36008:91:12","statements":[{"AST":{"nodeType":"YulBlock","src":"36044:48:12","statements":[{"nodeType":"YulAssignment","src":"36059:22:12","value":{"arguments":[{"arguments":[{"name":"b","nodeType":"YulIdentifier","src":"36078:1:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"36071:6:12"},"nodeType":"YulFunctionCall","src":"36071:9:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"36064:6:12"},"nodeType":"YulFunctionCall","src":"36064:17:12"},"variableNames":[{"name":"u","nodeType":"YulIdentifier","src":"36059:1:12"}]}]},"evmVersion":"london","externalReferences":[{"declaration":4575,"isOffset":false,"isSlot":false,"src":"36078:1:12","valueSize":1},{"declaration":4578,"isOffset":false,"isSlot":false,"src":"36059:1:12","valueSize":1}],"flags":["memory-safe"],"id":4580,"nodeType":"InlineAssembly","src":"36019:73:12"}]},"documentation":{"id":4573,"nodeType":"StructuredDocumentation","src":"35852:92:12","text":" @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump."},"id":4582,"implemented":true,"kind":"function","modifiers":[],"name":"toUint","nameLocation":"35959:6:12","nodeType":"FunctionDefinition","parameters":{"id":4576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4575,"mutability":"mutable","name":"b","nameLocation":"35971:1:12","nodeType":"VariableDeclaration","scope":4582,"src":"35966:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4574,"name":"bool","nodeType":"ElementaryTypeName","src":"35966:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"35965:8:12"},"returnParameters":{"id":4579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4578,"mutability":"mutable","name":"u","nameLocation":"36005:1:12","nodeType":"VariableDeclaration","scope":4582,"src":"35997:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4577,"name":"uint256","nodeType":"ElementaryTypeName","src":"35997:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"35996:11:12"},"scope":4583,"src":"35950:149:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4584,"src":"786:35316:12","usedErrors":[2828,2833,2840,2845]}],"src":"196:35906:12"},"id":12},"contracts/SafeERC20.sol":{"ast":{"absolutePath":"contracts/SafeERC20.sol","exportedSymbols":{"Address":[294],"IERC20":[1488],"IERC20Permit":[1545],"SafeERC20":[4864]},"id":4865,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4585,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"35:23:13"},{"absolutePath":"contracts/IERC20.sol","file":"./IERC20.sol","id":4586,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4865,"sourceUnit":1489,"src":"62:22:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/IERC20Permit.sol","file":"./IERC20Permit.sol","id":4587,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4865,"sourceUnit":1546,"src":"86:28:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/Address.sol","file":"./Address.sol","id":4588,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4865,"sourceUnit":295,"src":"116:23:13","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":4589,"nodeType":"StructuredDocumentation","src":"143:465:13","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":4864,"linearizedBaseContracts":[4864],"name":"SafeERC20","nameLocation":"618:9:13","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4592,"libraryName":{"id":4590,"name":"Address","nameLocations":["641:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":294,"src":"641:7:13"},"nodeType":"UsingForDirective","src":"635:26:13","typeName":{"id":4591,"name":"address","nodeType":"ElementaryTypeName","src":"653:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":4614,"nodeType":"Block","src":"775:105:13","statements":[{"expression":{"arguments":[{"id":4603,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4595,"src":"806:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4606,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4595,"src":"836:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"}},"id":4607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"842:8:13","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":1442,"src":"836:14:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"851:8:13","memberName":"selector","nodeType":"MemberAccess","src":"836:23:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4609,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4597,"src":"861:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4610,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4599,"src":"865:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4604,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"813:3:13","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4605,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"817:18:13","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"813:22:13","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"813:58:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4602,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4863,"src":"786:19:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1488_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"786:86:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4613,"nodeType":"ExpressionStatement","src":"786:86:13"}]},"id":4615,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"678:12:13","nodeType":"FunctionDefinition","parameters":{"id":4600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4595,"mutability":"mutable","name":"token","nameLocation":"708:5:13","nodeType":"VariableDeclaration","scope":4615,"src":"701:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"},"typeName":{"id":4594,"nodeType":"UserDefinedTypeName","pathNode":{"id":4593,"name":"IERC20","nameLocations":["701:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1488,"src":"701:6:13"},"referencedDeclaration":1488,"src":"701:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4597,"mutability":"mutable","name":"to","nameLocation":"732:2:13","nodeType":"VariableDeclaration","scope":4615,"src":"724:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4596,"name":"address","nodeType":"ElementaryTypeName","src":"724:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4599,"mutability":"mutable","name":"value","nameLocation":"753:5:13","nodeType":"VariableDeclaration","scope":4615,"src":"745:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4598,"name":"uint256","nodeType":"ElementaryTypeName","src":"745:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"690:75:13"},"returnParameters":{"id":4601,"nodeType":"ParameterList","parameters":[],"src":"775:0:13"},"scope":4864,"src":"669:211:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4640,"nodeType":"Block","src":"1021:115:13","statements":[{"expression":{"arguments":[{"id":4628,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4618,"src":"1052:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4631,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4618,"src":"1082:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"}},"id":4632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1088:12:13","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":1471,"src":"1082:18:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":4633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1101:8:13","memberName":"selector","nodeType":"MemberAccess","src":"1082:27:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4634,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4620,"src":"1111:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4635,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4622,"src":"1117:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4636,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4624,"src":"1121:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4629,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1059:3:13","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4630,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1063:18:13","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1059:22:13","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1059:68:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4627,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4863,"src":"1032:19:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1488_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1032:96:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4639,"nodeType":"ExpressionStatement","src":"1032:96:13"}]},"id":4641,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"897:16:13","nodeType":"FunctionDefinition","parameters":{"id":4625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4618,"mutability":"mutable","name":"token","nameLocation":"931:5:13","nodeType":"VariableDeclaration","scope":4641,"src":"924:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"},"typeName":{"id":4617,"nodeType":"UserDefinedTypeName","pathNode":{"id":4616,"name":"IERC20","nameLocations":["924:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1488,"src":"924:6:13"},"referencedDeclaration":1488,"src":"924:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4620,"mutability":"mutable","name":"from","nameLocation":"955:4:13","nodeType":"VariableDeclaration","scope":4641,"src":"947:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4619,"name":"address","nodeType":"ElementaryTypeName","src":"947:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4622,"mutability":"mutable","name":"to","nameLocation":"978:2:13","nodeType":"VariableDeclaration","scope":4641,"src":"970:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4621,"name":"address","nodeType":"ElementaryTypeName","src":"970:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4624,"mutability":"mutable","name":"value","nameLocation":"999:5:13","nodeType":"VariableDeclaration","scope":4641,"src":"991:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4623,"name":"uint256","nodeType":"ElementaryTypeName","src":"991:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"913:98:13"},"returnParameters":{"id":4626,"nodeType":"ParameterList","parameters":[],"src":"1021:0:13"},"scope":4864,"src":"888:248:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4684,"nodeType":"Block","src":"1515:506:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4653,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4649,"src":"1769:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1778:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1769:10:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4656,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1768:12:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":4661,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1809:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$4864","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$4864","typeString":"library SafeERC20"}],"id":4660,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1801:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4659,"name":"address","nodeType":"ElementaryTypeName","src":"1801:7:13","typeDescriptions":{}}},"id":4662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1801:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4663,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4647,"src":"1816:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4657,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4645,"src":"1785:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"}},"id":4658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1791:9:13","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1451,"src":"1785:15:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":4664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1785:39:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1828:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1785:44:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4667,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1784:46:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1768:62:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":4669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1845:56:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":4652,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1746:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1746:166:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4671,"nodeType":"ExpressionStatement","src":"1746:166:13"},{"expression":{"arguments":[{"id":4673,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4645,"src":"1943:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4676,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4645,"src":"1973:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"}},"id":4677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1979:7:13","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1460,"src":"1973:13:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1987:8:13","memberName":"selector","nodeType":"MemberAccess","src":"1973:22:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4679,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4647,"src":"1997:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4680,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4649,"src":"2006:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4674,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1950:3:13","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4675,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1954:18:13","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1950:22:13","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1950:62:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4672,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4863,"src":"1923:19:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1488_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1923:90:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4683,"nodeType":"ExpressionStatement","src":"1923:90:13"}]},"documentation":{"id":4642,"nodeType":"StructuredDocumentation","src":"1144:255:13","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":4685,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1414:11:13","nodeType":"FunctionDefinition","parameters":{"id":4650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4645,"mutability":"mutable","name":"token","nameLocation":"1443:5:13","nodeType":"VariableDeclaration","scope":4685,"src":"1436:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"},"typeName":{"id":4644,"nodeType":"UserDefinedTypeName","pathNode":{"id":4643,"name":"IERC20","nameLocations":["1436:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1488,"src":"1436:6:13"},"referencedDeclaration":1488,"src":"1436:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4647,"mutability":"mutable","name":"spender","nameLocation":"1467:7:13","nodeType":"VariableDeclaration","scope":4685,"src":"1459:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4646,"name":"address","nodeType":"ElementaryTypeName","src":"1459:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4649,"mutability":"mutable","name":"value","nameLocation":"1493:5:13","nodeType":"VariableDeclaration","scope":4685,"src":"1485:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4648,"name":"uint256","nodeType":"ElementaryTypeName","src":"1485:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1425:80:13"},"returnParameters":{"id":4651,"nodeType":"ParameterList","parameters":[],"src":"1515:0:13"},"scope":4864,"src":"1405:616:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4720,"nodeType":"Block","src":"2149:197:13","statements":[{"assignments":[4696],"declarations":[{"constant":false,"id":4696,"mutability":"mutable","name":"newAllowance","nameLocation":"2168:12:13","nodeType":"VariableDeclaration","scope":4720,"src":"2160:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4695,"name":"uint256","nodeType":"ElementaryTypeName","src":"2160:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4707,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":4701,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2207:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$4864","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$4864","typeString":"library SafeERC20"}],"id":4700,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2199:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4699,"name":"address","nodeType":"ElementaryTypeName","src":"2199:7:13","typeDescriptions":{}}},"id":4702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2199:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4703,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4690,"src":"2214:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4697,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4688,"src":"2183:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"}},"id":4698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2189:9:13","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1451,"src":"2183:15:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":4704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2183:39:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4705,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4692,"src":"2225:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2183:47:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2160:70:13"},{"expression":{"arguments":[{"id":4709,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4688,"src":"2261:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4712,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4688,"src":"2291:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"}},"id":4713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2297:7:13","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1460,"src":"2291:13:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2305:8:13","memberName":"selector","nodeType":"MemberAccess","src":"2291:22:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4715,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4690,"src":"2315:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4716,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4696,"src":"2324:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4710,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2268:3:13","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4711,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2272:18:13","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2268:22:13","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2268:69:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4708,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4863,"src":"2241:19:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1488_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2241:97:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4719,"nodeType":"ExpressionStatement","src":"2241:97:13"}]},"id":4721,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2038:21:13","nodeType":"FunctionDefinition","parameters":{"id":4693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4688,"mutability":"mutable","name":"token","nameLocation":"2077:5:13","nodeType":"VariableDeclaration","scope":4721,"src":"2070:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"},"typeName":{"id":4687,"nodeType":"UserDefinedTypeName","pathNode":{"id":4686,"name":"IERC20","nameLocations":["2070:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1488,"src":"2070:6:13"},"referencedDeclaration":1488,"src":"2070:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4690,"mutability":"mutable","name":"spender","nameLocation":"2101:7:13","nodeType":"VariableDeclaration","scope":4721,"src":"2093:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4689,"name":"address","nodeType":"ElementaryTypeName","src":"2093:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4692,"mutability":"mutable","name":"value","nameLocation":"2127:5:13","nodeType":"VariableDeclaration","scope":4721,"src":"2119:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4691,"name":"uint256","nodeType":"ElementaryTypeName","src":"2119:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2059:80:13"},"returnParameters":{"id":4694,"nodeType":"ParameterList","parameters":[],"src":"2149:0:13"},"scope":4864,"src":"2029:317:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4768,"nodeType":"Block","src":"2474:377:13","statements":[{"id":4767,"nodeType":"UncheckedBlock","src":"2485:359:13","statements":[{"assignments":[4732],"declarations":[{"constant":false,"id":4732,"mutability":"mutable","name":"oldAllowance","nameLocation":"2518:12:13","nodeType":"VariableDeclaration","scope":4767,"src":"2510:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4731,"name":"uint256","nodeType":"ElementaryTypeName","src":"2510:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4741,"initialValue":{"arguments":[{"arguments":[{"id":4737,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2557:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$4864","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$4864","typeString":"library SafeERC20"}],"id":4736,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2549:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4735,"name":"address","nodeType":"ElementaryTypeName","src":"2549:7:13","typeDescriptions":{}}},"id":4738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2549:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4739,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4726,"src":"2564:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4733,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4724,"src":"2533:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"}},"id":4734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2539:9:13","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1451,"src":"2533:15:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":4740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2533:39:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2510:62:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4743,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4732,"src":"2595:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4744,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4728,"src":"2611:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2595:21:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":4746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2618:43:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":4742,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2587:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2587:75:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4748,"nodeType":"ExpressionStatement","src":"2587:75:13"},{"assignments":[4750],"declarations":[{"constant":false,"id":4750,"mutability":"mutable","name":"newAllowance","nameLocation":"2685:12:13","nodeType":"VariableDeclaration","scope":4767,"src":"2677:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4749,"name":"uint256","nodeType":"ElementaryTypeName","src":"2677:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4754,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4751,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4732,"src":"2700:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4752,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4728,"src":"2715:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2700:20:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2677:43:13"},{"expression":{"arguments":[{"id":4756,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4724,"src":"2755:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4759,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4724,"src":"2785:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"}},"id":4760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2791:7:13","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1460,"src":"2785:13:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2799:8:13","memberName":"selector","nodeType":"MemberAccess","src":"2785:22:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4762,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4726,"src":"2809:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4763,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4750,"src":"2818:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4757,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2762:3:13","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4758,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2766:18:13","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2762:22:13","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2762:69:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4755,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4863,"src":"2735:19:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1488_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2735:97:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4766,"nodeType":"ExpressionStatement","src":"2735:97:13"}]}]},"id":4769,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"2363:21:13","nodeType":"FunctionDefinition","parameters":{"id":4729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4724,"mutability":"mutable","name":"token","nameLocation":"2402:5:13","nodeType":"VariableDeclaration","scope":4769,"src":"2395:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"},"typeName":{"id":4723,"nodeType":"UserDefinedTypeName","pathNode":{"id":4722,"name":"IERC20","nameLocations":["2395:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1488,"src":"2395:6:13"},"referencedDeclaration":1488,"src":"2395:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4726,"mutability":"mutable","name":"spender","nameLocation":"2426:7:13","nodeType":"VariableDeclaration","scope":4769,"src":"2418:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4725,"name":"address","nodeType":"ElementaryTypeName","src":"2418:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4728,"mutability":"mutable","name":"value","nameLocation":"2452:5:13","nodeType":"VariableDeclaration","scope":4769,"src":"2444:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4727,"name":"uint256","nodeType":"ElementaryTypeName","src":"2444:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2384:80:13"},"returnParameters":{"id":4730,"nodeType":"ParameterList","parameters":[],"src":"2474:0:13"},"scope":4864,"src":"2354:497:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4824,"nodeType":"Block","src":"3083:262:13","statements":[{"assignments":[4790],"declarations":[{"constant":false,"id":4790,"mutability":"mutable","name":"nonceBefore","nameLocation":"3102:11:13","nodeType":"VariableDeclaration","scope":4824,"src":"3094:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4789,"name":"uint256","nodeType":"ElementaryTypeName","src":"3094:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4795,"initialValue":{"arguments":[{"id":4793,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4774,"src":"3129:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4791,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4772,"src":"3116:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1545","typeString":"contract IERC20Permit"}},"id":4792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3122:6:13","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":1538,"src":"3116:12:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":4794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3116:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3094:41:13"},{"expression":{"arguments":[{"id":4799,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4774,"src":"3159:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4800,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4776,"src":"3166:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4801,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4778,"src":"3175:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4802,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4780,"src":"3182:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4803,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4782,"src":"3192:1:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":4804,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"3195:1:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4805,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4786,"src":"3198:1:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4796,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4772,"src":"3146:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1545","typeString":"contract IERC20Permit"}},"id":4798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3152:6:13","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":1530,"src":"3146:12:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":4806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3146:54:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4807,"nodeType":"ExpressionStatement","src":"3146:54:13"},{"assignments":[4809],"declarations":[{"constant":false,"id":4809,"mutability":"mutable","name":"nonceAfter","nameLocation":"3219:10:13","nodeType":"VariableDeclaration","scope":4824,"src":"3211:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4808,"name":"uint256","nodeType":"ElementaryTypeName","src":"3211:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4814,"initialValue":{"arguments":[{"id":4812,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4774,"src":"3245:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4810,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4772,"src":"3232:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1545","typeString":"contract IERC20Permit"}},"id":4811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3238:6:13","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":1538,"src":"3232:12:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":4813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3232:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3211:40:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4816,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4809,"src":"3270:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4817,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4790,"src":"3284:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3298:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3284:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3270:29:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":4821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3301:35:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":4815,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3262:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3262:75:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4823,"nodeType":"ExpressionStatement","src":"3262:75:13"}]},"id":4825,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"2868:10:13","nodeType":"FunctionDefinition","parameters":{"id":4787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4772,"mutability":"mutable","name":"token","nameLocation":"2902:5:13","nodeType":"VariableDeclaration","scope":4825,"src":"2889:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1545","typeString":"contract IERC20Permit"},"typeName":{"id":4771,"nodeType":"UserDefinedTypeName","pathNode":{"id":4770,"name":"IERC20Permit","nameLocations":["2889:12:13"],"nodeType":"IdentifierPath","referencedDeclaration":1545,"src":"2889:12:13"},"referencedDeclaration":1545,"src":"2889:12:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1545","typeString":"contract IERC20Permit"}},"visibility":"internal"},{"constant":false,"id":4774,"mutability":"mutable","name":"owner","nameLocation":"2926:5:13","nodeType":"VariableDeclaration","scope":4825,"src":"2918:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4773,"name":"address","nodeType":"ElementaryTypeName","src":"2918:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4776,"mutability":"mutable","name":"spender","nameLocation":"2950:7:13","nodeType":"VariableDeclaration","scope":4825,"src":"2942:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4775,"name":"address","nodeType":"ElementaryTypeName","src":"2942:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4778,"mutability":"mutable","name":"value","nameLocation":"2976:5:13","nodeType":"VariableDeclaration","scope":4825,"src":"2968:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4777,"name":"uint256","nodeType":"ElementaryTypeName","src":"2968:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4780,"mutability":"mutable","name":"deadline","nameLocation":"3000:8:13","nodeType":"VariableDeclaration","scope":4825,"src":"2992:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4779,"name":"uint256","nodeType":"ElementaryTypeName","src":"2992:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4782,"mutability":"mutable","name":"v","nameLocation":"3025:1:13","nodeType":"VariableDeclaration","scope":4825,"src":"3019:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4781,"name":"uint8","nodeType":"ElementaryTypeName","src":"3019:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4784,"mutability":"mutable","name":"r","nameLocation":"3045:1:13","nodeType":"VariableDeclaration","scope":4825,"src":"3037:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4783,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3037:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4786,"mutability":"mutable","name":"s","nameLocation":"3065:1:13","nodeType":"VariableDeclaration","scope":4825,"src":"3057:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4785,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3057:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2878:195:13"},"returnParameters":{"id":4788,"nodeType":"ParameterList","parameters":[],"src":"3083:0:13"},"scope":4864,"src":"2859:486:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4862,"nodeType":"Block","src":"3806:646:13","statements":[{"assignments":[4835],"declarations":[{"constant":false,"id":4835,"mutability":"mutable","name":"returndata","nameLocation":"4173:10:13","nodeType":"VariableDeclaration","scope":4862,"src":"4160:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4834,"name":"bytes","nodeType":"ElementaryTypeName","src":"4160:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4844,"initialValue":{"arguments":[{"id":4841,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4831,"src":"4214:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":4842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4220:34:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":4838,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4829,"src":"4194:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"}],"id":4837,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4186:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4836,"name":"address","nodeType":"ElementaryTypeName","src":"4186:7:13","typeDescriptions":{}}},"id":4839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4186:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4201:12:13","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":88,"src":"4186:27:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":4843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4186:69:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4160:95:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4845,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4835,"src":"4270:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4281:6:13","memberName":"length","nodeType":"MemberAccess","src":"4270:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4290:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4270:21:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4861,"nodeType":"IfStatement","src":"4266:179:13","trueBody":{"id":4860,"nodeType":"Block","src":"4293:152:13","statements":[{"expression":{"arguments":[{"arguments":[{"id":4852,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4835,"src":"4367:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":4854,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4380:4:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":4853,"name":"bool","nodeType":"ElementaryTypeName","src":"4380:4:13","typeDescriptions":{}}}],"id":4855,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4379:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":4850,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4356:3:13","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4851,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4360:6:13","memberName":"decode","nodeType":"MemberAccess","src":"4356:10:13","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":4856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4356:30:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":4857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4388:44:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":4849,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4348:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4348:85:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4859,"nodeType":"ExpressionStatement","src":"4348:85:13"}]}}]},"documentation":{"id":4826,"nodeType":"StructuredDocumentation","src":"3353:377:13","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":4863,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"3745:19:13","nodeType":"FunctionDefinition","parameters":{"id":4832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4829,"mutability":"mutable","name":"token","nameLocation":"3772:5:13","nodeType":"VariableDeclaration","scope":4863,"src":"3765:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"},"typeName":{"id":4828,"nodeType":"UserDefinedTypeName","pathNode":{"id":4827,"name":"IERC20","nameLocations":["3765:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1488,"src":"3765:6:13"},"referencedDeclaration":1488,"src":"3765:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1488","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4831,"mutability":"mutable","name":"data","nameLocation":"3792:4:13","nodeType":"VariableDeclaration","scope":4863,"src":"3779:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4830,"name":"bytes","nodeType":"ElementaryTypeName","src":"3779:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3764:33:13"},"returnParameters":{"id":4833,"nodeType":"ParameterList","parameters":[],"src":"3806:0:13"},"scope":4864,"src":"3736:716:13","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":4865,"src":"610:3845:13","usedErrors":[]}],"src":"35:4420:13"},"id":13},"contracts/ShortStrings.sol":{"ast":{"absolutePath":"contracts/ShortStrings.sol","exportedSymbols":{"ShortString":[4870],"ShortStrings":[5081],"StorageSlot":[5349]},"id":5082,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4866,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"109:23:14"},{"absolutePath":"contracts/StorageSlot.sol","file":"./StorageSlot.sol","id":4868,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5082,"sourceUnit":5350,"src":"136:46:14","symbolAliases":[{"foreign":{"id":4867,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5349,"src":"144:11:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"ShortString","id":4870,"name":"ShortString","nameLocation":"361:11:14","nodeType":"UserDefinedValueTypeDefinition","src":"356:28:14","underlyingType":{"id":4869,"name":"bytes32","nodeType":"ElementaryTypeName","src":"376:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"abstract":false,"baseContracts":[],"canonicalName":"ShortStrings","contractDependencies":[],"contractKind":"library","documentation":{"id":4871,"nodeType":"StructuredDocumentation","src":"388:903:14","text":" @dev This library provides functions to convert short memory strings\n into a `ShortString` type that can be used as an immutable variable.\n Strings of arbitrary length can be optimized using this library if\n they are short enough (up to 31 bytes) by packing them with their\n length (1 byte) in a single EVM word (32 bytes). Additionally, a\n fallback mechanism can be used for every other case.\n Usage example:\n ```solidity\n contract Named {\n     using ShortStrings for *;\n     ShortString private immutable _name;\n     string private _nameFallback;\n     constructor(string memory contractName) {\n         _name = contractName.toShortStringWithFallback(_nameFallback);\n     }\n     function name() external view returns (string memory) {\n         return _name.toStringWithFallback(_nameFallback);\n     }\n }\n ```"},"fullyImplemented":true,"id":5081,"linearizedBaseContracts":[5081],"name":"ShortStrings","nameLocation":"1301:12:14","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":4874,"mutability":"constant","name":"FALLBACK_SENTINEL","nameLocation":"1410:17:14","nodeType":"VariableDeclaration","scope":5081,"src":"1385:111:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4872,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1385:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030304646","id":4873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1430:66:14","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0x00000000000000000000000000000000000000000000000000000000000000FF"},"visibility":"private"},{"errorSelector":"305a27a9","id":4878,"name":"StringTooLong","nameLocation":"1511:13:14","nodeType":"ErrorDefinition","parameters":{"id":4877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4876,"mutability":"mutable","name":"str","nameLocation":"1532:3:14","nodeType":"VariableDeclaration","scope":4878,"src":"1525:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4875,"name":"string","nodeType":"ElementaryTypeName","src":"1525:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1524:12:14"},"src":"1505:32:14"},{"errorSelector":"b3512b0c","id":4880,"name":"InvalidShortString","nameLocation":"1549:18:14","nodeType":"ErrorDefinition","parameters":{"id":4879,"nodeType":"ParameterList","parameters":[],"src":"1567:2:14"},"src":"1543:27:14"},{"body":{"id":4923,"nodeType":"Block","src":"1836:214:14","statements":[{"assignments":[4890],"declarations":[{"constant":false,"id":4890,"mutability":"mutable","name":"bstr","nameLocation":"1860:4:14","nodeType":"VariableDeclaration","scope":4923,"src":"1847:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4889,"name":"bytes","nodeType":"ElementaryTypeName","src":"1847:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4895,"initialValue":{"arguments":[{"id":4893,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4883,"src":"1873:3:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4892,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1867:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4891,"name":"bytes","nodeType":"ElementaryTypeName","src":"1867:5:14","typeDescriptions":{}}},"id":4894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1867:10:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1847:30:14"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4896,"name":"bstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4890,"src":"1892:4:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1897:6:14","memberName":"length","nodeType":"MemberAccess","src":"1892:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3331","id":4898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1906:2:14","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"src":"1892:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4905,"nodeType":"IfStatement","src":"1888:74:14","trueBody":{"id":4904,"nodeType":"Block","src":"1910:52:14","statements":[{"errorCall":{"arguments":[{"id":4901,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4883,"src":"1946:3:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4900,"name":"StringTooLong","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4878,"src":"1932:13:14","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":4902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1932:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4903,"nodeType":"RevertStatement","src":"1925:25:14"}]}},{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":4914,"name":"bstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4890,"src":"2020:4:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4913,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2012:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4912,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2012:7:14","typeDescriptions":{}}},"id":4915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2012:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4911,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2004:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4910,"name":"uint256","nodeType":"ElementaryTypeName","src":"2004:7:14","typeDescriptions":{}}},"id":4916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2004:22:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"expression":{"id":4917,"name":"bstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4890,"src":"2029:4:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2034:6:14","memberName":"length","nodeType":"MemberAccess","src":"2029:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2004:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4909,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1996:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4908,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1996:7:14","typeDescriptions":{}}},"id":4920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1996:45:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4906,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"1979:11:14","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$4870_$","typeString":"type(ShortString)"}},"id":4907,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1991:4:14","memberName":"wrap","nodeType":"MemberAccess","src":"1979:16:14","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$4870_$","typeString":"function (bytes32) pure returns (ShortString)"}},"id":4921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1979:63:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}},"functionReturnParameters":4888,"id":4922,"nodeType":"Return","src":"1972:70:14"}]},"documentation":{"id":4881,"nodeType":"StructuredDocumentation","src":"1578:174:14","text":" @dev Encode a string of at most 31 chars into a `ShortString`.\n This will trigger a `StringTooLong` error is the input string is too long."},"id":4924,"implemented":true,"kind":"function","modifiers":[],"name":"toShortString","nameLocation":"1767:13:14","nodeType":"FunctionDefinition","parameters":{"id":4884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4883,"mutability":"mutable","name":"str","nameLocation":"1795:3:14","nodeType":"VariableDeclaration","scope":4924,"src":"1781:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4882,"name":"string","nodeType":"ElementaryTypeName","src":"1781:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1780:19:14"},"returnParameters":{"id":4888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4887,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4924,"src":"1823:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"},"typeName":{"id":4886,"nodeType":"UserDefinedTypeName","pathNode":{"id":4885,"name":"ShortString","nameLocations":["1823:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":4870,"src":"1823:11:14"},"referencedDeclaration":4870,"src":"1823:11:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}},"visibility":"internal"}],"src":"1822:13:14"},"scope":5081,"src":"1758:292:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4949,"nodeType":"Block","src":"2213:313:14","statements":[{"assignments":[4934],"declarations":[{"constant":false,"id":4934,"mutability":"mutable","name":"len","nameLocation":"2232:3:14","nodeType":"VariableDeclaration","scope":4949,"src":"2224:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4933,"name":"uint256","nodeType":"ElementaryTypeName","src":"2224:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4938,"initialValue":{"arguments":[{"id":4936,"name":"sstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"2249:4:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}],"id":4935,"name":"byteLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4982,"src":"2238:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$4870_$returns$_t_uint256_$","typeString":"function (ShortString) pure returns (uint256)"}},"id":4937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2238:16:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2224:30:14"},{"assignments":[4940],"declarations":[{"constant":false,"id":4940,"mutability":"mutable","name":"str","nameLocation":"2358:3:14","nodeType":"VariableDeclaration","scope":4949,"src":"2344:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4939,"name":"string","nodeType":"ElementaryTypeName","src":"2344:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":4945,"initialValue":{"arguments":[{"hexValue":"3332","id":4943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2375:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"id":4942,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2364:10:14","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":4941,"name":"string","nodeType":"ElementaryTypeName","src":"2368:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":4944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2364:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2344:34:14"},{"AST":{"nodeType":"YulBlock","src":"2414:84:14","statements":[{"expression":{"arguments":[{"name":"str","nodeType":"YulIdentifier","src":"2436:3:14"},{"name":"len","nodeType":"YulIdentifier","src":"2441:3:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2429:6:14"},"nodeType":"YulFunctionCall","src":"2429:16:14"},"nodeType":"YulExpressionStatement","src":"2429:16:14"},{"expression":{"arguments":[{"arguments":[{"name":"str","nodeType":"YulIdentifier","src":"2470:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"2475:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2466:3:14"},"nodeType":"YulFunctionCall","src":"2466:14:14"},{"name":"sstr","nodeType":"YulIdentifier","src":"2482:4:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2459:6:14"},"nodeType":"YulFunctionCall","src":"2459:28:14"},"nodeType":"YulExpressionStatement","src":"2459:28:14"}]},"evmVersion":"london","externalReferences":[{"declaration":4934,"isOffset":false,"isSlot":false,"src":"2441:3:14","valueSize":1},{"declaration":4928,"isOffset":false,"isSlot":false,"src":"2482:4:14","valueSize":1},{"declaration":4940,"isOffset":false,"isSlot":false,"src":"2436:3:14","valueSize":1},{"declaration":4940,"isOffset":false,"isSlot":false,"src":"2470:3:14","valueSize":1}],"flags":["memory-safe"],"id":4946,"nodeType":"InlineAssembly","src":"2389:109:14"},{"expression":{"id":4947,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4940,"src":"2515:3:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4932,"id":4948,"nodeType":"Return","src":"2508:10:14"}]},"documentation":{"id":4925,"nodeType":"StructuredDocumentation","src":"2058:75:14","text":" @dev Decode a `ShortString` back to a \"normal\" string."},"id":4950,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"2148:8:14","nodeType":"FunctionDefinition","parameters":{"id":4929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4928,"mutability":"mutable","name":"sstr","nameLocation":"2169:4:14","nodeType":"VariableDeclaration","scope":4950,"src":"2157:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"},"typeName":{"id":4927,"nodeType":"UserDefinedTypeName","pathNode":{"id":4926,"name":"ShortString","nameLocations":["2157:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":4870,"src":"2157:11:14"},"referencedDeclaration":4870,"src":"2157:11:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}},"visibility":"internal"}],"src":"2156:18:14"},"returnParameters":{"id":4932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4931,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4950,"src":"2198:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4930,"name":"string","nodeType":"ElementaryTypeName","src":"2198:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2197:15:14"},"scope":5081,"src":"2139:387:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4981,"nodeType":"Block","src":"2673:181:14","statements":[{"assignments":[4960],"declarations":[{"constant":false,"id":4960,"mutability":"mutable","name":"result","nameLocation":"2692:6:14","nodeType":"VariableDeclaration","scope":4981,"src":"2684:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4959,"name":"uint256","nodeType":"ElementaryTypeName","src":"2684:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4970,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":4965,"name":"sstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"2728:4:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}],"expression":{"id":4963,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"2709:11:14","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$4870_$","typeString":"type(ShortString)"}},"id":4964,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2721:6:14","memberName":"unwrap","nodeType":"MemberAccess","src":"2709:18:14","typeDescriptions":{"typeIdentifier":"t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$4870_$returns$_t_bytes32_$","typeString":"function (ShortString) pure returns (bytes32)"}},"id":4966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2709:24:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4962,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2701:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4961,"name":"uint256","nodeType":"ElementaryTypeName","src":"2701:7:14","typeDescriptions":{}}},"id":4967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2701:33:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30784646","id":4968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2737:4:14","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xFF"},"src":"2701:40:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2684:57:14"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4971,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4960,"src":"2756:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3331","id":4972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2765:2:14","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"src":"2756:11:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4978,"nodeType":"IfStatement","src":"2752:71:14","trueBody":{"id":4977,"nodeType":"Block","src":"2769:54:14","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4974,"name":"InvalidShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"2791:18:14","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2791:20:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4976,"nodeType":"RevertStatement","src":"2784:27:14"}]}},{"expression":{"id":4979,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4960,"src":"2840:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4958,"id":4980,"nodeType":"Return","src":"2833:13:14"}]},"documentation":{"id":4951,"nodeType":"StructuredDocumentation","src":"2534:63:14","text":" @dev Return the length of a `ShortString`."},"id":4982,"implemented":true,"kind":"function","modifiers":[],"name":"byteLength","nameLocation":"2612:10:14","nodeType":"FunctionDefinition","parameters":{"id":4955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4954,"mutability":"mutable","name":"sstr","nameLocation":"2635:4:14","nodeType":"VariableDeclaration","scope":4982,"src":"2623:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"},"typeName":{"id":4953,"nodeType":"UserDefinedTypeName","pathNode":{"id":4952,"name":"ShortString","nameLocations":["2623:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":4870,"src":"2623:11:14"},"referencedDeclaration":4870,"src":"2623:11:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}},"visibility":"internal"}],"src":"2622:18:14"},"returnParameters":{"id":4958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4957,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4982,"src":"2664:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4956,"name":"uint256","nodeType":"ElementaryTypeName","src":"2664:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2663:9:14"},"scope":5081,"src":"2603:251:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5021,"nodeType":"Block","src":"3082:238:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":4995,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4985,"src":"3103:5:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4994,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3097:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4993,"name":"bytes","nodeType":"ElementaryTypeName","src":"3097:5:14","typeDescriptions":{}}},"id":4996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3097:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3110:6:14","memberName":"length","nodeType":"MemberAccess","src":"3097:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3332","id":4998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3119:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3097:24:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5019,"nodeType":"Block","src":"3183:130:14","statements":[{"expression":{"id":5012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":5008,"name":"store","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4987,"src":"3224:5:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}],"expression":{"id":5005,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5349,"src":"3198:11:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$5349_$","typeString":"type(library StorageSlot)"}},"id":5007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3210:13:14","memberName":"getStringSlot","nodeType":"MemberAccess","referencedDeclaration":5326,"src":"3198:25:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_storage_ptr_$returns$_t_struct$_StringSlot_$5246_storage_ptr_$","typeString":"function (string storage pointer) pure returns (struct StorageSlot.StringSlot storage pointer)"}},"id":5009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3198:32:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$5246_storage_ptr","typeString":"struct StorageSlot.StringSlot storage pointer"}},"id":5010,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3231:5:14","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":5245,"src":"3198:38:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5011,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4985,"src":"3239:5:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"3198:46:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":5013,"nodeType":"ExpressionStatement","src":"3198:46:14"},{"expression":{"arguments":[{"id":5016,"name":"FALLBACK_SENTINEL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"3283:17:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5014,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"3266:11:14","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$4870_$","typeString":"type(ShortString)"}},"id":5015,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3278:4:14","memberName":"wrap","nodeType":"MemberAccess","src":"3266:16:14","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$4870_$","typeString":"function (bytes32) pure returns (ShortString)"}},"id":5017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3266:35:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}},"functionReturnParameters":4992,"id":5018,"nodeType":"Return","src":"3259:42:14"}]},"id":5020,"nodeType":"IfStatement","src":"3093:220:14","trueBody":{"id":5004,"nodeType":"Block","src":"3123:54:14","statements":[{"expression":{"arguments":[{"id":5001,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4985,"src":"3159:5:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5000,"name":"toShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4924,"src":"3145:13:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_userDefinedValueType$_ShortString_$4870_$","typeString":"function (string memory) pure returns (ShortString)"}},"id":5002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3145:20:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}},"functionReturnParameters":4992,"id":5003,"nodeType":"Return","src":"3138:27:14"}]}}]},"documentation":{"id":4983,"nodeType":"StructuredDocumentation","src":"2862:105:14","text":" @dev Encode a string into a `ShortString`, or write it to storage if it is too long."},"id":5022,"implemented":true,"kind":"function","modifiers":[],"name":"toShortStringWithFallback","nameLocation":"2982:25:14","nodeType":"FunctionDefinition","parameters":{"id":4988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4985,"mutability":"mutable","name":"value","nameLocation":"3022:5:14","nodeType":"VariableDeclaration","scope":5022,"src":"3008:19:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4984,"name":"string","nodeType":"ElementaryTypeName","src":"3008:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4987,"mutability":"mutable","name":"store","nameLocation":"3044:5:14","nodeType":"VariableDeclaration","scope":5022,"src":"3029:20:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":4986,"name":"string","nodeType":"ElementaryTypeName","src":"3029:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3007:43:14"},"returnParameters":{"id":4992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4991,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5022,"src":"3069:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"},"typeName":{"id":4990,"nodeType":"UserDefinedTypeName","pathNode":{"id":4989,"name":"ShortString","nameLocations":["3069:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":4870,"src":"3069:11:14"},"referencedDeclaration":4870,"src":"3069:11:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}},"visibility":"internal"}],"src":"3068:13:14"},"scope":5081,"src":"2973:347:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5048,"nodeType":"Block","src":"3565:164:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5035,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5026,"src":"3599:5:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}],"expression":{"id":5033,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"3580:11:14","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$4870_$","typeString":"type(ShortString)"}},"id":5034,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3592:6:14","memberName":"unwrap","nodeType":"MemberAccess","src":"3580:18:14","typeDescriptions":{"typeIdentifier":"t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$4870_$returns$_t_bytes32_$","typeString":"function (ShortString) pure returns (bytes32)"}},"id":5036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3580:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5037,"name":"FALLBACK_SENTINEL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"3609:17:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3580:46:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5046,"nodeType":"Block","src":"3683:39:14","statements":[{"expression":{"id":5044,"name":"store","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5028,"src":"3705:5:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}},"functionReturnParameters":5032,"id":5045,"nodeType":"Return","src":"3698:12:14"}]},"id":5047,"nodeType":"IfStatement","src":"3576:146:14","trueBody":{"id":5043,"nodeType":"Block","src":"3628:49:14","statements":[{"expression":{"arguments":[{"id":5040,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5026,"src":"3659:5:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}],"id":5039,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4950,"src":"3650:8:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$4870_$returns$_t_string_memory_ptr_$","typeString":"function (ShortString) pure returns (string memory)"}},"id":5041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3650:15:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":5032,"id":5042,"nodeType":"Return","src":"3643:22:14"}]}}]},"documentation":{"id":5023,"nodeType":"StructuredDocumentation","src":"3328:122:14","text":" @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}."},"id":5049,"implemented":true,"kind":"function","modifiers":[],"name":"toStringWithFallback","nameLocation":"3465:20:14","nodeType":"FunctionDefinition","parameters":{"id":5029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5026,"mutability":"mutable","name":"value","nameLocation":"3498:5:14","nodeType":"VariableDeclaration","scope":5049,"src":"3486:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"},"typeName":{"id":5025,"nodeType":"UserDefinedTypeName","pathNode":{"id":5024,"name":"ShortString","nameLocations":["3486:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":4870,"src":"3486:11:14"},"referencedDeclaration":4870,"src":"3486:11:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}},"visibility":"internal"},{"constant":false,"id":5028,"mutability":"mutable","name":"store","nameLocation":"3520:5:14","nodeType":"VariableDeclaration","scope":5049,"src":"3505:20:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":5027,"name":"string","nodeType":"ElementaryTypeName","src":"3505:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3485:41:14"},"returnParameters":{"id":5032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5031,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5049,"src":"3550:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5030,"name":"string","nodeType":"ElementaryTypeName","src":"3550:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3549:15:14"},"scope":5081,"src":"3456:273:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5079,"nodeType":"Block","src":"4218:180:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5062,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5053,"src":"4252:5:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}],"expression":{"id":5060,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"4233:11:14","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$4870_$","typeString":"type(ShortString)"}},"id":5061,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4245:6:14","memberName":"unwrap","nodeType":"MemberAccess","src":"4233:18:14","typeDescriptions":{"typeIdentifier":"t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$4870_$returns$_t_bytes32_$","typeString":"function (ShortString) pure returns (bytes32)"}},"id":5063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4233:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5064,"name":"FALLBACK_SENTINEL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"4262:17:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4233:46:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5077,"nodeType":"Block","src":"4338:53:14","statements":[{"expression":{"expression":{"arguments":[{"id":5073,"name":"store","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5055,"src":"4366:5:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}],"id":5072,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4360:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5071,"name":"bytes","nodeType":"ElementaryTypeName","src":"4360:5:14","typeDescriptions":{}}},"id":5074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4360:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes storage pointer"}},"id":5075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4373:6:14","memberName":"length","nodeType":"MemberAccess","src":"4360:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5059,"id":5076,"nodeType":"Return","src":"4353:26:14"}]},"id":5078,"nodeType":"IfStatement","src":"4229:162:14","trueBody":{"id":5070,"nodeType":"Block","src":"4281:51:14","statements":[{"expression":{"arguments":[{"id":5067,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5053,"src":"4314:5:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}],"id":5066,"name":"byteLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4982,"src":"4303:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$4870_$returns$_t_uint256_$","typeString":"function (ShortString) pure returns (uint256)"}},"id":5068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4303:17:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5059,"id":5069,"nodeType":"Return","src":"4296:24:14"}]}}]},"documentation":{"id":5050,"nodeType":"StructuredDocumentation","src":"3737:370:14","text":" @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n {setWithFallback}.\n WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n actual characters as the UTF-8 encoding of a single character can span over multiple bytes."},"id":5080,"implemented":true,"kind":"function","modifiers":[],"name":"byteLengthWithFallback","nameLocation":"4122:22:14","nodeType":"FunctionDefinition","parameters":{"id":5056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5053,"mutability":"mutable","name":"value","nameLocation":"4157:5:14","nodeType":"VariableDeclaration","scope":5080,"src":"4145:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"},"typeName":{"id":5052,"nodeType":"UserDefinedTypeName","pathNode":{"id":5051,"name":"ShortString","nameLocations":["4145:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":4870,"src":"4145:11:14"},"referencedDeclaration":4870,"src":"4145:11:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$4870","typeString":"ShortString"}},"visibility":"internal"},{"constant":false,"id":5055,"mutability":"mutable","name":"store","nameLocation":"4179:5:14","nodeType":"VariableDeclaration","scope":5080,"src":"4164:20:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":5054,"name":"string","nodeType":"ElementaryTypeName","src":"4164:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4144:41:14"},"returnParameters":{"id":5059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5058,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5080,"src":"4209:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5057,"name":"uint256","nodeType":"ElementaryTypeName","src":"4209:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4208:9:14"},"scope":5081,"src":"4113:285:14","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":5082,"src":"1293:3108:14","usedErrors":[4878,4880]}],"src":"109:4292:14"},"id":14},"contracts/SignedMath.sol":{"ast":{"absolutePath":"contracts/SignedMath.sol","exportedSymbols":{"SafeCast":[4583],"SignedMath":[5225]},"id":5226,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5083,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"112:23:15"},{"absolutePath":"contracts/SafeCast.sol","file":"./SafeCast.sol","id":5085,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5226,"sourceUnit":4584,"src":"139:40:15","symbolAliases":[{"foreign":{"id":5084,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4583,"src":"147:8:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":5086,"nodeType":"StructuredDocumentation","src":"183:82:15","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":5225,"linearizedBaseContracts":[5225],"name":"SignedMath","nameLocation":"275:10:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":5115,"nodeType":"Block","src":"763:222:15","statements":[{"id":5114,"nodeType":"UncheckedBlock","src":"774:204:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5098,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5093,"src":"916:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5099,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5091,"src":"922:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":5100,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5093,"src":"926:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"922:5:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5102,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"921:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"arguments":[{"id":5107,"name":"condition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5089,"src":"954:9:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":5105,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4583,"src":"938:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$4583_$","typeString":"type(library SafeCast)"}},"id":5106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"947:6:15","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4582,"src":"938:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":5108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"938:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5104,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"931:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":5103,"name":"int256","nodeType":"ElementaryTypeName","src":"931:6:15","typeDescriptions":{}}},"id":5109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"931:34:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"921:44:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5111,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"920:46:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"916:50:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5097,"id":5113,"nodeType":"Return","src":"909:57:15"}]}]},"documentation":{"id":5087,"nodeType":"StructuredDocumentation","src":"293:380:15","text":" @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n one branch when needed, making this function more expensive."},"id":5116,"implemented":true,"kind":"function","modifiers":[],"name":"ternary","nameLocation":"688:7:15","nodeType":"FunctionDefinition","parameters":{"id":5094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5089,"mutability":"mutable","name":"condition","nameLocation":"701:9:15","nodeType":"VariableDeclaration","scope":5116,"src":"696:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5088,"name":"bool","nodeType":"ElementaryTypeName","src":"696:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5091,"mutability":"mutable","name":"a","nameLocation":"719:1:15","nodeType":"VariableDeclaration","scope":5116,"src":"712:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5090,"name":"int256","nodeType":"ElementaryTypeName","src":"712:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5093,"mutability":"mutable","name":"b","nameLocation":"729:1:15","nodeType":"VariableDeclaration","scope":5116,"src":"722:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5092,"name":"int256","nodeType":"ElementaryTypeName","src":"722:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"695:36:15"},"returnParameters":{"id":5097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5096,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5116,"src":"755:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5095,"name":"int256","nodeType":"ElementaryTypeName","src":"755:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"754:8:15"},"scope":5225,"src":"679:306:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5134,"nodeType":"Block","src":"1131:46:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5127,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5119,"src":"1157:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5128,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5121,"src":"1161:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1157:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":5130,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5119,"src":"1164:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"id":5131,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5121,"src":"1167:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5126,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5116,"src":"1149:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_int256_$_t_int256_$returns$_t_int256_$","typeString":"function (bool,int256,int256) pure returns (int256)"}},"id":5132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1149:20:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5125,"id":5133,"nodeType":"Return","src":"1142:27:15"}]},"documentation":{"id":5117,"nodeType":"StructuredDocumentation","src":"993:68:15","text":" @dev Returns the largest of two signed numbers."},"id":5135,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"1076:3:15","nodeType":"FunctionDefinition","parameters":{"id":5122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5119,"mutability":"mutable","name":"a","nameLocation":"1087:1:15","nodeType":"VariableDeclaration","scope":5135,"src":"1080:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5118,"name":"int256","nodeType":"ElementaryTypeName","src":"1080:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5121,"mutability":"mutable","name":"b","nameLocation":"1097:1:15","nodeType":"VariableDeclaration","scope":5135,"src":"1090:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5120,"name":"int256","nodeType":"ElementaryTypeName","src":"1090:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1079:20:15"},"returnParameters":{"id":5125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5124,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5135,"src":"1123:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5123,"name":"int256","nodeType":"ElementaryTypeName","src":"1123:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1122:8:15"},"scope":5225,"src":"1067:110:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5153,"nodeType":"Block","src":"1324:46:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5146,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5138,"src":"1350:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5147,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5140,"src":"1354:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1350:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":5149,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5138,"src":"1357:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"id":5150,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5140,"src":"1360:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5145,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5116,"src":"1342:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_int256_$_t_int256_$returns$_t_int256_$","typeString":"function (bool,int256,int256) pure returns (int256)"}},"id":5151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:20:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5144,"id":5152,"nodeType":"Return","src":"1335:27:15"}]},"documentation":{"id":5136,"nodeType":"StructuredDocumentation","src":"1185:69:15","text":" @dev Returns the smallest of two signed numbers."},"id":5154,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"1269:3:15","nodeType":"FunctionDefinition","parameters":{"id":5141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5138,"mutability":"mutable","name":"a","nameLocation":"1280:1:15","nodeType":"VariableDeclaration","scope":5154,"src":"1273:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5137,"name":"int256","nodeType":"ElementaryTypeName","src":"1273:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5140,"mutability":"mutable","name":"b","nameLocation":"1290:1:15","nodeType":"VariableDeclaration","scope":5154,"src":"1283:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5139,"name":"int256","nodeType":"ElementaryTypeName","src":"1283:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1272:20:15"},"returnParameters":{"id":5144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5143,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5154,"src":"1316:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5142,"name":"int256","nodeType":"ElementaryTypeName","src":"1316:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1315:8:15"},"scope":5225,"src":"1260:110:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5197,"nodeType":"Block","src":"1581:166:15","statements":[{"assignments":[5165],"declarations":[{"constant":false,"id":5165,"mutability":"mutable","name":"x","nameLocation":"1652:1:15","nodeType":"VariableDeclaration","scope":5197,"src":"1645:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5164,"name":"int256","nodeType":"ElementaryTypeName","src":"1645:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":5178,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5166,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5157,"src":"1657:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":5167,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5159,"src":"1661:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1657:5:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5169,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1656:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5170,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5157,"src":"1668:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":5171,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5159,"src":"1672:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1668:5:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5173,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1667:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1678:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1667:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5176,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1666:14:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1656:24:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"1645:35:15"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5179,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5165,"src":"1698:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5184,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5165,"src":"1718:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5183,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1710:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5182,"name":"uint256","nodeType":"ElementaryTypeName","src":"1710:7:15","typeDescriptions":{}}},"id":5185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1710:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":5186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:3:15","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"1710:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1703:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":5180,"name":"int256","nodeType":"ElementaryTypeName","src":"1703:6:15","typeDescriptions":{}}},"id":5188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1703:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5189,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5157,"src":"1732:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":5190,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5159,"src":"1736:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1732:5:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5192,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1731:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1703:35:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5194,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1702:37:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1698:41:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5163,"id":5196,"nodeType":"Return","src":"1691:48:15"}]},"documentation":{"id":5155,"nodeType":"StructuredDocumentation","src":"1378:129:15","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":5198,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"1522:7:15","nodeType":"FunctionDefinition","parameters":{"id":5160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5157,"mutability":"mutable","name":"a","nameLocation":"1537:1:15","nodeType":"VariableDeclaration","scope":5198,"src":"1530:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5156,"name":"int256","nodeType":"ElementaryTypeName","src":"1530:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5159,"mutability":"mutable","name":"b","nameLocation":"1547:1:15","nodeType":"VariableDeclaration","scope":5198,"src":"1540:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5158,"name":"int256","nodeType":"ElementaryTypeName","src":"1540:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1529:20:15"},"returnParameters":{"id":5163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5162,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5198,"src":"1573:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5161,"name":"int256","nodeType":"ElementaryTypeName","src":"1573:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1572:8:15"},"scope":5225,"src":"1513:234:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5223,"nodeType":"Block","src":"1896:779:15","statements":[{"id":5222,"nodeType":"UncheckedBlock","src":"1907:761:15","statements":[{"assignments":[5207],"declarations":[{"constant":false,"id":5207,"mutability":"mutable","name":"mask","nameLocation":"2484:4:15","nodeType":"VariableDeclaration","scope":5222,"src":"2477:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5206,"name":"int256","nodeType":"ElementaryTypeName","src":"2477:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":5211,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5208,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5201,"src":"2491:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":5209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2496:3:15","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"2491:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"2477:22:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5214,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5201,"src":"2639:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5215,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5207,"src":"2643:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2639:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5217,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2638:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":5218,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5207,"src":"2651:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2638:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5213,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2630:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5212,"name":"uint256","nodeType":"ElementaryTypeName","src":"2630:7:15","typeDescriptions":{}}},"id":5220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2630:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5205,"id":5221,"nodeType":"Return","src":"2623:33:15"}]}]},"documentation":{"id":5199,"nodeType":"StructuredDocumentation","src":"1755:80:15","text":" @dev Returns the absolute unsigned value of a signed value."},"id":5224,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1850:3:15","nodeType":"FunctionDefinition","parameters":{"id":5202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5201,"mutability":"mutable","name":"n","nameLocation":"1861:1:15","nodeType":"VariableDeclaration","scope":5224,"src":"1854:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5200,"name":"int256","nodeType":"ElementaryTypeName","src":"1854:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1853:10:15"},"returnParameters":{"id":5205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5204,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5224,"src":"1887:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5203,"name":"uint256","nodeType":"ElementaryTypeName","src":"1887:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1886:9:15"},"scope":5225,"src":"1841:834:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5226,"src":"267:2411:15","usedErrors":[]}],"src":"112:2566:15"},"id":15},"contracts/StorageSlot.sol":{"ast":{"absolutePath":"contracts/StorageSlot.sol","exportedSymbols":{"StorageSlot":[5349]},"id":5350,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5227,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"197:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":5228,"nodeType":"StructuredDocumentation","src":"224:1213:16","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC-1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(newImplementation.code.length > 0);\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n TIP: Consider using this library along with {SlotDerivation}."},"fullyImplemented":true,"id":5349,"linearizedBaseContracts":[5349],"name":"StorageSlot","nameLocation":"1447:11:16","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":5231,"members":[{"constant":false,"id":5230,"mutability":"mutable","name":"value","nameLocation":"1504:5:16","nodeType":"VariableDeclaration","scope":5231,"src":"1496:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5229,"name":"address","nodeType":"ElementaryTypeName","src":"1496:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1473:11:16","nodeType":"StructDefinition","scope":5349,"src":"1466:51:16","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":5234,"members":[{"constant":false,"id":5233,"mutability":"mutable","name":"value","nameLocation":"1560:5:16","nodeType":"VariableDeclaration","scope":5234,"src":"1555:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5232,"name":"bool","nodeType":"ElementaryTypeName","src":"1555:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1532:11:16","nodeType":"StructDefinition","scope":5349,"src":"1525:48:16","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":5237,"members":[{"constant":false,"id":5236,"mutability":"mutable","name":"value","nameLocation":"1619:5:16","nodeType":"VariableDeclaration","scope":5237,"src":"1611:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5235,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1611:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1588:11:16","nodeType":"StructDefinition","scope":5349,"src":"1581:51:16","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":5240,"members":[{"constant":false,"id":5239,"mutability":"mutable","name":"value","nameLocation":"1678:5:16","nodeType":"VariableDeclaration","scope":5240,"src":"1670:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5238,"name":"uint256","nodeType":"ElementaryTypeName","src":"1670:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1647:11:16","nodeType":"StructDefinition","scope":5349,"src":"1640:51:16","visibility":"public"},{"canonicalName":"StorageSlot.Int256Slot","id":5243,"members":[{"constant":false,"id":5242,"mutability":"mutable","name":"value","nameLocation":"1735:5:16","nodeType":"VariableDeclaration","scope":5243,"src":"1728:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5241,"name":"int256","nodeType":"ElementaryTypeName","src":"1728:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"name":"Int256Slot","nameLocation":"1706:10:16","nodeType":"StructDefinition","scope":5349,"src":"1699:49:16","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":5246,"members":[{"constant":false,"id":5245,"mutability":"mutable","name":"value","nameLocation":"1792:5:16","nodeType":"VariableDeclaration","scope":5246,"src":"1785:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":5244,"name":"string","nodeType":"ElementaryTypeName","src":"1785:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1763:10:16","nodeType":"StructDefinition","scope":5349,"src":"1756:49:16","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":5249,"members":[{"constant":false,"id":5248,"mutability":"mutable","name":"value","nameLocation":"1847:5:16","nodeType":"VariableDeclaration","scope":5249,"src":"1841:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":5247,"name":"bytes","nodeType":"ElementaryTypeName","src":"1841:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1820:9:16","nodeType":"StructDefinition","scope":5349,"src":"1813:47:16","visibility":"public"},{"body":{"id":5259,"nodeType":"Block","src":"2047:83:16","statements":[{"AST":{"nodeType":"YulBlock","src":"2083:40:16","statements":[{"nodeType":"YulAssignment","src":"2098:14:16","value":{"name":"slot","nodeType":"YulIdentifier","src":"2108:4:16"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2098:6:16"}]}]},"evmVersion":"london","externalReferences":[{"declaration":5256,"isOffset":false,"isSlot":true,"src":"2098:6:16","suffix":"slot","valueSize":1},{"declaration":5252,"isOffset":false,"isSlot":false,"src":"2108:4:16","valueSize":1}],"flags":["memory-safe"],"id":5258,"nodeType":"InlineAssembly","src":"2058:65:16"}]},"documentation":{"id":5250,"nodeType":"StructuredDocumentation","src":"1868:89:16","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":5260,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1972:14:16","nodeType":"FunctionDefinition","parameters":{"id":5253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5252,"mutability":"mutable","name":"slot","nameLocation":"1995:4:16","nodeType":"VariableDeclaration","scope":5260,"src":"1987:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5251,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1987:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1986:14:16"},"returnParameters":{"id":5257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5256,"mutability":"mutable","name":"r","nameLocation":"2044:1:16","nodeType":"VariableDeclaration","scope":5260,"src":"2024:21:16","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$5231_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":5255,"nodeType":"UserDefinedTypeName","pathNode":{"id":5254,"name":"AddressSlot","nameLocations":["2024:11:16"],"nodeType":"IdentifierPath","referencedDeclaration":5231,"src":"2024:11:16"},"referencedDeclaration":5231,"src":"2024:11:16","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$5231_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"2023:23:16"},"scope":5349,"src":"1963:167:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5270,"nodeType":"Block","src":"2316:83:16","statements":[{"AST":{"nodeType":"YulBlock","src":"2352:40:16","statements":[{"nodeType":"YulAssignment","src":"2367:14:16","value":{"name":"slot","nodeType":"YulIdentifier","src":"2377:4:16"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2367:6:16"}]}]},"evmVersion":"london","externalReferences":[{"declaration":5267,"isOffset":false,"isSlot":true,"src":"2367:6:16","suffix":"slot","valueSize":1},{"declaration":5263,"isOffset":false,"isSlot":false,"src":"2377:4:16","valueSize":1}],"flags":["memory-safe"],"id":5269,"nodeType":"InlineAssembly","src":"2327:65:16"}]},"documentation":{"id":5261,"nodeType":"StructuredDocumentation","src":"2138:88:16","text":" @dev Returns a `BooleanSlot` with member `value` located at `slot`."},"id":5271,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2241:14:16","nodeType":"FunctionDefinition","parameters":{"id":5264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5263,"mutability":"mutable","name":"slot","nameLocation":"2264:4:16","nodeType":"VariableDeclaration","scope":5271,"src":"2256:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5262,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2256:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2255:14:16"},"returnParameters":{"id":5268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5267,"mutability":"mutable","name":"r","nameLocation":"2313:1:16","nodeType":"VariableDeclaration","scope":5271,"src":"2293:21:16","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$5234_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":5266,"nodeType":"UserDefinedTypeName","pathNode":{"id":5265,"name":"BooleanSlot","nameLocations":["2293:11:16"],"nodeType":"IdentifierPath","referencedDeclaration":5234,"src":"2293:11:16"},"referencedDeclaration":5234,"src":"2293:11:16","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$5234_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2292:23:16"},"scope":5349,"src":"2232:167:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5281,"nodeType":"Block","src":"2585:83:16","statements":[{"AST":{"nodeType":"YulBlock","src":"2621:40:16","statements":[{"nodeType":"YulAssignment","src":"2636:14:16","value":{"name":"slot","nodeType":"YulIdentifier","src":"2646:4:16"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2636:6:16"}]}]},"evmVersion":"london","externalReferences":[{"declaration":5278,"isOffset":false,"isSlot":true,"src":"2636:6:16","suffix":"slot","valueSize":1},{"declaration":5274,"isOffset":false,"isSlot":false,"src":"2646:4:16","valueSize":1}],"flags":["memory-safe"],"id":5280,"nodeType":"InlineAssembly","src":"2596:65:16"}]},"documentation":{"id":5272,"nodeType":"StructuredDocumentation","src":"2407:88:16","text":" @dev Returns a `Bytes32Slot` with member `value` located at `slot`."},"id":5282,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2510:14:16","nodeType":"FunctionDefinition","parameters":{"id":5275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5274,"mutability":"mutable","name":"slot","nameLocation":"2533:4:16","nodeType":"VariableDeclaration","scope":5282,"src":"2525:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5273,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2525:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2524:14:16"},"returnParameters":{"id":5279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5278,"mutability":"mutable","name":"r","nameLocation":"2582:1:16","nodeType":"VariableDeclaration","scope":5282,"src":"2562:21:16","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$5237_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":5277,"nodeType":"UserDefinedTypeName","pathNode":{"id":5276,"name":"Bytes32Slot","nameLocations":["2562:11:16"],"nodeType":"IdentifierPath","referencedDeclaration":5237,"src":"2562:11:16"},"referencedDeclaration":5237,"src":"2562:11:16","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$5237_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2561:23:16"},"scope":5349,"src":"2501:167:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5292,"nodeType":"Block","src":"2854:83:16","statements":[{"AST":{"nodeType":"YulBlock","src":"2890:40:16","statements":[{"nodeType":"YulAssignment","src":"2905:14:16","value":{"name":"slot","nodeType":"YulIdentifier","src":"2915:4:16"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2905:6:16"}]}]},"evmVersion":"london","externalReferences":[{"declaration":5289,"isOffset":false,"isSlot":true,"src":"2905:6:16","suffix":"slot","valueSize":1},{"declaration":5285,"isOffset":false,"isSlot":false,"src":"2915:4:16","valueSize":1}],"flags":["memory-safe"],"id":5291,"nodeType":"InlineAssembly","src":"2865:65:16"}]},"documentation":{"id":5283,"nodeType":"StructuredDocumentation","src":"2676:88:16","text":" @dev Returns a `Uint256Slot` with member `value` located at `slot`."},"id":5293,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2779:14:16","nodeType":"FunctionDefinition","parameters":{"id":5286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5285,"mutability":"mutable","name":"slot","nameLocation":"2802:4:16","nodeType":"VariableDeclaration","scope":5293,"src":"2794:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5284,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2794:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2793:14:16"},"returnParameters":{"id":5290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5289,"mutability":"mutable","name":"r","nameLocation":"2851:1:16","nodeType":"VariableDeclaration","scope":5293,"src":"2831:21:16","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$5240_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":5288,"nodeType":"UserDefinedTypeName","pathNode":{"id":5287,"name":"Uint256Slot","nameLocations":["2831:11:16"],"nodeType":"IdentifierPath","referencedDeclaration":5240,"src":"2831:11:16"},"referencedDeclaration":5240,"src":"2831:11:16","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$5240_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2830:23:16"},"scope":5349,"src":"2770:167:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5303,"nodeType":"Block","src":"3120:83:16","statements":[{"AST":{"nodeType":"YulBlock","src":"3156:40:16","statements":[{"nodeType":"YulAssignment","src":"3171:14:16","value":{"name":"slot","nodeType":"YulIdentifier","src":"3181:4:16"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3171:6:16"}]}]},"evmVersion":"london","externalReferences":[{"declaration":5300,"isOffset":false,"isSlot":true,"src":"3171:6:16","suffix":"slot","valueSize":1},{"declaration":5296,"isOffset":false,"isSlot":false,"src":"3181:4:16","valueSize":1}],"flags":["memory-safe"],"id":5302,"nodeType":"InlineAssembly","src":"3131:65:16"}]},"documentation":{"id":5294,"nodeType":"StructuredDocumentation","src":"2945:87:16","text":" @dev Returns a `Int256Slot` with member `value` located at `slot`."},"id":5304,"implemented":true,"kind":"function","modifiers":[],"name":"getInt256Slot","nameLocation":"3047:13:16","nodeType":"FunctionDefinition","parameters":{"id":5297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5296,"mutability":"mutable","name":"slot","nameLocation":"3069:4:16","nodeType":"VariableDeclaration","scope":5304,"src":"3061:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5295,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3061:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3060:14:16"},"returnParameters":{"id":5301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5300,"mutability":"mutable","name":"r","nameLocation":"3117:1:16","nodeType":"VariableDeclaration","scope":5304,"src":"3098:20:16","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Int256Slot_$5243_storage_ptr","typeString":"struct StorageSlot.Int256Slot"},"typeName":{"id":5299,"nodeType":"UserDefinedTypeName","pathNode":{"id":5298,"name":"Int256Slot","nameLocations":["3098:10:16"],"nodeType":"IdentifierPath","referencedDeclaration":5243,"src":"3098:10:16"},"referencedDeclaration":5243,"src":"3098:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_Int256Slot_$5243_storage_ptr","typeString":"struct StorageSlot.Int256Slot"}},"visibility":"internal"}],"src":"3097:22:16"},"scope":5349,"src":"3038:165:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5314,"nodeType":"Block","src":"3386:83:16","statements":[{"AST":{"nodeType":"YulBlock","src":"3422:40:16","statements":[{"nodeType":"YulAssignment","src":"3437:14:16","value":{"name":"slot","nodeType":"YulIdentifier","src":"3447:4:16"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3437:6:16"}]}]},"evmVersion":"london","externalReferences":[{"declaration":5311,"isOffset":false,"isSlot":true,"src":"3437:6:16","suffix":"slot","valueSize":1},{"declaration":5307,"isOffset":false,"isSlot":false,"src":"3447:4:16","valueSize":1}],"flags":["memory-safe"],"id":5313,"nodeType":"InlineAssembly","src":"3397:65:16"}]},"documentation":{"id":5305,"nodeType":"StructuredDocumentation","src":"3211:87:16","text":" @dev Returns a `StringSlot` with member `value` located at `slot`."},"id":5315,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3313:13:16","nodeType":"FunctionDefinition","parameters":{"id":5308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5307,"mutability":"mutable","name":"slot","nameLocation":"3335:4:16","nodeType":"VariableDeclaration","scope":5315,"src":"3327:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5306,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3327:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3326:14:16"},"returnParameters":{"id":5312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5311,"mutability":"mutable","name":"r","nameLocation":"3383:1:16","nodeType":"VariableDeclaration","scope":5315,"src":"3364:20:16","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$5246_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":5310,"nodeType":"UserDefinedTypeName","pathNode":{"id":5309,"name":"StringSlot","nameLocations":["3364:10:16"],"nodeType":"IdentifierPath","referencedDeclaration":5246,"src":"3364:10:16"},"referencedDeclaration":5246,"src":"3364:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$5246_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3363:22:16"},"scope":5349,"src":"3304:165:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5325,"nodeType":"Block","src":"3676:89:16","statements":[{"AST":{"nodeType":"YulBlock","src":"3712:46:16","statements":[{"nodeType":"YulAssignment","src":"3727:20:16","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"3737:10:16"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3727:6:16"}]}]},"evmVersion":"london","externalReferences":[{"declaration":5322,"isOffset":false,"isSlot":true,"src":"3727:6:16","suffix":"slot","valueSize":1},{"declaration":5318,"isOffset":false,"isSlot":true,"src":"3737:10:16","suffix":"slot","valueSize":1}],"flags":["memory-safe"],"id":5324,"nodeType":"InlineAssembly","src":"3687:71:16"}]},"documentation":{"id":5316,"nodeType":"StructuredDocumentation","src":"3477:103:16","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":5326,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3595:13:16","nodeType":"FunctionDefinition","parameters":{"id":5319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5318,"mutability":"mutable","name":"store","nameLocation":"3624:5:16","nodeType":"VariableDeclaration","scope":5326,"src":"3609:20:16","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":5317,"name":"string","nodeType":"ElementaryTypeName","src":"3609:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3608:22:16"},"returnParameters":{"id":5323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5322,"mutability":"mutable","name":"r","nameLocation":"3673:1:16","nodeType":"VariableDeclaration","scope":5326,"src":"3654:20:16","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$5246_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":5321,"nodeType":"UserDefinedTypeName","pathNode":{"id":5320,"name":"StringSlot","nameLocations":["3654:10:16"],"nodeType":"IdentifierPath","referencedDeclaration":5246,"src":"3654:10:16"},"referencedDeclaration":5246,"src":"3654:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$5246_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3653:22:16"},"scope":5349,"src":"3586:179:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5336,"nodeType":"Block","src":"3945:83:16","statements":[{"AST":{"nodeType":"YulBlock","src":"3981:40:16","statements":[{"nodeType":"YulAssignment","src":"3996:14:16","value":{"name":"slot","nodeType":"YulIdentifier","src":"4006:4:16"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3996:6:16"}]}]},"evmVersion":"london","externalReferences":[{"declaration":5333,"isOffset":false,"isSlot":true,"src":"3996:6:16","suffix":"slot","valueSize":1},{"declaration":5329,"isOffset":false,"isSlot":false,"src":"4006:4:16","valueSize":1}],"flags":["memory-safe"],"id":5335,"nodeType":"InlineAssembly","src":"3956:65:16"}]},"documentation":{"id":5327,"nodeType":"StructuredDocumentation","src":"3773:86:16","text":" @dev Returns a `BytesSlot` with member `value` located at `slot`."},"id":5337,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3874:12:16","nodeType":"FunctionDefinition","parameters":{"id":5330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5329,"mutability":"mutable","name":"slot","nameLocation":"3895:4:16","nodeType":"VariableDeclaration","scope":5337,"src":"3887:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5328,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3887:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3886:14:16"},"returnParameters":{"id":5334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5333,"mutability":"mutable","name":"r","nameLocation":"3942:1:16","nodeType":"VariableDeclaration","scope":5337,"src":"3924:19:16","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$5249_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":5332,"nodeType":"UserDefinedTypeName","pathNode":{"id":5331,"name":"BytesSlot","nameLocations":["3924:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":5249,"src":"3924:9:16"},"referencedDeclaration":5249,"src":"3924:9:16","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$5249_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3923:21:16"},"scope":5349,"src":"3865:163:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5347,"nodeType":"Block","src":"4230:89:16","statements":[{"AST":{"nodeType":"YulBlock","src":"4266:46:16","statements":[{"nodeType":"YulAssignment","src":"4281:20:16","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"4291:10:16"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"4281:6:16"}]}]},"evmVersion":"london","externalReferences":[{"declaration":5344,"isOffset":false,"isSlot":true,"src":"4281:6:16","suffix":"slot","valueSize":1},{"declaration":5340,"isOffset":false,"isSlot":true,"src":"4291:10:16","suffix":"slot","valueSize":1}],"flags":["memory-safe"],"id":5346,"nodeType":"InlineAssembly","src":"4241:71:16"}]},"documentation":{"id":5338,"nodeType":"StructuredDocumentation","src":"4036:101:16","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":5348,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"4152:12:16","nodeType":"FunctionDefinition","parameters":{"id":5341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5340,"mutability":"mutable","name":"store","nameLocation":"4179:5:16","nodeType":"VariableDeclaration","scope":5348,"src":"4165:19:16","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":5339,"name":"bytes","nodeType":"ElementaryTypeName","src":"4165:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4164:21:16"},"returnParameters":{"id":5345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5344,"mutability":"mutable","name":"r","nameLocation":"4227:1:16","nodeType":"VariableDeclaration","scope":5348,"src":"4209:19:16","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$5249_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":5343,"nodeType":"UserDefinedTypeName","pathNode":{"id":5342,"name":"BytesSlot","nameLocations":["4209:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":5249,"src":"4209:9:16"},"referencedDeclaration":5249,"src":"4209:9:16","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$5249_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"4208:21:16"},"scope":5349,"src":"4143:176:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5350,"src":"1439:2883:16","usedErrors":[]}],"src":"197:4125:16"},"id":16},"contracts/Strings.sol":{"ast":{"absolutePath":"contracts/Strings.sol","exportedSymbols":{"Math":[2624],"SafeCast":[4583],"SignedMath":[5225],"Strings":[6538]},"id":6539,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5351,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"104:23:17"},{"absolutePath":"contracts/Math.sol","file":"./Math.sol","id":5353,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6539,"sourceUnit":2625,"src":"131:32:17","symbolAliases":[{"foreign":{"id":5352,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2624,"src":"139:4:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/SafeCast.sol","file":"./SafeCast.sol","id":5355,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6539,"sourceUnit":4584,"src":"165:40:17","symbolAliases":[{"foreign":{"id":5354,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4583,"src":"173:8:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/SignedMath.sol","file":"./SignedMath.sol","id":5357,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6539,"sourceUnit":5226,"src":"207:44:17","symbolAliases":[{"foreign":{"id":5356,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5225,"src":"215:10:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":5358,"nodeType":"StructuredDocumentation","src":"255:36:17","text":" @dev String operations."},"fullyImplemented":true,"id":6538,"linearizedBaseContracts":[6538],"name":"Strings","nameLocation":"301:7:17","nodeType":"ContractDefinition","nodes":[{"global":false,"id":5360,"libraryName":{"id":5359,"name":"SafeCast","nameLocations":["322:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":4583,"src":"322:8:17"},"nodeType":"UsingForDirective","src":"316:21:17"},{"constant":true,"id":5363,"mutability":"constant","name":"HEX_DIGITS","nameLocation":"370:10:17","nodeType":"VariableDeclaration","scope":6538,"src":"345:56:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":5361,"name":"bytes16","nodeType":"ElementaryTypeName","src":"345:7:17","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":5362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:18:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":5366,"mutability":"constant","name":"ADDRESS_LENGTH","nameLocation":"431:14:17","nodeType":"VariableDeclaration","scope":6538,"src":"408:42:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5364,"name":"uint8","nodeType":"ElementaryTypeName","src":"408:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":5365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"448:2:17","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"documentation":{"id":5367,"nodeType":"StructuredDocumentation","src":"459:83:17","text":" @dev The `value` string doesn't fit in the specified `length`."},"errorSelector":"e22e27eb","id":5373,"name":"StringsInsufficientHexLength","nameLocation":"554:28:17","nodeType":"ErrorDefinition","parameters":{"id":5372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5369,"mutability":"mutable","name":"value","nameLocation":"591:5:17","nodeType":"VariableDeclaration","scope":5373,"src":"583:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5368,"name":"uint256","nodeType":"ElementaryTypeName","src":"583:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5371,"mutability":"mutable","name":"length","nameLocation":"606:6:17","nodeType":"VariableDeclaration","scope":5373,"src":"598:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5370,"name":"uint256","nodeType":"ElementaryTypeName","src":"598:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"582:31:17"},"src":"548:66:17"},{"documentation":{"id":5374,"nodeType":"StructuredDocumentation","src":"622:110:17","text":" @dev The string being parsed contains characters that are not in scope of the given base."},"errorSelector":"94e2737e","id":5376,"name":"StringsInvalidChar","nameLocation":"744:18:17","nodeType":"ErrorDefinition","parameters":{"id":5375,"nodeType":"ParameterList","parameters":[],"src":"762:2:17"},"src":"738:27:17"},{"documentation":{"id":5377,"nodeType":"StructuredDocumentation","src":"773:86:17","text":" @dev The string being parsed is not a properly formatted address."},"errorSelector":"1d15ae44","id":5379,"name":"StringsInvalidAddressFormat","nameLocation":"871:27:17","nodeType":"ErrorDefinition","parameters":{"id":5378,"nodeType":"ParameterList","parameters":[],"src":"898:2:17"},"src":"865:36:17"},{"body":{"id":5426,"nodeType":"Block","src":"1078:579:17","statements":[{"id":5425,"nodeType":"UncheckedBlock","src":"1089:561:17","statements":[{"assignments":[5388],"declarations":[{"constant":false,"id":5388,"mutability":"mutable","name":"length","nameLocation":"1122:6:17","nodeType":"VariableDeclaration","scope":5425,"src":"1114:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5387,"name":"uint256","nodeType":"ElementaryTypeName","src":"1114:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5395,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5391,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5382,"src":"1142:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5389,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2624,"src":"1131:4:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2624_$","typeString":"type(library Math)"}},"id":5390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1136:5:17","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2444,"src":"1131:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1131:17:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1151:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1131:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1114:38:17"},{"assignments":[5397],"declarations":[{"constant":false,"id":5397,"mutability":"mutable","name":"buffer","nameLocation":"1181:6:17","nodeType":"VariableDeclaration","scope":5425,"src":"1167:20:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5396,"name":"string","nodeType":"ElementaryTypeName","src":"1167:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":5402,"initialValue":{"arguments":[{"id":5400,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5388,"src":"1201:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5399,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1190:10:17","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":5398,"name":"string","nodeType":"ElementaryTypeName","src":"1194:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":5401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1190:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"1167:41:17"},{"assignments":[5404],"declarations":[{"constant":false,"id":5404,"mutability":"mutable","name":"ptr","nameLocation":"1231:3:17","nodeType":"VariableDeclaration","scope":5425,"src":"1223:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5403,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5405,"nodeType":"VariableDeclarationStatement","src":"1223:11:17"},{"AST":{"nodeType":"YulBlock","src":"1274:69:17","statements":[{"nodeType":"YulAssignment","src":"1293:35:17","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"1304:6:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1316:2:17","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"1320:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1312:3:17"},"nodeType":"YulFunctionCall","src":"1312:15:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1300:3:17"},"nodeType":"YulFunctionCall","src":"1300:28:17"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"1293:3:17"}]}]},"evmVersion":"london","externalReferences":[{"declaration":5397,"isOffset":false,"isSlot":false,"src":"1304:6:17","valueSize":1},{"declaration":5388,"isOffset":false,"isSlot":false,"src":"1320:6:17","valueSize":1},{"declaration":5404,"isOffset":false,"isSlot":false,"src":"1293:3:17","valueSize":1}],"flags":["memory-safe"],"id":5406,"nodeType":"InlineAssembly","src":"1249:94:17"},{"body":{"id":5421,"nodeType":"Block","src":"1370:241:17","statements":[{"expression":{"id":5409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"1389:5:17","subExpression":{"id":5408,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5404,"src":"1389:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5410,"nodeType":"ExpressionStatement","src":"1389:5:17"},{"AST":{"nodeType":"YulBlock","src":"1438:88:17","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1469:3:17"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1483:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"1490:2:17","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"1479:3:17"},"nodeType":"YulFunctionCall","src":"1479:14:17"},{"name":"HEX_DIGITS","nodeType":"YulIdentifier","src":"1495:10:17"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1474:4:17"},"nodeType":"YulFunctionCall","src":"1474:32:17"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1461:7:17"},"nodeType":"YulFunctionCall","src":"1461:46:17"},"nodeType":"YulExpressionStatement","src":"1461:46:17"}]},"evmVersion":"london","externalReferences":[{"declaration":5363,"isOffset":false,"isSlot":false,"src":"1495:10:17","valueSize":1},{"declaration":5404,"isOffset":false,"isSlot":false,"src":"1469:3:17","valueSize":1},{"declaration":5382,"isOffset":false,"isSlot":false,"src":"1483:5:17","valueSize":1}],"flags":["memory-safe"],"id":5411,"nodeType":"InlineAssembly","src":"1413:113:17"},{"expression":{"id":5414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5412,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5382,"src":"1544:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":5413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1553:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1544:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5415,"nodeType":"ExpressionStatement","src":"1544:11:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5416,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5382,"src":"1578:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1587:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1578:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5420,"nodeType":"IfStatement","src":"1574:21:17","trueBody":{"id":5419,"nodeType":"Break","src":"1590:5:17"}}]},"condition":{"hexValue":"74727565","id":5407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1364:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":5422,"nodeType":"WhileStatement","src":"1357:254:17"},{"expression":{"id":5423,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5397,"src":"1632:6:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":5386,"id":5424,"nodeType":"Return","src":"1625:13:17"}]}]},"documentation":{"id":5380,"nodeType":"StructuredDocumentation","src":"909:92:17","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":5427,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1016:8:17","nodeType":"FunctionDefinition","parameters":{"id":5383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5382,"mutability":"mutable","name":"value","nameLocation":"1033:5:17","nodeType":"VariableDeclaration","scope":5427,"src":"1025:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5381,"name":"uint256","nodeType":"ElementaryTypeName","src":"1025:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1024:15:17"},"returnParameters":{"id":5386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5385,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5427,"src":"1063:13:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5384,"name":"string","nodeType":"ElementaryTypeName","src":"1063:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1062:15:17"},"scope":6538,"src":"1007:650:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5452,"nodeType":"Block","src":"1838:94:17","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5438,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5430,"src":"1870:5:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":5439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1878:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1870:9:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":5442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1888:2:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":5443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1870:20:17","trueExpression":{"hexValue":"2d","id":5441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1882:3:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":5447,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5430,"src":"1916:5:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":5445,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5225,"src":"1901:10:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$5225_$","typeString":"type(library SignedMath)"}},"id":5446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1912:3:17","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":5224,"src":"1901:14:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":5448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:21:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5444,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5427,"src":"1892:8:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":5449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1892:31:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":5436,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1856:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5435,"name":"string","nodeType":"ElementaryTypeName","src":"1856:6:17","typeDescriptions":{}}},"id":5437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1863:6:17","memberName":"concat","nodeType":"MemberAccess","src":"1856:13:17","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":5450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1856:68:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":5434,"id":5451,"nodeType":"Return","src":"1849:75:17"}]},"documentation":{"id":5428,"nodeType":"StructuredDocumentation","src":"1665:91:17","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":5453,"implemented":true,"kind":"function","modifiers":[],"name":"toStringSigned","nameLocation":"1771:14:17","nodeType":"FunctionDefinition","parameters":{"id":5431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5430,"mutability":"mutable","name":"value","nameLocation":"1793:5:17","nodeType":"VariableDeclaration","scope":5453,"src":"1786:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5429,"name":"int256","nodeType":"ElementaryTypeName","src":"1786:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1785:14:17"},"returnParameters":{"id":5434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5433,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5453,"src":"1823:13:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5432,"name":"string","nodeType":"ElementaryTypeName","src":"1823:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1822:15:17"},"scope":6538,"src":"1762:170:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5472,"nodeType":"Block","src":"2116:104:17","statements":[{"id":5471,"nodeType":"UncheckedBlock","src":"2127:86:17","statements":[{"expression":{"arguments":[{"id":5462,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5456,"src":"2171:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5465,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5456,"src":"2190:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5463,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2624,"src":"2178:4:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2624_$","typeString":"type(library Math)"}},"id":5464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2183:6:17","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2566,"src":"2178:11:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2178:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2199:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2178:22:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5461,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[5473,5556,5576],"referencedDeclaration":5556,"src":"2159:11:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":5469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2159:42:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":5460,"id":5470,"nodeType":"Return","src":"2152:49:17"}]}]},"documentation":{"id":5454,"nodeType":"StructuredDocumentation","src":"1940:96:17","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":5473,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2051:11:17","nodeType":"FunctionDefinition","parameters":{"id":5457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5456,"mutability":"mutable","name":"value","nameLocation":"2071:5:17","nodeType":"VariableDeclaration","scope":5473,"src":"2063:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5455,"name":"uint256","nodeType":"ElementaryTypeName","src":"2063:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2062:15:17"},"returnParameters":{"id":5460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5459,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5473,"src":"2101:13:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5458,"name":"string","nodeType":"ElementaryTypeName","src":"2101:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2100:15:17"},"scope":6538,"src":"2042:178:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5555,"nodeType":"Block","src":"2438:448:17","statements":[{"assignments":[5484],"declarations":[{"constant":false,"id":5484,"mutability":"mutable","name":"localValue","nameLocation":"2457:10:17","nodeType":"VariableDeclaration","scope":5555,"src":"2449:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5483,"name":"uint256","nodeType":"ElementaryTypeName","src":"2449:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5486,"initialValue":{"id":5485,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5476,"src":"2470:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2449:26:17"},{"assignments":[5488],"declarations":[{"constant":false,"id":5488,"mutability":"mutable","name":"buffer","nameLocation":"2499:6:17","nodeType":"VariableDeclaration","scope":5555,"src":"2486:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5487,"name":"bytes","nodeType":"ElementaryTypeName","src":"2486:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5497,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":5491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2518:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5492,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5478,"src":"2522:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2518:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":5494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2531:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2518:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5490,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2508:9:17","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":5489,"name":"bytes","nodeType":"ElementaryTypeName","src":"2512:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":5496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2508:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2486:47:17"},{"expression":{"id":5502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5498,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"2544:6:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5500,"indexExpression":{"hexValue":"30","id":5499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2551:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2544:9:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":5501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2556:3:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2544:15:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":5503,"nodeType":"ExpressionStatement","src":"2544:15:17"},{"expression":{"id":5508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5504,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"2570:6:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5506,"indexExpression":{"hexValue":"31","id":5505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2577:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2570:9:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":5507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2582:3:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2570:15:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":5509,"nodeType":"ExpressionStatement","src":"2570:15:17"},{"body":{"id":5538,"nodeType":"Block","src":"2641:98:17","statements":[{"expression":{"id":5532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5524,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"2656:6:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5526,"indexExpression":{"id":5525,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5511,"src":"2663:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2656:9:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":5527,"name":"HEX_DIGITS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5363,"src":"2668:10:17","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":5531,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5528,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5484,"src":"2679:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":5529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2692:3:17","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2679:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2668:28:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2656:40:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":5533,"nodeType":"ExpressionStatement","src":"2656:40:17"},{"expression":{"id":5536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5534,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5484,"src":"2711:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":5535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2726:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2711:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5537,"nodeType":"ExpressionStatement","src":"2711:16:17"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5518,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5511,"src":"2629:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":5519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2633:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2629:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5539,"initializationExpression":{"assignments":[5511],"declarations":[{"constant":false,"id":5511,"mutability":"mutable","name":"i","nameLocation":"2609:1:17","nodeType":"VariableDeclaration","scope":5539,"src":"2601:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5510,"name":"uint256","nodeType":"ElementaryTypeName","src":"2601:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5517,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":5512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2613:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5513,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5478,"src":"2617:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2613:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2626:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2613:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2601:26:17"},"loopExpression":{"expression":{"id":5522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2636:3:17","subExpression":{"id":5521,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5511,"src":"2638:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5523,"nodeType":"ExpressionStatement","src":"2636:3:17"},"nodeType":"ForStatement","src":"2596:143:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5540,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5484,"src":"2753:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2767:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2753:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5549,"nodeType":"IfStatement","src":"2749:98:17","trueBody":{"id":5548,"nodeType":"Block","src":"2770:77:17","statements":[{"errorCall":{"arguments":[{"id":5544,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5476,"src":"2821:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5545,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5478,"src":"2828:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5543,"name":"StringsInsufficientHexLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5373,"src":"2792:28:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":5546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2792:43:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5547,"nodeType":"RevertStatement","src":"2785:50:17"}]}},{"expression":{"arguments":[{"id":5552,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"2871:6:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5551,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2864:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5550,"name":"string","nodeType":"ElementaryTypeName","src":"2864:6:17","typeDescriptions":{}}},"id":5553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2864:14:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":5482,"id":5554,"nodeType":"Return","src":"2857:21:17"}]},"documentation":{"id":5474,"nodeType":"StructuredDocumentation","src":"2228:114:17","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":5556,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2357:11:17","nodeType":"FunctionDefinition","parameters":{"id":5479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5476,"mutability":"mutable","name":"value","nameLocation":"2377:5:17","nodeType":"VariableDeclaration","scope":5556,"src":"2369:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5475,"name":"uint256","nodeType":"ElementaryTypeName","src":"2369:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5478,"mutability":"mutable","name":"length","nameLocation":"2392:6:17","nodeType":"VariableDeclaration","scope":5556,"src":"2384:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5477,"name":"uint256","nodeType":"ElementaryTypeName","src":"2384:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2368:31:17"},"returnParameters":{"id":5482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5481,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5556,"src":"2423:13:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5480,"name":"string","nodeType":"ElementaryTypeName","src":"2423:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2422:15:17"},"scope":6538,"src":"2348:538:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5575,"nodeType":"Block","src":"3124:77:17","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":5569,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5559,"src":"3170:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5568,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3162:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":5567,"name":"uint160","nodeType":"ElementaryTypeName","src":"3162:7:17","typeDescriptions":{}}},"id":5570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3162:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":5566,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3154:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5565,"name":"uint256","nodeType":"ElementaryTypeName","src":"3154:7:17","typeDescriptions":{}}},"id":5571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3154:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5572,"name":"ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5366,"src":"3178:14:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":5564,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[5473,5556,5576],"referencedDeclaration":5556,"src":"3142:11:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":5573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3142:51:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":5563,"id":5574,"nodeType":"Return","src":"3135:58:17"}]},"documentation":{"id":5557,"nodeType":"StructuredDocumentation","src":"2894:151:17","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."},"id":5576,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"3060:11:17","nodeType":"FunctionDefinition","parameters":{"id":5560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5559,"mutability":"mutable","name":"addr","nameLocation":"3080:4:17","nodeType":"VariableDeclaration","scope":5576,"src":"3072:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5558,"name":"address","nodeType":"ElementaryTypeName","src":"3072:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3071:14:17"},"returnParameters":{"id":5563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5562,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5576,"src":"3109:13:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5561,"name":"string","nodeType":"ElementaryTypeName","src":"3109:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3108:15:17"},"scope":6538,"src":"3051:150:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5640,"nodeType":"Block","src":"3464:660:17","statements":[{"assignments":[5585],"declarations":[{"constant":false,"id":5585,"mutability":"mutable","name":"buffer","nameLocation":"3488:6:17","nodeType":"VariableDeclaration","scope":5640,"src":"3475:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5584,"name":"bytes","nodeType":"ElementaryTypeName","src":"3475:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5592,"initialValue":{"arguments":[{"arguments":[{"id":5589,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5579,"src":"3515:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5588,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[5473,5556,5576],"referencedDeclaration":5576,"src":"3503:11:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":5590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3503:17:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5587,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3497:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5586,"name":"bytes","nodeType":"ElementaryTypeName","src":"3497:5:17","typeDescriptions":{}}},"id":5591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3497:24:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3475:46:17"},{"assignments":[5594],"declarations":[{"constant":false,"id":5594,"mutability":"mutable","name":"hashValue","nameLocation":"3617:9:17","nodeType":"VariableDeclaration","scope":5640,"src":"3609:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5593,"name":"uint256","nodeType":"ElementaryTypeName","src":"3609:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5595,"nodeType":"VariableDeclarationStatement","src":"3609:17:17"},{"AST":{"nodeType":"YulBlock","src":"3662:80:17","statements":[{"nodeType":"YulAssignment","src":"3677:54:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3694:2:17","type":"","value":"96"},{"arguments":[{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"3712:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"3720:4:17","type":"","value":"0x22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3708:3:17"},"nodeType":"YulFunctionCall","src":"3708:17:17"},{"kind":"number","nodeType":"YulLiteral","src":"3727:2:17","type":"","value":"40"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"3698:9:17"},"nodeType":"YulFunctionCall","src":"3698:32:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3690:3:17"},"nodeType":"YulFunctionCall","src":"3690:41:17"},"variableNames":[{"name":"hashValue","nodeType":"YulIdentifier","src":"3677:9:17"}]}]},"evmVersion":"london","externalReferences":[{"declaration":5585,"isOffset":false,"isSlot":false,"src":"3712:6:17","valueSize":1},{"declaration":5594,"isOffset":false,"isSlot":false,"src":"3677:9:17","valueSize":1}],"flags":["memory-safe"],"id":5596,"nodeType":"InlineAssembly","src":"3637:105:17"},{"body":{"id":5633,"nodeType":"Block","src":"3787:298:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5607,"name":"hashValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5594,"src":"3895:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":5608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3907:3:17","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"3895:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"37","id":5610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3913:1:17","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"src":"3895:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":5619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"baseExpression":{"id":5614,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5585,"src":"3924:6:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5616,"indexExpression":{"id":5615,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5598,"src":"3931:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3924:9:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":5613,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3918:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":5612,"name":"uint8","nodeType":"ElementaryTypeName","src":"3918:5:17","typeDescriptions":{}}},"id":5617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3918:16:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3936","id":5618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3937:2:17","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},"src":"3918:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3895:44:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5628,"nodeType":"IfStatement","src":"3891:153:17","trueBody":{"id":5627,"nodeType":"Block","src":"3941:103:17","statements":[{"expression":{"id":5625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5621,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5585,"src":"4011:6:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5623,"indexExpression":{"id":5622,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5598,"src":"4018:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4011:9:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"^=","rightHandSide":{"hexValue":"30783230","id":5624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4024:4:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"src":"4011:17:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":5626,"nodeType":"ExpressionStatement","src":"4011:17:17"}]}},{"expression":{"id":5631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5629,"name":"hashValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5594,"src":"4058:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":5630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4072:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"4058:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5632,"nodeType":"ExpressionStatement","src":"4058:15:17"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5601,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5598,"src":"3775:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":5602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3779:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3775:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5634,"initializationExpression":{"assignments":[5598],"declarations":[{"constant":false,"id":5598,"mutability":"mutable","name":"i","nameLocation":"3767:1:17","nodeType":"VariableDeclaration","scope":5634,"src":"3759:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5597,"name":"uint256","nodeType":"ElementaryTypeName","src":"3759:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5600,"initialValue":{"hexValue":"3431","id":5599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3771:2:17","typeDescriptions":{"typeIdentifier":"t_rational_41_by_1","typeString":"int_const 41"},"value":"41"},"nodeType":"VariableDeclarationStatement","src":"3759:14:17"},"loopExpression":{"expression":{"id":5605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"3782:3:17","subExpression":{"id":5604,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5598,"src":"3784:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5606,"nodeType":"ExpressionStatement","src":"3782:3:17"},"nodeType":"ForStatement","src":"3754:331:17"},{"expression":{"arguments":[{"id":5637,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5585,"src":"4109:6:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5636,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4102:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5635,"name":"string","nodeType":"ElementaryTypeName","src":"4102:6:17","typeDescriptions":{}}},"id":5638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4102:14:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":5583,"id":5639,"nodeType":"Return","src":"4095:21:17"}]},"documentation":{"id":5577,"nodeType":"StructuredDocumentation","src":"3209:168:17","text":" @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\n representation, according to EIP-55."},"id":5641,"implemented":true,"kind":"function","modifiers":[],"name":"toChecksumHexString","nameLocation":"3392:19:17","nodeType":"FunctionDefinition","parameters":{"id":5580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5579,"mutability":"mutable","name":"addr","nameLocation":"3420:4:17","nodeType":"VariableDeclaration","scope":5641,"src":"3412:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5578,"name":"address","nodeType":"ElementaryTypeName","src":"3412:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3411:14:17"},"returnParameters":{"id":5583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5582,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5641,"src":"3449:13:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5581,"name":"string","nodeType":"ElementaryTypeName","src":"3449:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3448:15:17"},"scope":6538,"src":"3383:741:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5677,"nodeType":"Block","src":"4284:106:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":5653,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5644,"src":"4308:1:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5652,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4302:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5651,"name":"bytes","nodeType":"ElementaryTypeName","src":"4302:5:17","typeDescriptions":{}}},"id":5654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4302:8:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4311:6:17","memberName":"length","nodeType":"MemberAccess","src":"4302:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":5658,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5646,"src":"4327:1:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5657,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4321:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5656,"name":"bytes","nodeType":"ElementaryTypeName","src":"4321:5:17","typeDescriptions":{}}},"id":5659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4321:8:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4330:6:17","memberName":"length","nodeType":"MemberAccess","src":"4321:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4302:34:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":5665,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5644,"src":"4356:1:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5664,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4350:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5663,"name":"bytes","nodeType":"ElementaryTypeName","src":"4350:5:17","typeDescriptions":{}}},"id":5666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4350:8:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5662,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4340:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4340:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":5671,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5646,"src":"4379:1:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4373:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5669,"name":"bytes","nodeType":"ElementaryTypeName","src":"4373:5:17","typeDescriptions":{}}},"id":5672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4373:8:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5668,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4363:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4363:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4340:42:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4302:80:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5650,"id":5676,"nodeType":"Return","src":"4295:87:17"}]},"documentation":{"id":5642,"nodeType":"StructuredDocumentation","src":"4132:68:17","text":" @dev Returns true if the two strings are equal."},"id":5678,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"4215:5:17","nodeType":"FunctionDefinition","parameters":{"id":5647,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5644,"mutability":"mutable","name":"a","nameLocation":"4235:1:17","nodeType":"VariableDeclaration","scope":5678,"src":"4221:15:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5643,"name":"string","nodeType":"ElementaryTypeName","src":"4221:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5646,"mutability":"mutable","name":"b","nameLocation":"4252:1:17","nodeType":"VariableDeclaration","scope":5678,"src":"4238:15:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5645,"name":"string","nodeType":"ElementaryTypeName","src":"4238:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4220:34:17"},"returnParameters":{"id":5650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5649,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5678,"src":"4278:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5648,"name":"bool","nodeType":"ElementaryTypeName","src":"4278:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4277:6:17"},"scope":6538,"src":"4206:184:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5696,"nodeType":"Block","src":"4696:66:17","statements":[{"expression":{"arguments":[{"id":5687,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5681,"src":"4724:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":5688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4731:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":5691,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5681,"src":"4740:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5690,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4734:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5689,"name":"bytes","nodeType":"ElementaryTypeName","src":"4734:5:17","typeDescriptions":{}}},"id":5692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4734:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4747:6:17","memberName":"length","nodeType":"MemberAccess","src":"4734:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5686,"name":"parseUint","nodeType":"Identifier","overloadedDeclarations":[5697,5728],"referencedDeclaration":5728,"src":"4714:9:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (uint256)"}},"id":5694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4714:40:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5685,"id":5695,"nodeType":"Return","src":"4707:47:17"}]},"documentation":{"id":5679,"nodeType":"StructuredDocumentation","src":"4398:220:17","text":" @dev Parse a decimal string and returns the value as a `uint256`.\n Requirements:\n - The string must be formatted as `[0-9]*`\n - The result must fit into an `uint256` type"},"id":5697,"implemented":true,"kind":"function","modifiers":[],"name":"parseUint","nameLocation":"4633:9:17","nodeType":"FunctionDefinition","parameters":{"id":5682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5681,"mutability":"mutable","name":"input","nameLocation":"4657:5:17","nodeType":"VariableDeclaration","scope":5697,"src":"4643:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5680,"name":"string","nodeType":"ElementaryTypeName","src":"4643:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4642:21:17"},"returnParameters":{"id":5685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5684,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5697,"src":"4687:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5683,"name":"uint256","nodeType":"ElementaryTypeName","src":"4687:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4686:9:17"},"scope":6538,"src":"4624:138:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5727,"nodeType":"Block","src":"5170:157:17","statements":[{"assignments":[5710,5712],"declarations":[{"constant":false,"id":5710,"mutability":"mutable","name":"success","nameLocation":"5187:7:17","nodeType":"VariableDeclaration","scope":5727,"src":"5182:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5709,"name":"bool","nodeType":"ElementaryTypeName","src":"5182:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5712,"mutability":"mutable","name":"value","nameLocation":"5204:5:17","nodeType":"VariableDeclaration","scope":5727,"src":"5196:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5711,"name":"uint256","nodeType":"ElementaryTypeName","src":"5196:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5718,"initialValue":{"arguments":[{"id":5714,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5700,"src":"5226:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":5715,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5702,"src":"5233:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5716,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"5240:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5713,"name":"tryParseUint","nodeType":"Identifier","overloadedDeclarations":[5749,5786],"referencedDeclaration":5786,"src":"5213:12:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":5717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5213:31:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"5181:63:17"},{"condition":{"id":5720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5259:8:17","subExpression":{"id":5719,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"5260:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5724,"nodeType":"IfStatement","src":"5255:41:17","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5721,"name":"StringsInvalidChar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5376,"src":"5276:18:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5276:20:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5723,"nodeType":"RevertStatement","src":"5269:27:17"}},{"expression":{"id":5725,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5712,"src":"5314:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5708,"id":5726,"nodeType":"Return","src":"5307:12:17"}]},"documentation":{"id":5698,"nodeType":"StructuredDocumentation","src":"4770:294:17","text":" @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\n `end` (excluded).\n Requirements:\n - The substring must be formatted as `[0-9]*`\n - The result must fit into an `uint256` type"},"id":5728,"implemented":true,"kind":"function","modifiers":[],"name":"parseUint","nameLocation":"5079:9:17","nodeType":"FunctionDefinition","parameters":{"id":5705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5700,"mutability":"mutable","name":"input","nameLocation":"5103:5:17","nodeType":"VariableDeclaration","scope":5728,"src":"5089:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5699,"name":"string","nodeType":"ElementaryTypeName","src":"5089:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5702,"mutability":"mutable","name":"begin","nameLocation":"5118:5:17","nodeType":"VariableDeclaration","scope":5728,"src":"5110:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5701,"name":"uint256","nodeType":"ElementaryTypeName","src":"5110:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5704,"mutability":"mutable","name":"end","nameLocation":"5133:3:17","nodeType":"VariableDeclaration","scope":5728,"src":"5125:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5703,"name":"uint256","nodeType":"ElementaryTypeName","src":"5125:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5088:49:17"},"returnParameters":{"id":5708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5707,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5728,"src":"5161:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5706,"name":"uint256","nodeType":"ElementaryTypeName","src":"5161:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5160:9:17"},"scope":6538,"src":"5070:257:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5748,"nodeType":"Block","src":"5655:85:17","statements":[{"expression":{"arguments":[{"id":5739,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5731,"src":"5702:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":5740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5709:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":5743,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5731,"src":"5718:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5742,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5712:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5741,"name":"bytes","nodeType":"ElementaryTypeName","src":"5712:5:17","typeDescriptions":{}}},"id":5744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5712:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5725:6:17","memberName":"length","nodeType":"MemberAccess","src":"5712:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5738,"name":"_tryParseUintUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5856,"src":"5673:28:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":5746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5673:59:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":5737,"id":5747,"nodeType":"Return","src":"5666:66:17"}]},"documentation":{"id":5729,"nodeType":"StructuredDocumentation","src":"5335:219:17","text":" @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\n NOTE: This function will revert if the result does not fit in a `uint256`."},"id":5749,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseUint","nameLocation":"5569:12:17","nodeType":"FunctionDefinition","parameters":{"id":5732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5731,"mutability":"mutable","name":"input","nameLocation":"5596:5:17","nodeType":"VariableDeclaration","scope":5749,"src":"5582:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5730,"name":"string","nodeType":"ElementaryTypeName","src":"5582:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5581:21:17"},"returnParameters":{"id":5737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5734,"mutability":"mutable","name":"success","nameLocation":"5631:7:17","nodeType":"VariableDeclaration","scope":5749,"src":"5626:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5733,"name":"bool","nodeType":"ElementaryTypeName","src":"5626:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5736,"mutability":"mutable","name":"value","nameLocation":"5648:5:17","nodeType":"VariableDeclaration","scope":5749,"src":"5640:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5735,"name":"uint256","nodeType":"ElementaryTypeName","src":"5640:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5625:29:17"},"scope":6538,"src":"5560:180:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5785,"nodeType":"Block","src":"6154:147:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5763,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5756,"src":"6169:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5766,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5752,"src":"6181:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5765,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6175:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5764,"name":"bytes","nodeType":"ElementaryTypeName","src":"6175:5:17","typeDescriptions":{}}},"id":5767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6175:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6188:6:17","memberName":"length","nodeType":"MemberAccess","src":"6175:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6169:25:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5770,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5754,"src":"6198:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5771,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5756,"src":"6206:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6198:11:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6169:40:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5778,"nodeType":"IfStatement","src":"6165:63:17","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":5774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6219:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":5775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6226:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":5776,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6218:10:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":5762,"id":5777,"nodeType":"Return","src":"6211:17:17"}},{"expression":{"arguments":[{"id":5780,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5752,"src":"6275:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":5781,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5754,"src":"6282:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5782,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5756,"src":"6289:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5779,"name":"_tryParseUintUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5856,"src":"6246:28:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":5783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6246:47:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":5762,"id":5784,"nodeType":"Return","src":"6239:54:17"}]},"documentation":{"id":5750,"nodeType":"StructuredDocumentation","src":"5748:243:17","text":" @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n character.\n NOTE: This function will revert if the result does not fit in a `uint256`."},"id":5786,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseUint","nameLocation":"6006:12:17","nodeType":"FunctionDefinition","parameters":{"id":5757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5752,"mutability":"mutable","name":"input","nameLocation":"6043:5:17","nodeType":"VariableDeclaration","scope":5786,"src":"6029:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5751,"name":"string","nodeType":"ElementaryTypeName","src":"6029:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5754,"mutability":"mutable","name":"begin","nameLocation":"6067:5:17","nodeType":"VariableDeclaration","scope":5786,"src":"6059:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5753,"name":"uint256","nodeType":"ElementaryTypeName","src":"6059:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5756,"mutability":"mutable","name":"end","nameLocation":"6091:3:17","nodeType":"VariableDeclaration","scope":5786,"src":"6083:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5755,"name":"uint256","nodeType":"ElementaryTypeName","src":"6083:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6018:83:17"},"returnParameters":{"id":5762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5759,"mutability":"mutable","name":"success","nameLocation":"6130:7:17","nodeType":"VariableDeclaration","scope":5786,"src":"6125:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5758,"name":"bool","nodeType":"ElementaryTypeName","src":"6125:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5761,"mutability":"mutable","name":"value","nameLocation":"6147:5:17","nodeType":"VariableDeclaration","scope":5786,"src":"6139:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5760,"name":"uint256","nodeType":"ElementaryTypeName","src":"6139:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6124:29:17"},"scope":6538,"src":"5997:304:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5855,"nodeType":"Block","src":"6608:358:17","statements":[{"assignments":[5801],"declarations":[{"constant":false,"id":5801,"mutability":"mutable","name":"buffer","nameLocation":"6632:6:17","nodeType":"VariableDeclaration","scope":5855,"src":"6619:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5800,"name":"bytes","nodeType":"ElementaryTypeName","src":"6619:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5806,"initialValue":{"arguments":[{"id":5804,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5789,"src":"6647:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5803,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6641:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5802,"name":"bytes","nodeType":"ElementaryTypeName","src":"6641:5:17","typeDescriptions":{}}},"id":5805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6641:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"6619:34:17"},{"assignments":[5808],"declarations":[{"constant":false,"id":5808,"mutability":"mutable","name":"result","nameLocation":"6674:6:17","nodeType":"VariableDeclaration","scope":5855,"src":"6666:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5807,"name":"uint256","nodeType":"ElementaryTypeName","src":"6666:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5810,"initialValue":{"hexValue":"30","id":5809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6683:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6666:18:17"},{"body":{"id":5849,"nodeType":"Block","src":"6733:194:17","statements":[{"assignments":[5822],"declarations":[{"constant":false,"id":5822,"mutability":"mutable","name":"chr","nameLocation":"6754:3:17","nodeType":"VariableDeclaration","scope":5849,"src":"6748:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5821,"name":"uint8","nodeType":"ElementaryTypeName","src":"6748:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":5832,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"id":5827,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5801,"src":"6803:6:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5828,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5812,"src":"6811:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5826,"name":"_unsafeReadBytesOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6537,"src":"6780:22:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":5829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6780:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5825,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6773:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":5824,"name":"bytes1","nodeType":"ElementaryTypeName","src":"6773:6:17","typeDescriptions":{}}},"id":5830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6773:41:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":5823,"name":"_tryParseChr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6525,"src":"6760:12:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes1_$returns$_t_uint8_$","typeString":"function (bytes1) pure returns (uint8)"}},"id":5831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6760:55:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"6748:67:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":5835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5833,"name":"chr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5822,"src":"6834:3:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"39","id":5834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6840:1:17","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},"src":"6834:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5840,"nodeType":"IfStatement","src":"6830:30:17","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":5836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6851:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":5837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6858:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":5838,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6850:10:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":5799,"id":5839,"nodeType":"Return","src":"6843:17:17"}},{"expression":{"id":5843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5841,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"6875:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"hexValue":"3130","id":5842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6885:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"6875:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5844,"nodeType":"ExpressionStatement","src":"6875:12:17"},{"expression":{"id":5847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5845,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"6902:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5846,"name":"chr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5822,"src":"6912:3:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6902:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5848,"nodeType":"ExpressionStatement","src":"6902:13:17"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5815,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5812,"src":"6719:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5816,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5793,"src":"6723:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6719:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5850,"initializationExpression":{"assignments":[5812],"declarations":[{"constant":false,"id":5812,"mutability":"mutable","name":"i","nameLocation":"6708:1:17","nodeType":"VariableDeclaration","scope":5850,"src":"6700:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5811,"name":"uint256","nodeType":"ElementaryTypeName","src":"6700:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5814,"initialValue":{"id":5813,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5791,"src":"6712:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6700:17:17"},"loopExpression":{"expression":{"id":5819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"6728:3:17","subExpression":{"id":5818,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5812,"src":"6730:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5820,"nodeType":"ExpressionStatement","src":"6728:3:17"},"nodeType":"ForStatement","src":"6695:232:17"},{"expression":{"components":[{"hexValue":"74727565","id":5851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6945:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":5852,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"6951:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5853,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6944:14:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":5799,"id":5854,"nodeType":"Return","src":"6937:21:17"}]},"documentation":{"id":5787,"nodeType":"StructuredDocumentation","src":"6309:121:17","text":" @dev Variant of {tryParseUint} that does not check bounds and returns (true, 0) if they are invalid."},"id":5856,"implemented":true,"kind":"function","modifiers":[],"name":"_tryParseUintUncheckedBounds","nameLocation":"6445:28:17","nodeType":"FunctionDefinition","parameters":{"id":5794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5789,"mutability":"mutable","name":"input","nameLocation":"6498:5:17","nodeType":"VariableDeclaration","scope":5856,"src":"6484:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5788,"name":"string","nodeType":"ElementaryTypeName","src":"6484:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5791,"mutability":"mutable","name":"begin","nameLocation":"6522:5:17","nodeType":"VariableDeclaration","scope":5856,"src":"6514:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5790,"name":"uint256","nodeType":"ElementaryTypeName","src":"6514:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5793,"mutability":"mutable","name":"end","nameLocation":"6546:3:17","nodeType":"VariableDeclaration","scope":5856,"src":"6538:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5792,"name":"uint256","nodeType":"ElementaryTypeName","src":"6538:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6473:83:17"},"returnParameters":{"id":5799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5796,"mutability":"mutable","name":"success","nameLocation":"6584:7:17","nodeType":"VariableDeclaration","scope":5856,"src":"6579:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5795,"name":"bool","nodeType":"ElementaryTypeName","src":"6579:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5798,"mutability":"mutable","name":"value","nameLocation":"6601:5:17","nodeType":"VariableDeclaration","scope":5856,"src":"6593:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5797,"name":"uint256","nodeType":"ElementaryTypeName","src":"6593:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6578:29:17"},"scope":6538,"src":"6436:530:17","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":5874,"nodeType":"Block","src":"7272:65:17","statements":[{"expression":{"arguments":[{"id":5865,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5859,"src":"7299:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":5866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7306:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":5869,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5859,"src":"7315:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5868,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7309:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5867,"name":"bytes","nodeType":"ElementaryTypeName","src":"7309:5:17","typeDescriptions":{}}},"id":5870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7309:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7322:6:17","memberName":"length","nodeType":"MemberAccess","src":"7309:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5864,"name":"parseInt","nodeType":"Identifier","overloadedDeclarations":[5875,5906],"referencedDeclaration":5906,"src":"7290:8:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_int256_$","typeString":"function (string memory,uint256,uint256) pure returns (int256)"}},"id":5872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7290:39:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5863,"id":5873,"nodeType":"Return","src":"7283:46:17"}]},"documentation":{"id":5857,"nodeType":"StructuredDocumentation","src":"6974:222:17","text":" @dev Parse a decimal string and returns the value as a `int256`.\n Requirements:\n - The string must be formatted as `[-+]?[0-9]*`\n - The result must fit in an `int256` type."},"id":5875,"implemented":true,"kind":"function","modifiers":[],"name":"parseInt","nameLocation":"7211:8:17","nodeType":"FunctionDefinition","parameters":{"id":5860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5859,"mutability":"mutable","name":"input","nameLocation":"7234:5:17","nodeType":"VariableDeclaration","scope":5875,"src":"7220:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5858,"name":"string","nodeType":"ElementaryTypeName","src":"7220:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7219:21:17"},"returnParameters":{"id":5863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5862,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5875,"src":"7264:6:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5861,"name":"int256","nodeType":"ElementaryTypeName","src":"7264:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"7263:8:17"},"scope":6538,"src":"7202:135:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5905,"nodeType":"Block","src":"7752:155:17","statements":[{"assignments":[5888,5890],"declarations":[{"constant":false,"id":5888,"mutability":"mutable","name":"success","nameLocation":"7769:7:17","nodeType":"VariableDeclaration","scope":5905,"src":"7764:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5887,"name":"bool","nodeType":"ElementaryTypeName","src":"7764:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5890,"mutability":"mutable","name":"value","nameLocation":"7785:5:17","nodeType":"VariableDeclaration","scope":5905,"src":"7778:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5889,"name":"int256","nodeType":"ElementaryTypeName","src":"7778:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":5896,"initialValue":{"arguments":[{"id":5892,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5878,"src":"7806:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":5893,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5880,"src":"7813:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5894,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5882,"src":"7820:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5891,"name":"tryParseInt","nodeType":"Identifier","overloadedDeclarations":[5927,5969],"referencedDeclaration":5969,"src":"7794:11:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_int256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,int256)"}},"id":5895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7794:30:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_int256_$","typeString":"tuple(bool,int256)"}},"nodeType":"VariableDeclarationStatement","src":"7763:61:17"},{"condition":{"id":5898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7839:8:17","subExpression":{"id":5897,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5888,"src":"7840:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5902,"nodeType":"IfStatement","src":"7835:41:17","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5899,"name":"StringsInvalidChar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5376,"src":"7856:18:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7856:20:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5901,"nodeType":"RevertStatement","src":"7849:27:17"}},{"expression":{"id":5903,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5890,"src":"7894:5:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5886,"id":5904,"nodeType":"Return","src":"7887:12:17"}]},"documentation":{"id":5876,"nodeType":"StructuredDocumentation","src":"7345:303:17","text":" @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\n `end` (excluded).\n Requirements:\n - The substring must be formatted as `[-+]?[0-9]*`\n - The result must fit in an `int256` type."},"id":5906,"implemented":true,"kind":"function","modifiers":[],"name":"parseInt","nameLocation":"7663:8:17","nodeType":"FunctionDefinition","parameters":{"id":5883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5878,"mutability":"mutable","name":"input","nameLocation":"7686:5:17","nodeType":"VariableDeclaration","scope":5906,"src":"7672:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5877,"name":"string","nodeType":"ElementaryTypeName","src":"7672:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5880,"mutability":"mutable","name":"begin","nameLocation":"7701:5:17","nodeType":"VariableDeclaration","scope":5906,"src":"7693:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5879,"name":"uint256","nodeType":"ElementaryTypeName","src":"7693:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5882,"mutability":"mutable","name":"end","nameLocation":"7716:3:17","nodeType":"VariableDeclaration","scope":5906,"src":"7708:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5881,"name":"uint256","nodeType":"ElementaryTypeName","src":"7708:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7671:49:17"},"returnParameters":{"id":5886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5885,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5906,"src":"7744:6:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5884,"name":"int256","nodeType":"ElementaryTypeName","src":"7744:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"7743:8:17"},"scope":6538,"src":"7654:253:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5926,"nodeType":"Block","src":"8306:84:17","statements":[{"expression":{"arguments":[{"id":5917,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5909,"src":"8352:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":5918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8359:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":5921,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5909,"src":"8368:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5920,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8362:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5919,"name":"bytes","nodeType":"ElementaryTypeName","src":"8362:5:17","typeDescriptions":{}}},"id":5922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8362:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8375:6:17","memberName":"length","nodeType":"MemberAccess","src":"8362:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5916,"name":"_tryParseIntUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6090,"src":"8324:27:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_int256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,int256)"}},"id":5924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8324:58:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_int256_$","typeString":"tuple(bool,int256)"}},"functionReturnParameters":5915,"id":5925,"nodeType":"Return","src":"8317:65:17"}]},"documentation":{"id":5907,"nodeType":"StructuredDocumentation","src":"7915:292:17","text":" @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\n the result does not fit in a `int256`.\n NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`."},"id":5927,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseInt","nameLocation":"8222:11:17","nodeType":"FunctionDefinition","parameters":{"id":5910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5909,"mutability":"mutable","name":"input","nameLocation":"8248:5:17","nodeType":"VariableDeclaration","scope":5927,"src":"8234:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5908,"name":"string","nodeType":"ElementaryTypeName","src":"8234:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8233:21:17"},"returnParameters":{"id":5915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5912,"mutability":"mutable","name":"success","nameLocation":"8283:7:17","nodeType":"VariableDeclaration","scope":5927,"src":"8278:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5911,"name":"bool","nodeType":"ElementaryTypeName","src":"8278:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5914,"mutability":"mutable","name":"value","nameLocation":"8299:5:17","nodeType":"VariableDeclaration","scope":5927,"src":"8292:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5913,"name":"int256","nodeType":"ElementaryTypeName","src":"8292:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"8277:28:17"},"scope":6538,"src":"8213:177:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"constant":true,"id":5932,"mutability":"constant","name":"ABS_MIN_INT256","nameLocation":"8423:14:17","nodeType":"VariableDeclaration","scope":6538,"src":"8398:50:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5928,"name":"uint256","nodeType":"ElementaryTypeName","src":"8398:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1","typeString":"int_const 5789...(69 digits omitted)...9968"},"id":5931,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":5929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8440:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"323535","id":5930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8445:3:17","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"8440:8:17","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1","typeString":"int_const 5789...(69 digits omitted)...9968"}},"visibility":"private"},{"body":{"id":5968,"nodeType":"Block","src":"8926:146:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5946,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5939,"src":"8941:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5949,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5935,"src":"8953:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5948,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8947:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5947,"name":"bytes","nodeType":"ElementaryTypeName","src":"8947:5:17","typeDescriptions":{}}},"id":5950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8947:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8960:6:17","memberName":"length","nodeType":"MemberAccess","src":"8947:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8941:25:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5953,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5937,"src":"8970:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5954,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5939,"src":"8978:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8970:11:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8941:40:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5961,"nodeType":"IfStatement","src":"8937:63:17","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":5957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8991:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":5958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8998:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":5959,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"8990:10:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":5945,"id":5960,"nodeType":"Return","src":"8983:17:17"}},{"expression":{"arguments":[{"id":5963,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5935,"src":"9046:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":5964,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5937,"src":"9053:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5965,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5939,"src":"9060:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5962,"name":"_tryParseIntUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6090,"src":"9018:27:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_int256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,int256)"}},"id":5966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9018:46:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_int256_$","typeString":"tuple(bool,int256)"}},"functionReturnParameters":5945,"id":5967,"nodeType":"Return","src":"9011:53:17"}]},"documentation":{"id":5933,"nodeType":"StructuredDocumentation","src":"8457:308:17","text":" @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n character or if the result does not fit in a `int256`.\n NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`."},"id":5969,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseInt","nameLocation":"8780:11:17","nodeType":"FunctionDefinition","parameters":{"id":5940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5935,"mutability":"mutable","name":"input","nameLocation":"8816:5:17","nodeType":"VariableDeclaration","scope":5969,"src":"8802:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5934,"name":"string","nodeType":"ElementaryTypeName","src":"8802:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5937,"mutability":"mutable","name":"begin","nameLocation":"8840:5:17","nodeType":"VariableDeclaration","scope":5969,"src":"8832:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5936,"name":"uint256","nodeType":"ElementaryTypeName","src":"8832:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5939,"mutability":"mutable","name":"end","nameLocation":"8864:3:17","nodeType":"VariableDeclaration","scope":5969,"src":"8856:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5938,"name":"uint256","nodeType":"ElementaryTypeName","src":"8856:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8791:83:17"},"returnParameters":{"id":5945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5942,"mutability":"mutable","name":"success","nameLocation":"8903:7:17","nodeType":"VariableDeclaration","scope":5969,"src":"8898:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5941,"name":"bool","nodeType":"ElementaryTypeName","src":"8898:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5944,"mutability":"mutable","name":"value","nameLocation":"8919:5:17","nodeType":"VariableDeclaration","scope":5969,"src":"8912:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5943,"name":"int256","nodeType":"ElementaryTypeName","src":"8912:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"8897:28:17"},"scope":6538,"src":"8771:301:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6089,"nodeType":"Block","src":"9376:828:17","statements":[{"assignments":[5984],"declarations":[{"constant":false,"id":5984,"mutability":"mutable","name":"buffer","nameLocation":"9400:6:17","nodeType":"VariableDeclaration","scope":6089,"src":"9387:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5983,"name":"bytes","nodeType":"ElementaryTypeName","src":"9387:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5989,"initialValue":{"arguments":[{"id":5987,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5972,"src":"9415:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5986,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9409:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5985,"name":"bytes","nodeType":"ElementaryTypeName","src":"9409:5:17","typeDescriptions":{}}},"id":5988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9409:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"9387:34:17"},{"assignments":[5991],"declarations":[{"constant":false,"id":5991,"mutability":"mutable","name":"sign","nameLocation":"9488:4:17","nodeType":"VariableDeclaration","scope":6089,"src":"9481:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":5990,"name":"bytes1","nodeType":"ElementaryTypeName","src":"9481:6:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"id":6007,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5992,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5974,"src":"9495:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5993,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5976,"src":"9504:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9495:12:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"arguments":[{"id":6002,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5984,"src":"9552:6:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":6003,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5974,"src":"9560:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6001,"name":"_unsafeReadBytesOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6537,"src":"9529:22:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":6004,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9529:37:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6000,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9522:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":5999,"name":"bytes1","nodeType":"ElementaryTypeName","src":"9522:6:17","typeDescriptions":{}}},"id":6005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9522:45:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":6006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9495:72:17","trueExpression":{"arguments":[{"hexValue":"30","id":5997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9517:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5996,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9510:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":5995,"name":"bytes1","nodeType":"ElementaryTypeName","src":"9510:6:17","typeDescriptions":{}}},"id":5998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9510:9:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"VariableDeclarationStatement","src":"9481:86:17"},{"assignments":[6009],"declarations":[{"constant":false,"id":6009,"mutability":"mutable","name":"positiveSign","nameLocation":"9654:12:17","nodeType":"VariableDeclaration","scope":6089,"src":"9649:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6008,"name":"bool","nodeType":"ElementaryTypeName","src":"9649:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":6016,"initialValue":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":6015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6010,"name":"sign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5991,"src":"9669:4:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"2b","id":6013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9684:3:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_728b8dbbe730d9acd55e30e768e6a28a04bea0c61b88108287c2c87d79c98bb8","typeString":"literal_string \"+\""},"value":"+"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_728b8dbbe730d9acd55e30e768e6a28a04bea0c61b88108287c2c87d79c98bb8","typeString":"literal_string \"+\""}],"id":6012,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9677:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":6011,"name":"bytes1","nodeType":"ElementaryTypeName","src":"9677:6:17","typeDescriptions":{}}},"id":6014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9677:11:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"9669:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"9649:39:17"},{"assignments":[6018],"declarations":[{"constant":false,"id":6018,"mutability":"mutable","name":"negativeSign","nameLocation":"9704:12:17","nodeType":"VariableDeclaration","scope":6089,"src":"9699:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6017,"name":"bool","nodeType":"ElementaryTypeName","src":"9699:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":6025,"initialValue":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":6024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6019,"name":"sign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5991,"src":"9719:4:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"2d","id":6022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9734:3:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""}],"id":6021,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9727:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":6020,"name":"bytes1","nodeType":"ElementaryTypeName","src":"9727:6:17","typeDescriptions":{}}},"id":6023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9727:11:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"9719:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"9699:39:17"},{"assignments":[6027],"declarations":[{"constant":false,"id":6027,"mutability":"mutable","name":"offset","nameLocation":"9757:6:17","nodeType":"VariableDeclaration","scope":6089,"src":"9749:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6026,"name":"uint256","nodeType":"ElementaryTypeName","src":"9749:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6034,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6028,"name":"positiveSign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6009,"src":"9767:12:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":6029,"name":"negativeSign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6018,"src":"9783:12:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9767:28:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":6031,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9766:30:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9797:6:17","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4582,"src":"9766:37:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$bound_to$_t_bool_$","typeString":"function (bool) pure returns (uint256)"}},"id":6033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9766:39:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9749:56:17"},{"assignments":[6036,6038],"declarations":[{"constant":false,"id":6036,"mutability":"mutable","name":"absSuccess","nameLocation":"9824:10:17","nodeType":"VariableDeclaration","scope":6089,"src":"9819:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6035,"name":"bool","nodeType":"ElementaryTypeName","src":"9819:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6038,"mutability":"mutable","name":"absValue","nameLocation":"9844:8:17","nodeType":"VariableDeclaration","scope":6089,"src":"9836:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6037,"name":"uint256","nodeType":"ElementaryTypeName","src":"9836:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6046,"initialValue":{"arguments":[{"id":6040,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5972,"src":"9869:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6041,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5974,"src":"9876:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":6042,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6027,"src":"9884:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9876:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6044,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5976,"src":"9892:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6039,"name":"tryParseUint","nodeType":"Identifier","overloadedDeclarations":[5749,5786],"referencedDeclaration":5786,"src":"9856:12:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":6045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9856:40:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"9818:78:17"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6047,"name":"absSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6036,"src":"9913:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6048,"name":"absValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6038,"src":"9927:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":6049,"name":"ABS_MIN_INT256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5932,"src":"9938:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9927:25:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9913:39:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6067,"name":"absSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6036,"src":"10057:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":6068,"name":"negativeSign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6018,"src":"10071:12:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10057:26:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6070,"name":"absValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6038,"src":"10087:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6071,"name":"ABS_MIN_INT256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5932,"src":"10099:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10087:26:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10057:56:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"expression":{"components":[{"hexValue":"66616c7365","id":6083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10187:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":6084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10194:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":6085,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"10186:10:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":5982,"id":6086,"nodeType":"Return","src":"10179:17:17"},"id":6087,"nodeType":"IfStatement","src":"10053:143:17","trueBody":{"id":6082,"nodeType":"Block","src":"10115:58:17","statements":[{"expression":{"components":[{"hexValue":"74727565","id":6074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10138:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"expression":{"arguments":[{"id":6077,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10149:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":6076,"name":"int256","nodeType":"ElementaryTypeName","src":"10149:6:17","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"}],"id":6075,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10144:4:17","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10144:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int256","typeString":"type(int256)"}},"id":6079,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10157:3:17","memberName":"min","nodeType":"MemberAccess","src":"10144:16:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":6080,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"10137:24:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_int256_$","typeString":"tuple(bool,int256)"}},"functionReturnParameters":5982,"id":6081,"nodeType":"Return","src":"10130:31:17"}]}},"id":6088,"nodeType":"IfStatement","src":"9909:287:17","trueBody":{"id":6066,"nodeType":"Block","src":"9954:93:17","statements":[{"expression":{"components":[{"hexValue":"74727565","id":6052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9977:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"condition":{"id":6053,"name":"negativeSign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6018,"src":"9983:12:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":6061,"name":"absValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6038,"src":"10025:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6060,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10018:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":6059,"name":"int256","nodeType":"ElementaryTypeName","src":"10018:6:17","typeDescriptions":{}}},"id":6062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10018:16:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":6063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9983:51:17","trueExpression":{"id":6058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"9998:17:17","subExpression":{"arguments":[{"id":6056,"name":"absValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6038,"src":"10006:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6055,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9999:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":6054,"name":"int256","nodeType":"ElementaryTypeName","src":"9999:6:17","typeDescriptions":{}}},"id":6057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9999:16:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":6064,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9976:59:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_int256_$","typeString":"tuple(bool,int256)"}},"functionReturnParameters":5982,"id":6065,"nodeType":"Return","src":"9969:66:17"}]}}]},"documentation":{"id":5970,"nodeType":"StructuredDocumentation","src":"9080:120:17","text":" @dev Variant of {tryParseInt} that does not check bounds and returns (true, 0) if they are invalid."},"id":6090,"implemented":true,"kind":"function","modifiers":[],"name":"_tryParseIntUncheckedBounds","nameLocation":"9215:27:17","nodeType":"FunctionDefinition","parameters":{"id":5977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5972,"mutability":"mutable","name":"input","nameLocation":"9267:5:17","nodeType":"VariableDeclaration","scope":6090,"src":"9253:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5971,"name":"string","nodeType":"ElementaryTypeName","src":"9253:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5974,"mutability":"mutable","name":"begin","nameLocation":"9291:5:17","nodeType":"VariableDeclaration","scope":6090,"src":"9283:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5973,"name":"uint256","nodeType":"ElementaryTypeName","src":"9283:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5976,"mutability":"mutable","name":"end","nameLocation":"9315:3:17","nodeType":"VariableDeclaration","scope":6090,"src":"9307:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5975,"name":"uint256","nodeType":"ElementaryTypeName","src":"9307:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9242:83:17"},"returnParameters":{"id":5982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5979,"mutability":"mutable","name":"success","nameLocation":"9353:7:17","nodeType":"VariableDeclaration","scope":6090,"src":"9348:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5978,"name":"bool","nodeType":"ElementaryTypeName","src":"9348:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5981,"mutability":"mutable","name":"value","nameLocation":"9369:5:17","nodeType":"VariableDeclaration","scope":6090,"src":"9362:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5980,"name":"int256","nodeType":"ElementaryTypeName","src":"9362:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"9347:28:17"},"scope":6538,"src":"9206:998:17","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":6108,"nodeType":"Block","src":"10558:69:17","statements":[{"expression":{"arguments":[{"id":6099,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6093,"src":"10589:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":6100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10596:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":6103,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6093,"src":"10605:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":6102,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10599:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":6101,"name":"bytes","nodeType":"ElementaryTypeName","src":"10599:5:17","typeDescriptions":{}}},"id":6104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10599:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10612:6:17","memberName":"length","nodeType":"MemberAccess","src":"10599:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6098,"name":"parseHexUint","nodeType":"Identifier","overloadedDeclarations":[6109,6140],"referencedDeclaration":6140,"src":"10576:12:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (uint256)"}},"id":6106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10576:43:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6097,"id":6107,"nodeType":"Return","src":"10569:50:17"}]},"documentation":{"id":6091,"nodeType":"StructuredDocumentation","src":"10212:265:17","text":" @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as a `uint256`.\n Requirements:\n - The string must be formatted as `(0x)?[0-9a-fA-F]*`\n - The result must fit in an `uint256` type."},"id":6109,"implemented":true,"kind":"function","modifiers":[],"name":"parseHexUint","nameLocation":"10492:12:17","nodeType":"FunctionDefinition","parameters":{"id":6094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6093,"mutability":"mutable","name":"input","nameLocation":"10519:5:17","nodeType":"VariableDeclaration","scope":6109,"src":"10505:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6092,"name":"string","nodeType":"ElementaryTypeName","src":"10505:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"10504:21:17"},"returnParameters":{"id":6097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6096,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6109,"src":"10549:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6095,"name":"uint256","nodeType":"ElementaryTypeName","src":"10549:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10548:9:17"},"scope":6538,"src":"10483:144:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6139,"nodeType":"Block","src":"11051:160:17","statements":[{"assignments":[6122,6124],"declarations":[{"constant":false,"id":6122,"mutability":"mutable","name":"success","nameLocation":"11068:7:17","nodeType":"VariableDeclaration","scope":6139,"src":"11063:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6121,"name":"bool","nodeType":"ElementaryTypeName","src":"11063:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6124,"mutability":"mutable","name":"value","nameLocation":"11085:5:17","nodeType":"VariableDeclaration","scope":6139,"src":"11077:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6123,"name":"uint256","nodeType":"ElementaryTypeName","src":"11077:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6130,"initialValue":{"arguments":[{"id":6126,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6112,"src":"11110:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":6127,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6114,"src":"11117:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6128,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6116,"src":"11124:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6125,"name":"tryParseHexUint","nodeType":"Identifier","overloadedDeclarations":[6161,6198],"referencedDeclaration":6198,"src":"11094:15:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":6129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11094:34:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"11062:66:17"},{"condition":{"id":6132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"11143:8:17","subExpression":{"id":6131,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6122,"src":"11144:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6136,"nodeType":"IfStatement","src":"11139:41:17","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6133,"name":"StringsInvalidChar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5376,"src":"11160:18:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11160:20:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6135,"nodeType":"RevertStatement","src":"11153:27:17"}},{"expression":{"id":6137,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6124,"src":"11198:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6120,"id":6138,"nodeType":"Return","src":"11191:12:17"}]},"documentation":{"id":6110,"nodeType":"StructuredDocumentation","src":"10635:307:17","text":" @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\n `end` (excluded).\n Requirements:\n - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\n - The result must fit in an `uint256` type."},"id":6140,"implemented":true,"kind":"function","modifiers":[],"name":"parseHexUint","nameLocation":"10957:12:17","nodeType":"FunctionDefinition","parameters":{"id":6117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6112,"mutability":"mutable","name":"input","nameLocation":"10984:5:17","nodeType":"VariableDeclaration","scope":6140,"src":"10970:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6111,"name":"string","nodeType":"ElementaryTypeName","src":"10970:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":6114,"mutability":"mutable","name":"begin","nameLocation":"10999:5:17","nodeType":"VariableDeclaration","scope":6140,"src":"10991:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6113,"name":"uint256","nodeType":"ElementaryTypeName","src":"10991:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6116,"mutability":"mutable","name":"end","nameLocation":"11014:3:17","nodeType":"VariableDeclaration","scope":6140,"src":"11006:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6115,"name":"uint256","nodeType":"ElementaryTypeName","src":"11006:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10969:49:17"},"returnParameters":{"id":6120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6119,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6140,"src":"11042:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6118,"name":"uint256","nodeType":"ElementaryTypeName","src":"11042:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11041:9:17"},"scope":6538,"src":"10948:263:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6160,"nodeType":"Block","src":"11545:88:17","statements":[{"expression":{"arguments":[{"id":6151,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6143,"src":"11595:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":6152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11602:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":6155,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6143,"src":"11611:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":6154,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11605:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":6153,"name":"bytes","nodeType":"ElementaryTypeName","src":"11605:5:17","typeDescriptions":{}}},"id":6156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11605:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11618:6:17","memberName":"length","nodeType":"MemberAccess","src":"11605:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6150,"name":"_tryParseHexUintUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6301,"src":"11563:31:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":6158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11563:62:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":6149,"id":6159,"nodeType":"Return","src":"11556:69:17"}]},"documentation":{"id":6141,"nodeType":"StructuredDocumentation","src":"11219:222:17","text":" @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\n NOTE: This function will revert if the result does not fit in a `uint256`."},"id":6161,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseHexUint","nameLocation":"11456:15:17","nodeType":"FunctionDefinition","parameters":{"id":6144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6143,"mutability":"mutable","name":"input","nameLocation":"11486:5:17","nodeType":"VariableDeclaration","scope":6161,"src":"11472:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6142,"name":"string","nodeType":"ElementaryTypeName","src":"11472:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"11471:21:17"},"returnParameters":{"id":6149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6146,"mutability":"mutable","name":"success","nameLocation":"11521:7:17","nodeType":"VariableDeclaration","scope":6161,"src":"11516:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6145,"name":"bool","nodeType":"ElementaryTypeName","src":"11516:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6148,"mutability":"mutable","name":"value","nameLocation":"11538:5:17","nodeType":"VariableDeclaration","scope":6161,"src":"11530:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6147,"name":"uint256","nodeType":"ElementaryTypeName","src":"11530:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11515:29:17"},"scope":6538,"src":"11447:186:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6197,"nodeType":"Block","src":"12053:150:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6175,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6168,"src":"12068:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6178,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6164,"src":"12080:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":6177,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12074:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":6176,"name":"bytes","nodeType":"ElementaryTypeName","src":"12074:5:17","typeDescriptions":{}}},"id":6179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12074:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12087:6:17","memberName":"length","nodeType":"MemberAccess","src":"12074:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12068:25:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6182,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6166,"src":"12097:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":6183,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6168,"src":"12105:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12097:11:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12068:40:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6190,"nodeType":"IfStatement","src":"12064:63:17","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":6186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12118:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":6187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12125:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":6188,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"12117:10:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":6174,"id":6189,"nodeType":"Return","src":"12110:17:17"}},{"expression":{"arguments":[{"id":6192,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6164,"src":"12177:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":6193,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6166,"src":"12184:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6194,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6168,"src":"12191:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6191,"name":"_tryParseHexUintUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6301,"src":"12145:31:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":6195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12145:50:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":6174,"id":6196,"nodeType":"Return","src":"12138:57:17"}]},"documentation":{"id":6162,"nodeType":"StructuredDocumentation","src":"11641:246:17","text":" @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\n invalid character.\n NOTE: This function will revert if the result does not fit in a `uint256`."},"id":6198,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseHexUint","nameLocation":"11902:15:17","nodeType":"FunctionDefinition","parameters":{"id":6169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6164,"mutability":"mutable","name":"input","nameLocation":"11942:5:17","nodeType":"VariableDeclaration","scope":6198,"src":"11928:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6163,"name":"string","nodeType":"ElementaryTypeName","src":"11928:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":6166,"mutability":"mutable","name":"begin","nameLocation":"11966:5:17","nodeType":"VariableDeclaration","scope":6198,"src":"11958:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6165,"name":"uint256","nodeType":"ElementaryTypeName","src":"11958:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6168,"mutability":"mutable","name":"end","nameLocation":"11990:3:17","nodeType":"VariableDeclaration","scope":6198,"src":"11982:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6167,"name":"uint256","nodeType":"ElementaryTypeName","src":"11982:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11917:83:17"},"returnParameters":{"id":6174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6171,"mutability":"mutable","name":"success","nameLocation":"12029:7:17","nodeType":"VariableDeclaration","scope":6198,"src":"12024:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6170,"name":"bool","nodeType":"ElementaryTypeName","src":"12024:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6173,"mutability":"mutable","name":"value","nameLocation":"12046:5:17","nodeType":"VariableDeclaration","scope":6198,"src":"12038:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6172,"name":"uint256","nodeType":"ElementaryTypeName","src":"12038:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12023:29:17"},"scope":6538,"src":"11893:310:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6300,"nodeType":"Block","src":"12516:899:17","statements":[{"assignments":[6213],"declarations":[{"constant":false,"id":6213,"mutability":"mutable","name":"buffer","nameLocation":"12540:6:17","nodeType":"VariableDeclaration","scope":6300,"src":"12527:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6212,"name":"bytes","nodeType":"ElementaryTypeName","src":"12527:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":6218,"initialValue":{"arguments":[{"id":6216,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6201,"src":"12555:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":6215,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12549:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":6214,"name":"bytes","nodeType":"ElementaryTypeName","src":"12549:5:17","typeDescriptions":{}}},"id":6217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12549:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"12527:34:17"},{"assignments":[6220],"declarations":[{"constant":false,"id":6220,"mutability":"mutable","name":"hasPrefix","nameLocation":"12617:9:17","nodeType":"VariableDeclaration","scope":6300,"src":"12612:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6219,"name":"bool","nodeType":"ElementaryTypeName","src":"12612:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":6240,"initialValue":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6221,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6203,"src":"12630:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6222,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6205,"src":"12638:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":6223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12644:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12638:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12630:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":6226,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12629:17:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes2","typeString":"bytes2"},"id":6238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":6230,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6213,"src":"12680:6:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":6231,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6203,"src":"12688:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6229,"name":"_unsafeReadBytesOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6537,"src":"12657:22:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":6232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12657:37:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6228,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12650:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":6227,"name":"bytes2","nodeType":"ElementaryTypeName","src":"12650:6:17","typeDescriptions":{}}},"id":6233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12650:45:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"3078","id":6236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12706:4:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_39bef1777deb3dfb14f64b9f81ced092c501fee72f90e93d03bb95ee89df9837","typeString":"literal_string \"0x\""},"value":"0x"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_39bef1777deb3dfb14f64b9f81ced092c501fee72f90e93d03bb95ee89df9837","typeString":"literal_string \"0x\""}],"id":6235,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12699:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":6234,"name":"bytes2","nodeType":"ElementaryTypeName","src":"12699:6:17","typeDescriptions":{}}},"id":6237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12699:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},"src":"12650:61:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12629:82:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"12612:99:17"},{"assignments":[6242],"declarations":[{"constant":false,"id":6242,"mutability":"mutable","name":"offset","nameLocation":"12801:6:17","nodeType":"VariableDeclaration","scope":6300,"src":"12793:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6241,"name":"uint256","nodeType":"ElementaryTypeName","src":"12793:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6248,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6243,"name":"hasPrefix","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6220,"src":"12810:9:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12820:6:17","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4582,"src":"12810:16:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$bound_to$_t_bool_$","typeString":"function (bool) pure returns (uint256)"}},"id":6245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12810:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":6246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12831:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12810:22:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12793:39:17"},{"assignments":[6250],"declarations":[{"constant":false,"id":6250,"mutability":"mutable","name":"result","nameLocation":"12853:6:17","nodeType":"VariableDeclaration","scope":6300,"src":"12845:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6249,"name":"uint256","nodeType":"ElementaryTypeName","src":"12845:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6252,"initialValue":{"hexValue":"30","id":6251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12862:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12845:18:17"},{"body":{"id":6294,"nodeType":"Block","src":"12921:455:17","statements":[{"assignments":[6266],"declarations":[{"constant":false,"id":6266,"mutability":"mutable","name":"chr","nameLocation":"12942:3:17","nodeType":"VariableDeclaration","scope":6294,"src":"12936:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6265,"name":"uint8","nodeType":"ElementaryTypeName","src":"12936:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":6276,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"id":6271,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6213,"src":"12991:6:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":6272,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6254,"src":"12999:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6270,"name":"_unsafeReadBytesOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6537,"src":"12968:22:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":6273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12968:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12961:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":6268,"name":"bytes1","nodeType":"ElementaryTypeName","src":"12961:6:17","typeDescriptions":{}}},"id":6274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12961:41:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":6267,"name":"_tryParseChr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6525,"src":"12948:12:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes1_$returns$_t_uint8_$","typeString":"function (bytes1) pure returns (uint8)"}},"id":6275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12948:55:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"12936:67:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":6279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6277,"name":"chr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6266,"src":"13022:3:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3135","id":6278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13028:2:17","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"15"},"src":"13022:8:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6284,"nodeType":"IfStatement","src":"13018:31:17","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":6280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13040:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":6281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13047:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":6282,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"13039:10:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":6211,"id":6283,"nodeType":"Return","src":"13032:17:17"}},{"expression":{"id":6287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6285,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6250,"src":"13064:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"hexValue":"3136","id":6286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13074:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13064:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6288,"nodeType":"ExpressionStatement","src":"13064:12:17"},{"id":6293,"nodeType":"UncheckedBlock","src":"13091:274:17","statements":[{"expression":{"id":6291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6289,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6250,"src":"13336:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":6290,"name":"chr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6266,"src":"13346:3:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13336:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6292,"nodeType":"ExpressionStatement","src":"13336:13:17"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6259,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6254,"src":"12907:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":6260,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6205,"src":"12911:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12907:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6295,"initializationExpression":{"assignments":[6254],"declarations":[{"constant":false,"id":6254,"mutability":"mutable","name":"i","nameLocation":"12887:1:17","nodeType":"VariableDeclaration","scope":6295,"src":"12879:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6253,"name":"uint256","nodeType":"ElementaryTypeName","src":"12879:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6258,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6255,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6203,"src":"12891:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":6256,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6242,"src":"12899:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12891:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12879:26:17"},"loopExpression":{"expression":{"id":6263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"12916:3:17","subExpression":{"id":6262,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6254,"src":"12918:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6264,"nodeType":"ExpressionStatement","src":"12916:3:17"},"nodeType":"ForStatement","src":"12874:502:17"},{"expression":{"components":[{"hexValue":"74727565","id":6296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13394:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":6297,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6250,"src":"13400:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6298,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13393:14:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":6211,"id":6299,"nodeType":"Return","src":"13386:21:17"}]},"documentation":{"id":6199,"nodeType":"StructuredDocumentation","src":"12211:124:17","text":" @dev Variant of {tryParseHexUint} that does not check bounds and returns (true, 0) if they are invalid."},"id":6301,"implemented":true,"kind":"function","modifiers":[],"name":"_tryParseHexUintUncheckedBounds","nameLocation":"12350:31:17","nodeType":"FunctionDefinition","parameters":{"id":6206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6201,"mutability":"mutable","name":"input","nameLocation":"12406:5:17","nodeType":"VariableDeclaration","scope":6301,"src":"12392:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6200,"name":"string","nodeType":"ElementaryTypeName","src":"12392:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":6203,"mutability":"mutable","name":"begin","nameLocation":"12430:5:17","nodeType":"VariableDeclaration","scope":6301,"src":"12422:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6202,"name":"uint256","nodeType":"ElementaryTypeName","src":"12422:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6205,"mutability":"mutable","name":"end","nameLocation":"12454:3:17","nodeType":"VariableDeclaration","scope":6301,"src":"12446:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6204,"name":"uint256","nodeType":"ElementaryTypeName","src":"12446:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12381:83:17"},"returnParameters":{"id":6211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6208,"mutability":"mutable","name":"success","nameLocation":"12492:7:17","nodeType":"VariableDeclaration","scope":6301,"src":"12487:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6207,"name":"bool","nodeType":"ElementaryTypeName","src":"12487:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6210,"mutability":"mutable","name":"value","nameLocation":"12509:5:17","nodeType":"VariableDeclaration","scope":6301,"src":"12501:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6209,"name":"uint256","nodeType":"ElementaryTypeName","src":"12501:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12486:29:17"},"scope":6538,"src":"12341:1074:17","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":6319,"nodeType":"Block","src":"13721:69:17","statements":[{"expression":{"arguments":[{"id":6310,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6304,"src":"13752:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":6311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13759:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":6314,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6304,"src":"13768:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":6313,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13762:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":6312,"name":"bytes","nodeType":"ElementaryTypeName","src":"13762:5:17","typeDescriptions":{}}},"id":6315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13762:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13775:6:17","memberName":"length","nodeType":"MemberAccess","src":"13762:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6309,"name":"parseAddress","nodeType":"Identifier","overloadedDeclarations":[6320,6351],"referencedDeclaration":6351,"src":"13739:12:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_address_$","typeString":"function (string memory,uint256,uint256) pure returns (address)"}},"id":6317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13739:43:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":6308,"id":6318,"nodeType":"Return","src":"13732:50:17"}]},"documentation":{"id":6302,"nodeType":"StructuredDocumentation","src":"13423:217:17","text":" @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as an `address`.\n Requirements:\n - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`"},"id":6320,"implemented":true,"kind":"function","modifiers":[],"name":"parseAddress","nameLocation":"13655:12:17","nodeType":"FunctionDefinition","parameters":{"id":6305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6304,"mutability":"mutable","name":"input","nameLocation":"13682:5:17","nodeType":"VariableDeclaration","scope":6320,"src":"13668:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6303,"name":"string","nodeType":"ElementaryTypeName","src":"13668:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"13667:21:17"},"returnParameters":{"id":6308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6307,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6320,"src":"13712:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6306,"name":"address","nodeType":"ElementaryTypeName","src":"13712:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13711:9:17"},"scope":6538,"src":"13646:144:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6350,"nodeType":"Block","src":"14165:169:17","statements":[{"assignments":[6333,6335],"declarations":[{"constant":false,"id":6333,"mutability":"mutable","name":"success","nameLocation":"14182:7:17","nodeType":"VariableDeclaration","scope":6350,"src":"14177:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6332,"name":"bool","nodeType":"ElementaryTypeName","src":"14177:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6335,"mutability":"mutable","name":"value","nameLocation":"14199:5:17","nodeType":"VariableDeclaration","scope":6350,"src":"14191:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6334,"name":"address","nodeType":"ElementaryTypeName","src":"14191:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":6341,"initialValue":{"arguments":[{"id":6337,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6323,"src":"14224:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":6338,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6325,"src":"14231:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6339,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6327,"src":"14238:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6336,"name":"tryParseAddress","nodeType":"Identifier","overloadedDeclarations":[6372,6465],"referencedDeclaration":6465,"src":"14208:15:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_address_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,address)"}},"id":6340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14208:34:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_address_$","typeString":"tuple(bool,address)"}},"nodeType":"VariableDeclarationStatement","src":"14176:66:17"},{"condition":{"id":6343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"14257:8:17","subExpression":{"id":6342,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6333,"src":"14258:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6347,"nodeType":"IfStatement","src":"14253:50:17","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6344,"name":"StringsInvalidAddressFormat","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5379,"src":"14274:27:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14274:29:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6346,"nodeType":"RevertStatement","src":"14267:36:17"}},{"expression":{"id":6348,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6335,"src":"14321:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":6331,"id":6349,"nodeType":"Return","src":"14314:12:17"}]},"documentation":{"id":6321,"nodeType":"StructuredDocumentation","src":"13798:258:17","text":" @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\n `end` (excluded).\n Requirements:\n - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`"},"id":6351,"implemented":true,"kind":"function","modifiers":[],"name":"parseAddress","nameLocation":"14071:12:17","nodeType":"FunctionDefinition","parameters":{"id":6328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6323,"mutability":"mutable","name":"input","nameLocation":"14098:5:17","nodeType":"VariableDeclaration","scope":6351,"src":"14084:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6322,"name":"string","nodeType":"ElementaryTypeName","src":"14084:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":6325,"mutability":"mutable","name":"begin","nameLocation":"14113:5:17","nodeType":"VariableDeclaration","scope":6351,"src":"14105:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6324,"name":"uint256","nodeType":"ElementaryTypeName","src":"14105:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6327,"mutability":"mutable","name":"end","nameLocation":"14128:3:17","nodeType":"VariableDeclaration","scope":6351,"src":"14120:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6326,"name":"uint256","nodeType":"ElementaryTypeName","src":"14120:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14083:49:17"},"returnParameters":{"id":6331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6330,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6351,"src":"14156:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6329,"name":"address","nodeType":"ElementaryTypeName","src":"14156:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14155:9:17"},"scope":6538,"src":"14062:272:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6371,"nodeType":"Block","src":"14640:72:17","statements":[{"expression":{"arguments":[{"id":6362,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6354,"src":"14674:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":6363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14681:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":6366,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6354,"src":"14690:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":6365,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14684:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":6364,"name":"bytes","nodeType":"ElementaryTypeName","src":"14684:5:17","typeDescriptions":{}}},"id":6367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14684:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14697:6:17","memberName":"length","nodeType":"MemberAccess","src":"14684:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6361,"name":"tryParseAddress","nodeType":"Identifier","overloadedDeclarations":[6372,6465],"referencedDeclaration":6465,"src":"14658:15:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_address_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,address)"}},"id":6369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14658:46:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_address_$","typeString":"tuple(bool,address)"}},"functionReturnParameters":6360,"id":6370,"nodeType":"Return","src":"14651:53:17"}]},"documentation":{"id":6352,"nodeType":"StructuredDocumentation","src":"14342:194:17","text":" @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\n formatted address. See {parseAddress} requirements."},"id":6372,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseAddress","nameLocation":"14551:15:17","nodeType":"FunctionDefinition","parameters":{"id":6355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6354,"mutability":"mutable","name":"input","nameLocation":"14581:5:17","nodeType":"VariableDeclaration","scope":6372,"src":"14567:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6353,"name":"string","nodeType":"ElementaryTypeName","src":"14567:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"14566:21:17"},"returnParameters":{"id":6360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6357,"mutability":"mutable","name":"success","nameLocation":"14616:7:17","nodeType":"VariableDeclaration","scope":6372,"src":"14611:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6356,"name":"bool","nodeType":"ElementaryTypeName","src":"14611:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6359,"mutability":"mutable","name":"value","nameLocation":"14633:5:17","nodeType":"VariableDeclaration","scope":6372,"src":"14625:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6358,"name":"address","nodeType":"ElementaryTypeName","src":"14625:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14610:29:17"},"scope":6538,"src":"14542:170:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6464,"nodeType":"Block","src":"15092:694:17","statements":[{"assignments":[6387],"declarations":[{"constant":false,"id":6387,"mutability":"mutable","name":"hasPrefix","nameLocation":"15159:9:17","nodeType":"VariableDeclaration","scope":6464,"src":"15154:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6386,"name":"bool","nodeType":"ElementaryTypeName","src":"15154:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":6410,"initialValue":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6388,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6377,"src":"15172:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6389,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6379,"src":"15180:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":6390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15186:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15180:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15172:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":6393,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15171:17:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes2","typeString":"bytes2"},"id":6408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"arguments":[{"id":6399,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6375,"src":"15228:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":6398,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15222:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":6397,"name":"bytes","nodeType":"ElementaryTypeName","src":"15222:5:17","typeDescriptions":{}}},"id":6400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15222:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":6401,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6377,"src":"15236:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6396,"name":"_unsafeReadBytesOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6537,"src":"15199:22:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":6402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15199:43:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6395,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15192:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":6394,"name":"bytes2","nodeType":"ElementaryTypeName","src":"15192:6:17","typeDescriptions":{}}},"id":6403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15192:51:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"3078","id":6406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15254:4:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_39bef1777deb3dfb14f64b9f81ced092c501fee72f90e93d03bb95ee89df9837","typeString":"literal_string \"0x\""},"value":"0x"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_39bef1777deb3dfb14f64b9f81ced092c501fee72f90e93d03bb95ee89df9837","typeString":"literal_string \"0x\""}],"id":6405,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15247:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":6404,"name":"bytes2","nodeType":"ElementaryTypeName","src":"15247:6:17","typeDescriptions":{}}},"id":6407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15247:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},"src":"15192:67:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15171:88:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"15154:105:17"},{"assignments":[6412],"declarations":[{"constant":false,"id":6412,"mutability":"mutable","name":"expectedLength","nameLocation":"15351:14:17","nodeType":"VariableDeclaration","scope":6464,"src":"15343:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6411,"name":"uint256","nodeType":"ElementaryTypeName","src":"15343:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6420,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3430","id":6413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15368:2:17","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6414,"name":"hasPrefix","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6387,"src":"15373:9:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15383:6:17","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4582,"src":"15373:16:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$bound_to$_t_bool_$","typeString":"function (bool) pure returns (uint256)"}},"id":6416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15373:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":6417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15394:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15373:22:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15368:27:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15343:52:17"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6421,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6379,"src":"15412:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":6422,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6377,"src":"15418:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15412:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6424,"name":"expectedLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6412,"src":"15427:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15412:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6426,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6379,"src":"15445:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":6429,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6375,"src":"15458:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":6428,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15452:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":6427,"name":"bytes","nodeType":"ElementaryTypeName","src":"15452:5:17","typeDescriptions":{}}},"id":6430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15452:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15465:6:17","memberName":"length","nodeType":"MemberAccess","src":"15452:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15445:26:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15412:59:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6462,"nodeType":"Block","src":"15726:53:17","statements":[{"expression":{"components":[{"hexValue":"66616c7365","id":6455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"15749:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"arguments":[{"hexValue":"30","id":6458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15764:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6457,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15756:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6456,"name":"address","nodeType":"ElementaryTypeName","src":"15756:7:17","typeDescriptions":{}}},"id":6459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15756:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6460,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"15748:19:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_address_$","typeString":"tuple(bool,address)"}},"functionReturnParameters":6385,"id":6461,"nodeType":"Return","src":"15741:26:17"}]},"id":6463,"nodeType":"IfStatement","src":"15408:371:17","trueBody":{"id":6454,"nodeType":"Block","src":"15473:247:17","statements":[{"assignments":[6435,6437],"declarations":[{"constant":false,"id":6435,"mutability":"mutable","name":"s","nameLocation":"15596:1:17","nodeType":"VariableDeclaration","scope":6454,"src":"15591:6:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6434,"name":"bool","nodeType":"ElementaryTypeName","src":"15591:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6437,"mutability":"mutable","name":"v","nameLocation":"15607:1:17","nodeType":"VariableDeclaration","scope":6454,"src":"15599:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6436,"name":"uint256","nodeType":"ElementaryTypeName","src":"15599:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6443,"initialValue":{"arguments":[{"id":6439,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6375,"src":"15644:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":6440,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6377,"src":"15651:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6441,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6379,"src":"15658:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6438,"name":"_tryParseHexUintUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6301,"src":"15612:31:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":6442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15612:50:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"15590:72:17"},{"expression":{"components":[{"id":6444,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6435,"src":"15685:1:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"arguments":[{"id":6449,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6437,"src":"15704:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6448,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15696:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":6447,"name":"uint160","nodeType":"ElementaryTypeName","src":"15696:7:17","typeDescriptions":{}}},"id":6450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15696:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":6446,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15688:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6445,"name":"address","nodeType":"ElementaryTypeName","src":"15688:7:17","typeDescriptions":{}}},"id":6451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15688:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6452,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15684:24:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_address_$","typeString":"tuple(bool,address)"}},"functionReturnParameters":6385,"id":6453,"nodeType":"Return","src":"15677:31:17"}]}}]},"documentation":{"id":6373,"nodeType":"StructuredDocumentation","src":"14720:206:17","text":" @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\n formatted address. See {parseAddress} requirements."},"id":6465,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseAddress","nameLocation":"14941:15:17","nodeType":"FunctionDefinition","parameters":{"id":6380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6375,"mutability":"mutable","name":"input","nameLocation":"14981:5:17","nodeType":"VariableDeclaration","scope":6465,"src":"14967:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6374,"name":"string","nodeType":"ElementaryTypeName","src":"14967:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":6377,"mutability":"mutable","name":"begin","nameLocation":"15005:5:17","nodeType":"VariableDeclaration","scope":6465,"src":"14997:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6376,"name":"uint256","nodeType":"ElementaryTypeName","src":"14997:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6379,"mutability":"mutable","name":"end","nameLocation":"15029:3:17","nodeType":"VariableDeclaration","scope":6465,"src":"15021:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6378,"name":"uint256","nodeType":"ElementaryTypeName","src":"15021:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14956:83:17"},"returnParameters":{"id":6385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6382,"mutability":"mutable","name":"success","nameLocation":"15068:7:17","nodeType":"VariableDeclaration","scope":6465,"src":"15063:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6381,"name":"bool","nodeType":"ElementaryTypeName","src":"15063:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6384,"mutability":"mutable","name":"value","nameLocation":"15085:5:17","nodeType":"VariableDeclaration","scope":6465,"src":"15077:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6383,"name":"address","nodeType":"ElementaryTypeName","src":"15077:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15062:29:17"},"scope":6538,"src":"14932:854:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6524,"nodeType":"Block","src":"15857:477:17","statements":[{"assignments":[6473],"declarations":[{"constant":false,"id":6473,"mutability":"mutable","name":"value","nameLocation":"15874:5:17","nodeType":"VariableDeclaration","scope":6524,"src":"15868:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6472,"name":"uint8","nodeType":"ElementaryTypeName","src":"15868:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":6478,"initialValue":{"arguments":[{"id":6476,"name":"chr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6467,"src":"15888:3:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":6475,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15882:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":6474,"name":"uint8","nodeType":"ElementaryTypeName","src":"15882:5:17","typeDescriptions":{}}},"id":6477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15882:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"15868:24:17"},{"id":6521,"nodeType":"UncheckedBlock","src":"16059:243:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":6481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6479,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6473,"src":"16088:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3437","id":6480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16096:2:17","typeDescriptions":{"typeIdentifier":"t_rational_47_by_1","typeString":"int_const 47"},"value":"47"},"src":"16088:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":6484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6482,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6473,"src":"16102:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3538","id":6483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16110:2:17","typeDescriptions":{"typeIdentifier":"t_rational_58_by_1","typeString":"int_const 58"},"value":"58"},"src":"16102:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"16088:24:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":6492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6490,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6473,"src":"16149:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3936","id":6491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16157:2:17","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},"src":"16149:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":6495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6493,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6473,"src":"16163:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"313033","id":6494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16171:3:17","typeDescriptions":{"typeIdentifier":"t_rational_103_by_1","typeString":"int_const 103"},"value":"103"},"src":"16163:11:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"16149:25:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":6503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6501,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6473,"src":"16211:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3634","id":6502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16219:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"16211:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":6506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6504,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6473,"src":"16225:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3731","id":6505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16233:2:17","typeDescriptions":{"typeIdentifier":"t_rational_71_by_1","typeString":"int_const 71"},"value":"71"},"src":"16225:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"16211:24:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"expression":{"expression":{"arguments":[{"id":6514,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16280:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":6513,"name":"uint8","nodeType":"ElementaryTypeName","src":"16280:5:17","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":6512,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"16275:4:17","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16275:11:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":6516,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16287:3:17","memberName":"max","nodeType":"MemberAccess","src":"16275:15:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":6471,"id":6517,"nodeType":"Return","src":"16268:22:17"},"id":6518,"nodeType":"IfStatement","src":"16207:83:17","trueBody":{"expression":{"id":6510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6508,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6473,"src":"16237:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3535","id":6509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16246:2:17","typeDescriptions":{"typeIdentifier":"t_rational_55_by_1","typeString":"int_const 55"},"value":"55"},"src":"16237:11:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":6511,"nodeType":"ExpressionStatement","src":"16237:11:17"}},"id":6519,"nodeType":"IfStatement","src":"16145:145:17","trueBody":{"expression":{"id":6499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6497,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6473,"src":"16176:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3837","id":6498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16185:2:17","typeDescriptions":{"typeIdentifier":"t_rational_87_by_1","typeString":"int_const 87"},"value":"87"},"src":"16176:11:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":6500,"nodeType":"ExpressionStatement","src":"16176:11:17"}},"id":6520,"nodeType":"IfStatement","src":"16084:206:17","trueBody":{"expression":{"id":6488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6486,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6473,"src":"16114:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3438","id":6487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16123:2:17","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"src":"16114:11:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":6489,"nodeType":"ExpressionStatement","src":"16114:11:17"}}]},{"expression":{"id":6522,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6473,"src":"16321:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":6471,"id":6523,"nodeType":"Return","src":"16314:12:17"}]},"id":6525,"implemented":true,"kind":"function","modifiers":[],"name":"_tryParseChr","nameLocation":"15803:12:17","nodeType":"FunctionDefinition","parameters":{"id":6468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6467,"mutability":"mutable","name":"chr","nameLocation":"15823:3:17","nodeType":"VariableDeclaration","scope":6525,"src":"15816:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":6466,"name":"bytes1","nodeType":"ElementaryTypeName","src":"15816:6:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"src":"15815:12:17"},"returnParameters":{"id":6471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6470,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6525,"src":"15850:5:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6469,"name":"uint8","nodeType":"ElementaryTypeName","src":"15850:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"15849:7:17"},"scope":6538,"src":"15794:540:17","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":6536,"nodeType":"Block","src":"16727:230:17","statements":[{"AST":{"nodeType":"YulBlock","src":"16878:72:17","statements":[{"nodeType":"YulAssignment","src":"16893:46:17","value":{"arguments":[{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"16912:6:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16924:4:17","type":"","value":"0x20"},{"name":"offset","nodeType":"YulIdentifier","src":"16930:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16920:3:17"},"nodeType":"YulFunctionCall","src":"16920:17:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16908:3:17"},"nodeType":"YulFunctionCall","src":"16908:30:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16902:5:17"},"nodeType":"YulFunctionCall","src":"16902:37:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"16893:5:17"}]}]},"evmVersion":"london","externalReferences":[{"declaration":6528,"isOffset":false,"isSlot":false,"src":"16912:6:17","valueSize":1},{"declaration":6530,"isOffset":false,"isSlot":false,"src":"16930:6:17","valueSize":1},{"declaration":6533,"isOffset":false,"isSlot":false,"src":"16893:5:17","valueSize":1}],"flags":["memory-safe"],"id":6535,"nodeType":"InlineAssembly","src":"16853:97:17"}]},"documentation":{"id":6526,"nodeType":"StructuredDocumentation","src":"16342:273:17","text":" @dev Reads a bytes32 from a bytes array without bounds checking.\n NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\n assembly block as such would prevent some optimizations."},"id":6537,"implemented":true,"kind":"function","modifiers":[],"name":"_unsafeReadBytesOffset","nameLocation":"16630:22:17","nodeType":"FunctionDefinition","parameters":{"id":6531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6528,"mutability":"mutable","name":"buffer","nameLocation":"16666:6:17","nodeType":"VariableDeclaration","scope":6537,"src":"16653:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6527,"name":"bytes","nodeType":"ElementaryTypeName","src":"16653:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6530,"mutability":"mutable","name":"offset","nameLocation":"16682:6:17","nodeType":"VariableDeclaration","scope":6537,"src":"16674:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6529,"name":"uint256","nodeType":"ElementaryTypeName","src":"16674:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16652:37:17"},"returnParameters":{"id":6534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6533,"mutability":"mutable","name":"value","nameLocation":"16720:5:17","nodeType":"VariableDeclaration","scope":6537,"src":"16712:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6532,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16712:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16711:15:17"},"scope":6538,"src":"16621:336:17","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":6539,"src":"293:16667:17","usedErrors":[5373,5376,5379]}],"src":"104:16856:17"},"id":17}},"contracts":{"contracts/Address.sol":{"Address":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e519111bda6392039a699c32e1625639378a708997950a2188bb2f65a600161864736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 NOT GT SHL 0xDA PUSH4 0x92039A69 SWAP13 ORIGIN 0xE1 PUSH3 0x563937 DUP11 PUSH17 0x8997950A2188BB2F65A600161864736F6C PUSH4 0x43000811 STOP CALLER ","sourceMap":"133:8324:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;133:8324:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e519111bda6392039a699c32e1625639378a708997950a2188bb2f65a600161864736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 NOT GT SHL 0xDA PUSH4 0x92039A69 SWAP13 ORIGIN 0xE1 PUSH3 0x563937 DUP11 PUSH17 0x8997950A2188BB2F65A600161864736F6C PUSH4 0x43000811 STOP CALLER ","sourceMap":"133:8324:0:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n                /// @solidity memory-safe-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xdc6f7c5d0c8e145fd21aa1647db200d8fff2b8065b49177e545f7e6ef6af03b7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null}}},"contracts/ECDSA.sol":{"ECDSA":{"abi":[{"inputs":[],"name":"ECDSAInvalidSignature","type":"error"},{"inputs":[{"internalType":"uint256","name":"length","type":"uint256"}],"name":"ECDSAInvalidSignatureLength","type":"error"},{"inputs":[{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"ECDSAInvalidSignatureS","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122043b3381cb89323d7eb6c5215caf5c2573599fb0acc71bd461587f0f6749b21cc64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NUMBER 0xB3 CODESIZE SHR 0xB8 SWAP4 0x23 0xD7 0xEB PUSH13 0x5215CAF5C2573599FB0ACC71BD CHAINID ISZERO DUP8 CREATE 0xF6 PUSH21 0x9B21CC64736F6C6343000811003300000000000000 ","sourceMap":"354:7638:1:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;354:7638:1;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122043b3381cb89323d7eb6c5215caf5c2573599fb0acc71bd461587f0f6749b21cc64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NUMBER 0xB3 CODESIZE SHR 0xB8 SWAP4 0x23 0xD7 0xEB PUSH13 0x5215CAF5C2573599FB0ACC71BD CHAINID ISZERO DUP8 CREATE 0xF6 PUSH21 0x9B21CC64736F6C6343000811003300000000000000 ","sourceMap":"354:7638:1:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\r\\n *\\r\\n * These functions can be used to verify that a message was signed by the holder\\r\\n * of the private keys of a given address.\\r\\n */\\r\\nlibrary ECDSA {\\r\\n    enum RecoverError {\\r\\n        NoError,\\r\\n        InvalidSignature,\\r\\n        InvalidSignatureLength,\\r\\n        InvalidSignatureS\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The signature derives the `address(0)`.\\r\\n     */\\r\\n    error ECDSAInvalidSignature();\\r\\n\\r\\n    /**\\r\\n     * @dev The signature has an invalid length.\\r\\n     */\\r\\n    error ECDSAInvalidSignatureLength(uint256 length);\\r\\n\\r\\n    /**\\r\\n     * @dev The signature has an S value that is in the upper half order.\\r\\n     */\\r\\n    error ECDSAInvalidSignatureS(bytes32 s);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\r\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\r\\n     * and a bytes32 providing additional information about the error.\\r\\n     *\\r\\n     * If no error is returned, then the address can be used for verification purposes.\\r\\n     *\\r\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\r\\n     * this function rejects them by requiring the `s` value to be in the lower\\r\\n     * half order, and the `v` value to be either 27 or 28.\\r\\n     *\\r\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\r\\n     * verification to be secure: it is possible to craft signatures that\\r\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\r\\n     * this is by receiving a hash of the original message (which may otherwise\\r\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\r\\n     *\\r\\n     * Documentation for signature generation:\\r\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\r\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\r\\n     */\\r\\n    function tryRecover(\\r\\n        bytes32 hash,\\r\\n        bytes memory signature\\r\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\r\\n        if (signature.length == 65) {\\r\\n            bytes32 r;\\r\\n            bytes32 s;\\r\\n            uint8 v;\\r\\n            // ecrecover takes the signature parameters, and the only way to get them\\r\\n            // currently is to use assembly.\\r\\n            assembly (\\\"memory-safe\\\") {\\r\\n                r := mload(add(signature, 0x20))\\r\\n                s := mload(add(signature, 0x40))\\r\\n                v := byte(0, mload(add(signature, 0x60)))\\r\\n            }\\r\\n            return tryRecover(hash, v, r, s);\\r\\n        } else {\\r\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\r\\n     * `signature`. This address can then be used for verification purposes.\\r\\n     *\\r\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\r\\n     * this function rejects them by requiring the `s` value to be in the lower\\r\\n     * half order, and the `v` value to be either 27 or 28.\\r\\n     *\\r\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\r\\n     * verification to be secure: it is possible to craft signatures that\\r\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\r\\n     * this is by receiving a hash of the original message (which may otherwise\\r\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\r\\n     */\\r\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\r\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\r\\n        _throwError(error, errorArg);\\r\\n        return recovered;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\r\\n     *\\r\\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\\r\\n     */\\r\\n    function tryRecover(\\r\\n        bytes32 hash,\\r\\n        bytes32 r,\\r\\n        bytes32 vs\\r\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\r\\n        unchecked {\\r\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\r\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\r\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\r\\n            return tryRecover(hash, v, r, s);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\r\\n     */\\r\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\r\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\r\\n        _throwError(error, errorArg);\\r\\n        return recovered;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\r\\n     * `r` and `s` signature fields separately.\\r\\n     */\\r\\n    function tryRecover(\\r\\n        bytes32 hash,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\r\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\r\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\r\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\r\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\r\\n        //\\r\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\r\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\r\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\r\\n        // these malleable signatures as well.\\r\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\r\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\r\\n        }\\r\\n\\r\\n        // If the signature is valid (and not malleable), return the signer address\\r\\n        address signer = ecrecover(hash, v, r, s);\\r\\n        if (signer == address(0)) {\\r\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\r\\n        }\\r\\n\\r\\n        return (signer, RecoverError.NoError, bytes32(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\r\\n     * `r` and `s` signature fields separately.\\r\\n     */\\r\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\r\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\r\\n        _throwError(error, errorArg);\\r\\n        return recovered;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\r\\n     */\\r\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\r\\n        if (error == RecoverError.NoError) {\\r\\n            return; // no error: do nothing\\r\\n        } else if (error == RecoverError.InvalidSignature) {\\r\\n            revert ECDSAInvalidSignature();\\r\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\r\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\r\\n        } else if (error == RecoverError.InvalidSignatureS) {\\r\\n            revert ECDSAInvalidSignatureS(errorArg);\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3ba64381b3abdb4a23b9bc9db7002192d8725850f9f6a053e5fa9d4314c8b94e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null}}},"contracts/EIP712.sol":{"EIP712":{"abi":[{"inputs":[],"name":"InvalidShortString","type":"error"},{"inputs":[{"internalType":"string","name":"str","type":"string"}],"name":"StringTooLong","type":"error"},{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"eip712Domain()":"84b0196e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\",\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade].\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EIP712.sol\":\"EIP712\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/EIP712.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\r\\nimport {ShortStrings, ShortString} from \\\"./ShortStrings.sol\\\";\\r\\nimport {IERC5267} from \\\"./IERC5267.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\\r\\n *\\r\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\r\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\r\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\r\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\r\\n *\\r\\n * This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\r\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\r\\n * ({_hashTypedDataV4}).\\r\\n *\\r\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\r\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\r\\n *\\r\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\r\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\r\\n *\\r\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\r\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\r\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\r\\n *\\r\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\r\\n */\\r\\nabstract contract EIP712 is IERC5267 {\\r\\n    using ShortStrings for *;\\r\\n\\r\\n    bytes32 private constant TYPE_HASH =\\r\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\r\\n\\r\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\r\\n    // invalidate the cached domain separator if the chain id changes.\\r\\n    bytes32 private immutable _cachedDomainSeparator;\\r\\n    uint256 private immutable _cachedChainId;\\r\\n    address private immutable _cachedThis;\\r\\n\\r\\n    bytes32 private immutable _hashedName;\\r\\n    bytes32 private immutable _hashedVersion;\\r\\n\\r\\n    ShortString private immutable _name;\\r\\n    ShortString private immutable _version;\\r\\n    string private _nameFallback;\\r\\n    string private _versionFallback;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the domain separator and parameter caches.\\r\\n     *\\r\\n     * The meaning of `name` and `version` is specified in\\r\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\\r\\n     *\\r\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\r\\n     * - `version`: the current major version of the signing domain.\\r\\n     *\\r\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\r\\n     * contract upgrade].\\r\\n     */\\r\\n    constructor(string memory name, string memory version) {\\r\\n        _name = name.toShortStringWithFallback(_nameFallback);\\r\\n        _version = version.toShortStringWithFallback(_versionFallback);\\r\\n        _hashedName = keccak256(bytes(name));\\r\\n        _hashedVersion = keccak256(bytes(version));\\r\\n\\r\\n        _cachedChainId = block.chainid;\\r\\n        _cachedDomainSeparator = _buildDomainSeparator();\\r\\n        _cachedThis = address(this);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator for the current chain.\\r\\n     */\\r\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\r\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\r\\n            return _cachedDomainSeparator;\\r\\n        } else {\\r\\n            return _buildDomainSeparator();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _buildDomainSeparator() private view returns (bytes32) {\\r\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\r\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\r\\n     *\\r\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\r\\n     *\\r\\n     * ```solidity\\r\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\r\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\r\\n     *     mailTo,\\r\\n     *     keccak256(bytes(mailContents))\\r\\n     * )));\\r\\n     * address signer = ECDSA.recover(digest, signature);\\r\\n     * ```\\r\\n     */\\r\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\r\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC-5267}.\\r\\n     */\\r\\n    function eip712Domain()\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (\\r\\n            bytes1 fields,\\r\\n            string memory name,\\r\\n            string memory version,\\r\\n            uint256 chainId,\\r\\n            address verifyingContract,\\r\\n            bytes32 salt,\\r\\n            uint256[] memory extensions\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            hex\\\"0f\\\", // 01111\\r\\n            _EIP712Name(),\\r\\n            _EIP712Version(),\\r\\n            block.chainid,\\r\\n            address(this),\\r\\n            bytes32(0),\\r\\n            new uint256[](0)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The name parameter for the EIP712 domain.\\r\\n     *\\r\\n     * NOTE: By default this function reads _name which is an immutable value.\\r\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function _EIP712Name() internal view returns (string memory) {\\r\\n        return _name.toStringWithFallback(_nameFallback);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The version parameter for the EIP712 domain.\\r\\n     *\\r\\n     * NOTE: By default this function reads _version which is an immutable value.\\r\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function _EIP712Version() internal view returns (string memory) {\\r\\n        return _version.toStringWithFallback(_versionFallback);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xeb35f2f9b63573584419e231bb9da189392766e3f98e7af862b5e481363324d1\",\"license\":\"MIT\"},\"contracts/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IERC5267 {\\r\\n    /**\\r\\n     * @dev MAY be emitted to signal that the domain could have changed.\\r\\n     */\\r\\n    event EIP712DomainChanged();\\r\\n\\r\\n    /**\\r\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\r\\n     * signature.\\r\\n     */\\r\\n    function eip712Domain()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bytes1 fields,\\r\\n            string memory name,\\r\\n            string memory version,\\r\\n            uint256 chainId,\\r\\n            address verifyingContract,\\r\\n            bytes32 salt,\\r\\n            uint256[] memory extensions\\r\\n        );\\r\\n}\",\"keccak256\":\"0x876223edf7464250bf20a50724b2a732c33dd3ec84942c55e509786e3682d44d\",\"license\":\"MIT\"},\"contracts/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Muldiv operation overflow.\\r\\n     */\\r\\n    error MathOverflowedMulDiv();\\r\\n\\r\\n    enum Rounding {\\r\\n        Floor, // Toward negative infinity\\r\\n        Ceil, // Toward positive infinity\\r\\n        Trunc, // Toward zero\\r\\n        Expand // Away from zero\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a > b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow.\\r\\n        return (a & b) + (a ^ b) / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ceiling of the division of two numbers.\\r\\n     *\\r\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\r\\n     * of rounding towards zero.\\r\\n     */\\r\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (b == 0) {\\r\\n            // Guarantee the same behavior as in a regular Solidity division.\\r\\n            return a / b;\\r\\n        }\\r\\n\\r\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\r\\n     * denominator == 0.\\r\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\r\\n     * Uniswap Labs also under MIT license.\\r\\n     */\\r\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\r\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\r\\n            // variables such that product = prod1 * 2^256 + prod0.\\r\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\r\\n            uint256 prod1; // Most significant 256 bits of the product\\r\\n            assembly {\\r\\n                let mm := mulmod(x, y, not(0))\\r\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n            }\\r\\n\\r\\n            // Handle non-overflow cases, 256 by 256 division.\\r\\n            if (prod1 == 0) {\\r\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\r\\n                // The surrounding unchecked block does not change this fact.\\r\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\r\\n                return prod0 / denominator;\\r\\n            }\\r\\n\\r\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\r\\n            if (denominator <= prod1) {\\r\\n                revert MathOverflowedMulDiv();\\r\\n            }\\r\\n\\r\\n            ///////////////////////////////////////////////\\r\\n            // 512 by 256 division.\\r\\n            ///////////////////////////////////////////////\\r\\n\\r\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\r\\n            uint256 remainder;\\r\\n            assembly {\\r\\n                // Compute remainder using mulmod.\\r\\n                remainder := mulmod(x, y, denominator)\\r\\n\\r\\n                // Subtract 256 bit number from 512 bit number.\\r\\n                prod1 := sub(prod1, gt(remainder, prod0))\\r\\n                prod0 := sub(prod0, remainder)\\r\\n            }\\r\\n\\r\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\r\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\r\\n\\r\\n            uint256 twos = denominator & (0 - denominator);\\r\\n            assembly {\\r\\n                // Divide denominator by twos.\\r\\n                denominator := div(denominator, twos)\\r\\n\\r\\n                // Divide [prod1 prod0] by twos.\\r\\n                prod0 := div(prod0, twos)\\r\\n\\r\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\r\\n                twos := add(div(sub(0, twos), twos), 1)\\r\\n            }\\r\\n\\r\\n            // Shift in bits from prod1 into prod0.\\r\\n            prod0 |= prod1 * twos;\\r\\n\\r\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\r\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\r\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\r\\n            uint256 inverse = (3 * denominator) ^ 2;\\r\\n\\r\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\r\\n            // works in modular arithmetic, doubling the correct bits in each step.\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\r\\n\\r\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\r\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\r\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\r\\n            // is no longer required.\\r\\n            result = prod0 * inverse;\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\r\\n     */\\r\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\r\\n        uint256 result = mulDiv(x, y, denominator);\\r\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\r\\n            result += 1;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\r\\n     * towards zero.\\r\\n     *\\r\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\r\\n     */\\r\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\r\\n        //\\r\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\r\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\r\\n        //\\r\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\r\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\r\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\r\\n        //\\r\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\r\\n        uint256 result = 1 << (log2(a) >> 1);\\r\\n\\r\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\r\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\r\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\r\\n        // into the expected uint128 result.\\r\\n        unchecked {\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            return min(result, a / result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\r\\n     */\\r\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = sqrt(a);\\r\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 128;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                value >>= 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 4 > 0) {\\r\\n                value >>= 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 2 > 0) {\\r\\n                value >>= 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 1 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log2(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >= 10 ** 64) {\\r\\n                value /= 10 ** 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >= 10 ** 32) {\\r\\n                value /= 10 ** 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >= 10 ** 16) {\\r\\n                value /= 10 ** 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >= 10 ** 8) {\\r\\n                value /= 10 ** 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >= 10 ** 4) {\\r\\n                value /= 10 ** 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >= 10 ** 2) {\\r\\n                value /= 10 ** 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >= 10 ** 1) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log10(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     *\\r\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\r\\n     */\\r\\n    function log256(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log256(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\r\\n     */\\r\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\r\\n        return uint8(rounding) % 2 == 1;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x261822f7c729b791c53b2a67cdfb3e0d99168503824e451a3752009edad39f0d\",\"license\":\"MIT\"},\"contracts/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MessageHashUtils.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {Strings} from \\\"./Strings.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\r\\n *\\r\\n * The library provides methods for generating a hash of a message that conforms to the\\r\\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\r\\n * specifications.\\r\\n */\\r\\nlibrary MessageHashUtils {\\r\\n    /**\\r\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\r\\n     * `0x45` (`personal_sign` messages).\\r\\n     *\\r\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\r\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\r\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\r\\n     *\\r\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\r\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\r\\n     * be re-hashed.\\r\\n     *\\r\\n     * See {ECDSA-recover}.\\r\\n     */\\r\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\r\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\r\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\r\\n     * `0x45` (`personal_sign` messages).\\r\\n     *\\r\\n     * The digest is calculated by prefixing an arbitrary `message` with\\r\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\r\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\r\\n     *\\r\\n     * See {ECDSA-recover}.\\r\\n     */\\r\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\r\\n        return\\r\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\r\\n     * `0x00` (data with intended validator).\\r\\n     *\\r\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\r\\n     * `validator` address. Then hashing the result.\\r\\n     *\\r\\n     * See {ECDSA-recover}.\\r\\n     */\\r\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\\r\\n     *\\r\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\r\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\r\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\r\\n     *\\r\\n     * See {ECDSA-recover}.\\r\\n     */\\r\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            let ptr := mload(0x40)\\r\\n            mstore(ptr, hex\\\"19_01\\\")\\r\\n            mstore(add(ptr, 0x02), domainSeparator)\\r\\n            mstore(add(ptr, 0x22), structHash)\\r\\n            digest := keccak256(ptr, 0x42)\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x7b9ca38fb1b624a655cf5c87404a11ba3d55553887a6308c77c36f344010e3e9\",\"license\":\"MIT\"},\"contracts/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\r\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\r\\n * easily result in undesired exploitation or bugs, since developers usually\\r\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\r\\n * reverting the transaction when such an operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeCast {\\r\\n    /**\\r\\n     * @dev Value doesn't fit in an uint of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedIntToUint(int256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Value doesn't fit in an int of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedUintToInt(uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint248).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint248` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 248 bits\\r\\n     */\\r\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\r\\n        if (value > type(uint248).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(248, value);\\r\\n        }\\r\\n        return uint248(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint240).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint240` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 240 bits\\r\\n     */\\r\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\r\\n        if (value > type(uint240).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(240, value);\\r\\n        }\\r\\n        return uint240(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint232).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint232` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 232 bits\\r\\n     */\\r\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\r\\n        if (value > type(uint232).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(232, value);\\r\\n        }\\r\\n        return uint232(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint224).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint224` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 224 bits\\r\\n     */\\r\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\r\\n        if (value > type(uint224).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(224, value);\\r\\n        }\\r\\n        return uint224(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint216).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint216` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 216 bits\\r\\n     */\\r\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\r\\n        if (value > type(uint216).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(216, value);\\r\\n        }\\r\\n        return uint216(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint208).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint208` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 208 bits\\r\\n     */\\r\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\r\\n        if (value > type(uint208).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(208, value);\\r\\n        }\\r\\n        return uint208(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint200).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint200` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 200 bits\\r\\n     */\\r\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\r\\n        if (value > type(uint200).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(200, value);\\r\\n        }\\r\\n        return uint200(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint192).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint192` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 192 bits\\r\\n     */\\r\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\r\\n        if (value > type(uint192).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(192, value);\\r\\n        }\\r\\n        return uint192(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint184).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint184` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 184 bits\\r\\n     */\\r\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\r\\n        if (value > type(uint184).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(184, value);\\r\\n        }\\r\\n        return uint184(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint176).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint176` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 176 bits\\r\\n     */\\r\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\r\\n        if (value > type(uint176).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(176, value);\\r\\n        }\\r\\n        return uint176(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint168).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint168` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 168 bits\\r\\n     */\\r\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\r\\n        if (value > type(uint168).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(168, value);\\r\\n        }\\r\\n        return uint168(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint160).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint160` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 160 bits\\r\\n     */\\r\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\r\\n        if (value > type(uint160).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(160, value);\\r\\n        }\\r\\n        return uint160(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint152).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint152` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 152 bits\\r\\n     */\\r\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\r\\n        if (value > type(uint152).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(152, value);\\r\\n        }\\r\\n        return uint152(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint144).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint144` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 144 bits\\r\\n     */\\r\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\r\\n        if (value > type(uint144).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(144, value);\\r\\n        }\\r\\n        return uint144(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint136).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint136` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 136 bits\\r\\n     */\\r\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\r\\n        if (value > type(uint136).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(136, value);\\r\\n        }\\r\\n        return uint136(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint128).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint128` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 128 bits\\r\\n     */\\r\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\r\\n        if (value > type(uint128).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(128, value);\\r\\n        }\\r\\n        return uint128(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint120).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint120` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 120 bits\\r\\n     */\\r\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\r\\n        if (value > type(uint120).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(120, value);\\r\\n        }\\r\\n        return uint120(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint112).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint112` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 112 bits\\r\\n     */\\r\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\r\\n        if (value > type(uint112).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(112, value);\\r\\n        }\\r\\n        return uint112(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint104).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint104` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 104 bits\\r\\n     */\\r\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\r\\n        if (value > type(uint104).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(104, value);\\r\\n        }\\r\\n        return uint104(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint96).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint96` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 96 bits\\r\\n     */\\r\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\r\\n        if (value > type(uint96).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(96, value);\\r\\n        }\\r\\n        return uint96(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint88).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint88` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 88 bits\\r\\n     */\\r\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\r\\n        if (value > type(uint88).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(88, value);\\r\\n        }\\r\\n        return uint88(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint80).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint80` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 80 bits\\r\\n     */\\r\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\r\\n        if (value > type(uint80).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(80, value);\\r\\n        }\\r\\n        return uint80(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint72).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint72` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 72 bits\\r\\n     */\\r\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\r\\n        if (value > type(uint72).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(72, value);\\r\\n        }\\r\\n        return uint72(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint64).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint64` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 64 bits\\r\\n     */\\r\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\r\\n        if (value > type(uint64).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(64, value);\\r\\n        }\\r\\n        return uint64(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint56).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint56` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 56 bits\\r\\n     */\\r\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\r\\n        if (value > type(uint56).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(56, value);\\r\\n        }\\r\\n        return uint56(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint48).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint48` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 48 bits\\r\\n     */\\r\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\r\\n        if (value > type(uint48).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(48, value);\\r\\n        }\\r\\n        return uint48(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint40).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint40` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 40 bits\\r\\n     */\\r\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\r\\n        if (value > type(uint40).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(40, value);\\r\\n        }\\r\\n        return uint40(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint32).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint32` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 32 bits\\r\\n     */\\r\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\r\\n        if (value > type(uint32).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(32, value);\\r\\n        }\\r\\n        return uint32(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint24).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint24` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 24 bits\\r\\n     */\\r\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\r\\n        if (value > type(uint24).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(24, value);\\r\\n        }\\r\\n        return uint24(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint16).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint16` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 16 bits\\r\\n     */\\r\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\r\\n        if (value > type(uint16).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(16, value);\\r\\n        }\\r\\n        return uint16(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint8).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint8` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 8 bits\\r\\n     */\\r\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\r\\n        if (value > type(uint8).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(8, value);\\r\\n        }\\r\\n        return uint8(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a signed int256 into an unsigned uint256.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must be greater than or equal to 0.\\r\\n     */\\r\\n    function toUint256(int256 value) internal pure returns (uint256) {\\r\\n        if (value < 0) {\\r\\n            revert SafeCastOverflowedIntToUint(value);\\r\\n        }\\r\\n        return uint256(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int248 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int248 or\\r\\n     * greater than largest int248).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int248` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 248 bits\\r\\n     */\\r\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\r\\n        downcasted = int248(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(248, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int240 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int240 or\\r\\n     * greater than largest int240).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int240` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 240 bits\\r\\n     */\\r\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\r\\n        downcasted = int240(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(240, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int232 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int232 or\\r\\n     * greater than largest int232).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int232` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 232 bits\\r\\n     */\\r\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\r\\n        downcasted = int232(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(232, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int224 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int224 or\\r\\n     * greater than largest int224).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int224` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 224 bits\\r\\n     */\\r\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\r\\n        downcasted = int224(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(224, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int216 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int216 or\\r\\n     * greater than largest int216).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int216` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 216 bits\\r\\n     */\\r\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\r\\n        downcasted = int216(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(216, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int208 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int208 or\\r\\n     * greater than largest int208).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int208` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 208 bits\\r\\n     */\\r\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\r\\n        downcasted = int208(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(208, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int200 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int200 or\\r\\n     * greater than largest int200).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int200` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 200 bits\\r\\n     */\\r\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\r\\n        downcasted = int200(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(200, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int192 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int192 or\\r\\n     * greater than largest int192).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int192` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 192 bits\\r\\n     */\\r\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\r\\n        downcasted = int192(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(192, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int184 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int184 or\\r\\n     * greater than largest int184).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int184` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 184 bits\\r\\n     */\\r\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\r\\n        downcasted = int184(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(184, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int176 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int176 or\\r\\n     * greater than largest int176).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int176` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 176 bits\\r\\n     */\\r\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\r\\n        downcasted = int176(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(176, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int168 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int168 or\\r\\n     * greater than largest int168).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int168` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 168 bits\\r\\n     */\\r\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\r\\n        downcasted = int168(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(168, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int160 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int160 or\\r\\n     * greater than largest int160).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int160` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 160 bits\\r\\n     */\\r\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\r\\n        downcasted = int160(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(160, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int152 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int152 or\\r\\n     * greater than largest int152).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int152` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 152 bits\\r\\n     */\\r\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\r\\n        downcasted = int152(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(152, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int144 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int144 or\\r\\n     * greater than largest int144).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int144` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 144 bits\\r\\n     */\\r\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\r\\n        downcasted = int144(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(144, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int136 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int136 or\\r\\n     * greater than largest int136).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int136` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 136 bits\\r\\n     */\\r\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\r\\n        downcasted = int136(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(136, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int128 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int128 or\\r\\n     * greater than largest int128).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int128` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 128 bits\\r\\n     */\\r\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\r\\n        downcasted = int128(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(128, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int120 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int120 or\\r\\n     * greater than largest int120).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int120` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 120 bits\\r\\n     */\\r\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\r\\n        downcasted = int120(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(120, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int112 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int112 or\\r\\n     * greater than largest int112).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int112` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 112 bits\\r\\n     */\\r\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\r\\n        downcasted = int112(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(112, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int104 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int104 or\\r\\n     * greater than largest int104).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int104` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 104 bits\\r\\n     */\\r\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\r\\n        downcasted = int104(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(104, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int96 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int96 or\\r\\n     * greater than largest int96).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int96` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 96 bits\\r\\n     */\\r\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\r\\n        downcasted = int96(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(96, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int88 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int88 or\\r\\n     * greater than largest int88).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int88` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 88 bits\\r\\n     */\\r\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\r\\n        downcasted = int88(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(88, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int80 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int80 or\\r\\n     * greater than largest int80).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int80` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 80 bits\\r\\n     */\\r\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\r\\n        downcasted = int80(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(80, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int72 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int72 or\\r\\n     * greater than largest int72).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int72` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 72 bits\\r\\n     */\\r\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\r\\n        downcasted = int72(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(72, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int64 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int64 or\\r\\n     * greater than largest int64).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int64` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 64 bits\\r\\n     */\\r\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\r\\n        downcasted = int64(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(64, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int56 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int56 or\\r\\n     * greater than largest int56).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int56` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 56 bits\\r\\n     */\\r\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\r\\n        downcasted = int56(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(56, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int48 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int48 or\\r\\n     * greater than largest int48).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int48` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 48 bits\\r\\n     */\\r\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\r\\n        downcasted = int48(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(48, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int40 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int40 or\\r\\n     * greater than largest int40).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int40` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 40 bits\\r\\n     */\\r\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\r\\n        downcasted = int40(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(40, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int32 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int32 or\\r\\n     * greater than largest int32).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int32` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 32 bits\\r\\n     */\\r\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\r\\n        downcasted = int32(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(32, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int24 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int24 or\\r\\n     * greater than largest int24).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int24` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 24 bits\\r\\n     */\\r\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\r\\n        downcasted = int24(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(24, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int16 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int16 or\\r\\n     * greater than largest int16).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int16` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 16 bits\\r\\n     */\\r\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\r\\n        downcasted = int16(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(16, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int8 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int8 or\\r\\n     * greater than largest int8).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int8` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 8 bits\\r\\n     */\\r\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\r\\n        downcasted = int8(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(8, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an unsigned uint256 into a signed int256.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must be less than or equal to maxInt256.\\r\\n     */\\r\\n    function toInt256(uint256 value) internal pure returns (int256) {\\r\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\r\\n        if (value > uint256(type(int256).max)) {\\r\\n            revert SafeCastOverflowedUintToInt(value);\\r\\n        }\\r\\n        return int256(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\r\\n     */\\r\\n    function toUint(bool b) internal pure returns (uint256 u) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            u := iszero(iszero(b))\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x961a6a8aa2b6fef7d623252db5edca2d69cbc32192240805d5c2ab1e0f6344b1\",\"license\":\"MIT\"},\"contracts/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ShortStrings.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\r\\n\\r\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\r\\n// | length  | 0x                                                              BB |\\r\\ntype ShortString is bytes32;\\r\\n\\r\\n/**\\r\\n * @dev This library provides functions to convert short memory strings\\r\\n * into a `ShortString` type that can be used as an immutable variable.\\r\\n *\\r\\n * Strings of arbitrary length can be optimized using this library if\\r\\n * they are short enough (up to 31 bytes) by packing them with their\\r\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\r\\n * fallback mechanism can be used for every other case.\\r\\n *\\r\\n * Usage example:\\r\\n *\\r\\n * ```solidity\\r\\n * contract Named {\\r\\n *     using ShortStrings for *;\\r\\n *\\r\\n *     ShortString private immutable _name;\\r\\n *     string private _nameFallback;\\r\\n *\\r\\n *     constructor(string memory contractName) {\\r\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\r\\n *     }\\r\\n *\\r\\n *     function name() external view returns (string memory) {\\r\\n *         return _name.toStringWithFallback(_nameFallback);\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n */\\r\\nlibrary ShortStrings {\\r\\n    // Used as an identifier for strings longer than 31 bytes.\\r\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\r\\n\\r\\n    error StringTooLong(string str);\\r\\n    error InvalidShortString();\\r\\n\\r\\n    /**\\r\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\r\\n     *\\r\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\r\\n     */\\r\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\r\\n        bytes memory bstr = bytes(str);\\r\\n        if (bstr.length > 31) {\\r\\n            revert StringTooLong(str);\\r\\n        }\\r\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\r\\n     */\\r\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\r\\n        uint256 len = byteLength(sstr);\\r\\n        // using `new string(len)` would work locally but is not memory safe.\\r\\n        string memory str = new string(32);\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            mstore(str, len)\\r\\n            mstore(add(str, 0x20), sstr)\\r\\n        }\\r\\n        return str;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the length of a `ShortString`.\\r\\n     */\\r\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\r\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\r\\n        if (result > 31) {\\r\\n            revert InvalidShortString();\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\r\\n     */\\r\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\r\\n        if (bytes(value).length < 32) {\\r\\n            return toShortString(value);\\r\\n        } else {\\r\\n            StorageSlot.getStringSlot(store).value = value;\\r\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\r\\n     */\\r\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\r\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\r\\n            return toString(value);\\r\\n        } else {\\r\\n            return store;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\r\\n     * {setWithFallback}.\\r\\n     *\\r\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\r\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\r\\n     */\\r\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\r\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\r\\n            return byteLength(value);\\r\\n        } else {\\r\\n            return bytes(store).length;\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x100b22b7cf45a6da890e082b8d10211711bd1c7fbc2acdd9701c155ecfb9815d\",\"license\":\"MIT\"},\"contracts/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Standard signed math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary SignedMath {\\r\\n    /**\\r\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\r\\n     *\\r\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\r\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\r\\n     * one branch when needed, making this function more expensive.\\r\\n     */\\r\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\r\\n        unchecked {\\r\\n            // branchless ternary works because:\\r\\n            // b ^ (a ^ b) == a\\r\\n            // b ^ 0 == b\\r\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two signed numbers.\\r\\n     */\\r\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return ternary(a > b, a, b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two signed numbers.\\r\\n     */\\r\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return ternary(a < b, a, b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two signed numbers without overflow.\\r\\n     * The result is rounded towards zero.\\r\\n     */\\r\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\r\\n        // Formula from the book \\\"Hacker's Delight\\\"\\r\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\r\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the absolute unsigned value of a signed value.\\r\\n     */\\r\\n    function abs(int256 n) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\r\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\r\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\r\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\r\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\r\\n            int256 mask = n >> 255;\\r\\n\\r\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\r\\n            return uint256((n + mask) ^ mask);\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x0cbccda1e8f10a7217a92a04970cc83fe09795ad78586917c8a5d932c8d12501\",\"license\":\"MIT\"},\"contracts/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\r\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Library for reading and writing primitive types to specific storage slots.\\r\\n *\\r\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\r\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\r\\n *\\r\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\r\\n *\\r\\n * Example usage to set ERC-1967 implementation slot:\\r\\n * ```solidity\\r\\n * contract ERC1967 {\\r\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\r\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n *\\r\\n *     function _getImplementation() internal view returns (address) {\\r\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\r\\n *     }\\r\\n *\\r\\n *     function _setImplementation(address newImplementation) internal {\\r\\n *         require(newImplementation.code.length > 0);\\r\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * TIP: Consider using this library along with {SlotDerivation}.\\r\\n */\\r\\nlibrary StorageSlot {\\r\\n    struct AddressSlot {\\r\\n        address value;\\r\\n    }\\r\\n\\r\\n    struct BooleanSlot {\\r\\n        bool value;\\r\\n    }\\r\\n\\r\\n    struct Bytes32Slot {\\r\\n        bytes32 value;\\r\\n    }\\r\\n\\r\\n    struct Uint256Slot {\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    struct Int256Slot {\\r\\n        int256 value;\\r\\n    }\\r\\n\\r\\n    struct StringSlot {\\r\\n        string value;\\r\\n    }\\r\\n\\r\\n    struct BytesSlot {\\r\\n        bytes value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\r\\n     */\\r\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := store.slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\r\\n     */\\r\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := store.slot\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x85be17dae57122cd5d8658fff9ffa8ef7bf6271cd3d416dd1a9dca13532f1fd0\",\"license\":\"MIT\"},\"contracts/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Strings.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {Math} from \\\"./Math.sol\\\";\\r\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\r\\nimport {SignedMath} from \\\"./SignedMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    using SafeCast for *;\\r\\n\\r\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\r\\n    uint8 private constant ADDRESS_LENGTH = 20;\\r\\n\\r\\n    /**\\r\\n     * @dev The `value` string doesn't fit in the specified `length`.\\r\\n     */\\r\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\r\\n\\r\\n    /**\\r\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\r\\n     */\\r\\n    error StringsInvalidChar();\\r\\n\\r\\n    /**\\r\\n     * @dev The string being parsed is not a properly formatted address.\\r\\n     */\\r\\n    error StringsInvalidAddressFormat();\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            uint256 length = Math.log10(value) + 1;\\r\\n            string memory buffer = new string(length);\\r\\n            uint256 ptr;\\r\\n            assembly (\\\"memory-safe\\\") {\\r\\n                ptr := add(buffer, add(32, length))\\r\\n            }\\r\\n            while (true) {\\r\\n                ptr--;\\r\\n                assembly (\\\"memory-safe\\\") {\\r\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\r\\n                }\\r\\n                value /= 10;\\r\\n                if (value == 0) break;\\r\\n            }\\r\\n            return buffer;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\r\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            return toHexString(value, Math.log256(value) + 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        uint256 localValue = value;\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\r\\n            localValue >>= 4;\\r\\n        }\\r\\n        if (localValue != 0) {\\r\\n            revert StringsInsufficientHexLength(value, length);\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\r\\n     * representation.\\r\\n     */\\r\\n    function toHexString(address addr) internal pure returns (string memory) {\\r\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\r\\n     * representation, according to EIP-55.\\r\\n     */\\r\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\r\\n        bytes memory buffer = bytes(toHexString(addr));\\r\\n\\r\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\r\\n        uint256 hashValue;\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 41; i > 1; --i) {\\r\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\r\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\r\\n                // case shift by xoring with 0x20\\r\\n                buffer[i] ^= 0x20;\\r\\n            }\\r\\n            hashValue >>= 4;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the two strings are equal.\\r\\n     */\\r\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\r\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The string must be formatted as `[0-9]*`\\r\\n     * - The result must fit into an `uint256` type\\r\\n     */\\r\\n    function parseUint(string memory input) internal pure returns (uint256) {\\r\\n        return parseUint(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\\r\\n     * `end` (excluded).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The substring must be formatted as `[0-9]*`\\r\\n     * - The result must fit into an `uint256` type\\r\\n     */\\r\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\r\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\r\\n        if (!success) revert StringsInvalidChar();\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\r\\n     *\\r\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\r\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\r\\n     * character.\\r\\n     *\\r\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseUint(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) internal pure returns (bool success, uint256 value) {\\r\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\r\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {tryParseUint} that does not check bounds and returns (true, 0) if they are invalid.\\r\\n     */\\r\\n    function _tryParseUintUncheckedBounds(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) private pure returns (bool success, uint256 value) {\\r\\n        bytes memory buffer = bytes(input);\\r\\n\\r\\n        uint256 result = 0;\\r\\n        for (uint256 i = begin; i < end; ++i) {\\r\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\r\\n            if (chr > 9) return (false, 0);\\r\\n            result *= 10;\\r\\n            result += chr;\\r\\n        }\\r\\n        return (true, result);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The string must be formatted as `[-+]?[0-9]*`\\r\\n     * - The result must fit in an `int256` type.\\r\\n     */\\r\\n    function parseInt(string memory input) internal pure returns (int256) {\\r\\n        return parseInt(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\r\\n     * `end` (excluded).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\r\\n     * - The result must fit in an `int256` type.\\r\\n     */\\r\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\r\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\r\\n        if (!success) revert StringsInvalidChar();\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\r\\n     * the result does not fit in a `int256`.\\r\\n     *\\r\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\r\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\r\\n     * character or if the result does not fit in a `int256`.\\r\\n     *\\r\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseInt(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) internal pure returns (bool success, int256 value) {\\r\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\r\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {tryParseInt} that does not check bounds and returns (true, 0) if they are invalid.\\r\\n     */\\r\\n    function _tryParseIntUncheckedBounds(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) private pure returns (bool success, int256 value) {\\r\\n        bytes memory buffer = bytes(input);\\r\\n\\r\\n        // Check presence of a negative sign.\\r\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\r\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\r\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\r\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\r\\n\\r\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\r\\n\\r\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\r\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\r\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\r\\n            return (true, type(int256).min);\\r\\n        } else return (false, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\r\\n     * - The result must fit in an `uint256` type.\\r\\n     */\\r\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\r\\n        return parseHexUint(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\\r\\n     * `end` (excluded).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\r\\n     * - The result must fit in an `uint256` type.\\r\\n     */\\r\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\r\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\r\\n        if (!success) revert StringsInvalidChar();\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\r\\n     *\\r\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\r\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\r\\n     * invalid character.\\r\\n     *\\r\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseHexUint(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) internal pure returns (bool success, uint256 value) {\\r\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\r\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {tryParseHexUint} that does not check bounds and returns (true, 0) if they are invalid.\\r\\n     */\\r\\n    function _tryParseHexUintUncheckedBounds(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) private pure returns (bool success, uint256 value) {\\r\\n        bytes memory buffer = bytes(input);\\r\\n\\r\\n        // skip 0x prefix if present\\r\\n        bool hasPrefix = (begin < end + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\r\\n        uint256 offset = hasPrefix.toUint() * 2;\\r\\n\\r\\n        uint256 result = 0;\\r\\n        for (uint256 i = begin + offset; i < end; ++i) {\\r\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\r\\n            if (chr > 15) return (false, 0);\\r\\n            result *= 16;\\r\\n            unchecked {\\r\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\r\\n                // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.\\r\\n                result += chr;\\r\\n            }\\r\\n        }\\r\\n        return (true, result);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\r\\n     */\\r\\n    function parseAddress(string memory input) internal pure returns (address) {\\r\\n        return parseAddress(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\\r\\n     * `end` (excluded).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\r\\n     */\\r\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\r\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\r\\n        if (!success) revert StringsInvalidAddressFormat();\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\r\\n     * formatted address. See {parseAddress} requirements.\\r\\n     */\\r\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\r\\n        return tryParseAddress(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\r\\n     * formatted address. See {parseAddress} requirements.\\r\\n     */\\r\\n    function tryParseAddress(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) internal pure returns (bool success, address value) {\\r\\n        // check that input is the correct length\\r\\n        bool hasPrefix = (begin < end + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\r\\n\\r\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\r\\n\\r\\n        if (end - begin == expectedLength && end <= bytes(input).length) {\\r\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\r\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\r\\n            return (s, address(uint160(v)));\\r\\n        } else {\\r\\n            return (false, address(0));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\r\\n        uint8 value = uint8(chr);\\r\\n\\r\\n        // Try to parse `chr`:\\r\\n        // - Case 1: [0-9]\\r\\n        // - Case 2: [a-f]\\r\\n        // - Case 3: [A-F]\\r\\n        // - otherwise not supported\\r\\n        unchecked {\\r\\n            if (value > 47 && value < 58) value -= 48;\\r\\n            else if (value > 96 && value < 103) value -= 87;\\r\\n            else if (value > 64 && value < 71) value -= 55;\\r\\n            else return type(uint8).max;\\r\\n        }\\r\\n\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\r\\n     *\\r\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\r\\n     * assembly block as such would prevent some optimizations.\\r\\n     */\\r\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\r\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            value := mload(add(buffer, add(0x20, offset)))\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xce5ca113d4cd3005cbf2109590734a0410a5eebc6fc94d258af1897a40c29341\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":679,"contract":"contracts/EIP712.sol:EIP712","label":"_nameFallback","offset":0,"slot":"0","type":"t_string_storage"},{"astId":681,"contract":"contracts/EIP712.sol:EIP712","label":"_versionFallback","offset":0,"slot":"1","type":"t_string_storage"}],"types":{"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"}}}}},"contracts/ERC20.sol":{"ERC20":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"},{"internalType":"uint256","name":"totalSupply_","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ECDSAInvalidSignature","type":"error"},{"inputs":[{"internalType":"uint256","name":"length","type":"uint256"}],"name":"ECDSAInvalidSignatureLength","type":"error"},{"inputs":[{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"ECDSAInvalidSignatureS","type":"error"},{"inputs":[{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"ERC2612ExpiredSignature","type":"error"},{"inputs":[{"internalType":"address","name":"signer","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC2612InvalidSigner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"currentNonce","type":"uint256"}],"name":"InvalidAccountNonce","type":"error"},{"inputs":[],"name":"InvalidShortString","type":"error"},{"inputs":[{"internalType":"string","name":"str","type":"string"}],"name":"StringTooLong","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{"@_739":{"entryPoint":null,"id":739,"parameterSlots":2,"returnSlots":0},"@_952":{"entryPoint":null,"id":952,"parameterSlots":3,"returnSlots":0},"@_buildDomainSeparator_786":{"entryPoint":null,"id":786,"parameterSlots":0,"returnSlots":1},"@_mint_1270":{"entryPoint":418,"id":1270,"parameterSlots":2,"returnSlots":0},"@getStringSlot_5326":{"entryPoint":718,"id":5326,"parameterSlots":1,"returnSlots":1},"@toShortStringWithFallback_5022":{"entryPoint":338,"id":5022,"parameterSlots":2,"returnSlots":1},"@toShortString_4924":{"entryPoint":651,"id":4924,"parameterSlots":1,"returnSlots":1},"abi_decode_string_fromMemory":{"entryPoint":781,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint256_fromMemory":{"entryPoint":926,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1422,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":1388,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":1101,"id":null,"parameterSlots":3,"returnSlots":0},"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32":{"entryPoint":1475,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1184,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":743,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":1041,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":721,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:6285:18","statements":[{"nodeType":"YulBlock","src":"6:3:18","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:18","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:18","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:18","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:18"},"nodeType":"YulFunctionCall","src":"66:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:18"},"nodeType":"YulFunctionCall","src":"56:31:18"},"nodeType":"YulExpressionStatement","src":"56:31:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:18","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:18"},"nodeType":"YulFunctionCall","src":"96:15:18"},"nodeType":"YulExpressionStatement","src":"96:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:18"},"nodeType":"YulFunctionCall","src":"120:15:18"},"nodeType":"YulExpressionStatement","src":"120:15:18"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:18"},{"body":{"nodeType":"YulBlock","src":"212:184:18","statements":[{"nodeType":"YulVariableDeclaration","src":"222:10:18","value":{"kind":"number","nodeType":"YulLiteral","src":"231:1:18","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"226:1:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"291:63:18","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"316:3:18"},{"name":"i","nodeType":"YulIdentifier","src":"321:1:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"312:3:18"},"nodeType":"YulFunctionCall","src":"312:11:18"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"335:3:18"},{"name":"i","nodeType":"YulIdentifier","src":"340:1:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"331:3:18"},"nodeType":"YulFunctionCall","src":"331:11:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"325:5:18"},"nodeType":"YulFunctionCall","src":"325:18:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"305:6:18"},"nodeType":"YulFunctionCall","src":"305:39:18"},"nodeType":"YulExpressionStatement","src":"305:39:18"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"252:1:18"},{"name":"length","nodeType":"YulIdentifier","src":"255:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"249:2:18"},"nodeType":"YulFunctionCall","src":"249:13:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"263:19:18","statements":[{"nodeType":"YulAssignment","src":"265:15:18","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"274:1:18"},{"kind":"number","nodeType":"YulLiteral","src":"277:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"270:3:18"},"nodeType":"YulFunctionCall","src":"270:10:18"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"265:1:18"}]}]},"pre":{"nodeType":"YulBlock","src":"245:3:18","statements":[]},"src":"241:113:18"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"374:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"379:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"370:3:18"},"nodeType":"YulFunctionCall","src":"370:16:18"},{"kind":"number","nodeType":"YulLiteral","src":"388:1:18","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"363:6:18"},"nodeType":"YulFunctionCall","src":"363:27:18"},"nodeType":"YulExpressionStatement","src":"363:27:18"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"190:3:18","type":""},{"name":"dst","nodeType":"YulTypedName","src":"195:3:18","type":""},{"name":"length","nodeType":"YulTypedName","src":"200:6:18","type":""}],"src":"146:250:18"},{"body":{"nodeType":"YulBlock","src":"465:635:18","statements":[{"body":{"nodeType":"YulBlock","src":"514:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"523:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"526:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"516:6:18"},"nodeType":"YulFunctionCall","src":"516:12:18"},"nodeType":"YulExpressionStatement","src":"516:12:18"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"493:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"501:4:18","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"489:3:18"},"nodeType":"YulFunctionCall","src":"489:17:18"},{"name":"end","nodeType":"YulIdentifier","src":"508:3:18"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"485:3:18"},"nodeType":"YulFunctionCall","src":"485:27:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"478:6:18"},"nodeType":"YulFunctionCall","src":"478:35:18"},"nodeType":"YulIf","src":"475:55:18"},{"nodeType":"YulVariableDeclaration","src":"539:23:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"555:6:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"549:5:18"},"nodeType":"YulFunctionCall","src":"549:13:18"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"543:2:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"571:28:18","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"589:2:18","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"593:1:18","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"585:3:18"},"nodeType":"YulFunctionCall","src":"585:10:18"},{"kind":"number","nodeType":"YulLiteral","src":"597:1:18","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"581:3:18"},"nodeType":"YulFunctionCall","src":"581:18:18"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"575:2:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"622:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"624:16:18"},"nodeType":"YulFunctionCall","src":"624:18:18"},"nodeType":"YulExpressionStatement","src":"624:18:18"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"614:2:18"},{"name":"_2","nodeType":"YulIdentifier","src":"618:2:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"611:2:18"},"nodeType":"YulFunctionCall","src":"611:10:18"},"nodeType":"YulIf","src":"608:36:18"},{"nodeType":"YulVariableDeclaration","src":"653:17:18","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"667:2:18","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"663:3:18"},"nodeType":"YulFunctionCall","src":"663:7:18"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"657:2:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"679:23:18","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"699:2:18","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"693:5:18"},"nodeType":"YulFunctionCall","src":"693:9:18"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"683:6:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"711:71:18","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"733:6:18"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"757:2:18"},{"kind":"number","nodeType":"YulLiteral","src":"761:4:18","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"753:3:18"},"nodeType":"YulFunctionCall","src":"753:13:18"},{"name":"_3","nodeType":"YulIdentifier","src":"768:2:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"749:3:18"},"nodeType":"YulFunctionCall","src":"749:22:18"},{"kind":"number","nodeType":"YulLiteral","src":"773:2:18","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:18"},"nodeType":"YulFunctionCall","src":"745:31:18"},{"name":"_3","nodeType":"YulIdentifier","src":"778:2:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"741:3:18"},"nodeType":"YulFunctionCall","src":"741:40:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"729:3:18"},"nodeType":"YulFunctionCall","src":"729:53:18"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"715:10:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"841:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"843:16:18"},"nodeType":"YulFunctionCall","src":"843:18:18"},"nodeType":"YulExpressionStatement","src":"843:18:18"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"800:10:18"},{"name":"_2","nodeType":"YulIdentifier","src":"812:2:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"797:2:18"},"nodeType":"YulFunctionCall","src":"797:18:18"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"820:10:18"},{"name":"memPtr","nodeType":"YulIdentifier","src":"832:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"817:2:18"},"nodeType":"YulFunctionCall","src":"817:22:18"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"794:2:18"},"nodeType":"YulFunctionCall","src":"794:46:18"},"nodeType":"YulIf","src":"791:72:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"879:2:18","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"883:10:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"872:6:18"},"nodeType":"YulFunctionCall","src":"872:22:18"},"nodeType":"YulExpressionStatement","src":"872:22:18"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"910:6:18"},{"name":"_1","nodeType":"YulIdentifier","src":"918:2:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"903:6:18"},"nodeType":"YulFunctionCall","src":"903:18:18"},"nodeType":"YulExpressionStatement","src":"903:18:18"},{"body":{"nodeType":"YulBlock","src":"969:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"978:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"981:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"971:6:18"},"nodeType":"YulFunctionCall","src":"971:12:18"},"nodeType":"YulExpressionStatement","src":"971:12:18"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"944:6:18"},{"name":"_1","nodeType":"YulIdentifier","src":"952:2:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"940:3:18"},"nodeType":"YulFunctionCall","src":"940:15:18"},{"kind":"number","nodeType":"YulLiteral","src":"957:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"936:3:18"},"nodeType":"YulFunctionCall","src":"936:26:18"},{"name":"end","nodeType":"YulIdentifier","src":"964:3:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"933:2:18"},"nodeType":"YulFunctionCall","src":"933:35:18"},"nodeType":"YulIf","src":"930:55:18"},{"expression":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1033:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"1041:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1029:3:18"},"nodeType":"YulFunctionCall","src":"1029:17:18"},{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1052:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"1060:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1048:3:18"},"nodeType":"YulFunctionCall","src":"1048:17:18"},{"name":"_1","nodeType":"YulIdentifier","src":"1067:2:18"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"994:34:18"},"nodeType":"YulFunctionCall","src":"994:76:18"},"nodeType":"YulExpressionStatement","src":"994:76:18"},{"nodeType":"YulAssignment","src":"1079:15:18","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1088:6:18"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1079:5:18"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"439:6:18","type":""},{"name":"end","nodeType":"YulTypedName","src":"447:3:18","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"455:5:18","type":""}],"src":"401:699:18"},{"body":{"nodeType":"YulBlock","src":"1240:488:18","statements":[{"body":{"nodeType":"YulBlock","src":"1286:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1295:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1298:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1288:6:18"},"nodeType":"YulFunctionCall","src":"1288:12:18"},"nodeType":"YulExpressionStatement","src":"1288:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1261:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"1270:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1257:3:18"},"nodeType":"YulFunctionCall","src":"1257:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"1282:2:18","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1253:3:18"},"nodeType":"YulFunctionCall","src":"1253:32:18"},"nodeType":"YulIf","src":"1250:52:18"},{"nodeType":"YulVariableDeclaration","src":"1311:30:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1331:9:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1325:5:18"},"nodeType":"YulFunctionCall","src":"1325:16:18"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1315:6:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1350:28:18","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1368:2:18","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1372:1:18","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1364:3:18"},"nodeType":"YulFunctionCall","src":"1364:10:18"},{"kind":"number","nodeType":"YulLiteral","src":"1376:1:18","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1360:3:18"},"nodeType":"YulFunctionCall","src":"1360:18:18"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1354:2:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"1405:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1414:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1417:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1407:6:18"},"nodeType":"YulFunctionCall","src":"1407:12:18"},"nodeType":"YulExpressionStatement","src":"1407:12:18"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1393:6:18"},{"name":"_1","nodeType":"YulIdentifier","src":"1401:2:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1390:2:18"},"nodeType":"YulFunctionCall","src":"1390:14:18"},"nodeType":"YulIf","src":"1387:34:18"},{"nodeType":"YulAssignment","src":"1430:71:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1473:9:18"},{"name":"offset","nodeType":"YulIdentifier","src":"1484:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1469:3:18"},"nodeType":"YulFunctionCall","src":"1469:22:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1493:7:18"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1440:28:18"},"nodeType":"YulFunctionCall","src":"1440:61:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1430:6:18"}]},{"nodeType":"YulVariableDeclaration","src":"1510:41:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1536:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"1547:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1532:3:18"},"nodeType":"YulFunctionCall","src":"1532:18:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1526:5:18"},"nodeType":"YulFunctionCall","src":"1526:25:18"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1514:8:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"1580:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1589:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1592:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1582:6:18"},"nodeType":"YulFunctionCall","src":"1582:12:18"},"nodeType":"YulExpressionStatement","src":"1582:12:18"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1566:8:18"},{"name":"_1","nodeType":"YulIdentifier","src":"1576:2:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1563:2:18"},"nodeType":"YulFunctionCall","src":"1563:16:18"},"nodeType":"YulIf","src":"1560:36:18"},{"nodeType":"YulAssignment","src":"1605:73:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1648:9:18"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1659:8:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1644:3:18"},"nodeType":"YulFunctionCall","src":"1644:24:18"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1670:7:18"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1615:28:18"},"nodeType":"YulFunctionCall","src":"1615:63:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1605:6:18"}]},{"nodeType":"YulAssignment","src":"1687:35:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1707:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"1718:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1703:3:18"},"nodeType":"YulFunctionCall","src":"1703:18:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1697:5:18"},"nodeType":"YulFunctionCall","src":"1697:25:18"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1687:6:18"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1190:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1201:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1213:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1221:6:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1229:6:18","type":""}],"src":"1105:623:18"},{"body":{"nodeType":"YulBlock","src":"1788:325:18","statements":[{"nodeType":"YulAssignment","src":"1798:22:18","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1812:1:18","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1815:4:18"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1808:3:18"},"nodeType":"YulFunctionCall","src":"1808:12:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1798:6:18"}]},{"nodeType":"YulVariableDeclaration","src":"1829:38:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1859:4:18"},{"kind":"number","nodeType":"YulLiteral","src":"1865:1:18","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1855:3:18"},"nodeType":"YulFunctionCall","src":"1855:12:18"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1833:18:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"1906:31:18","statements":[{"nodeType":"YulAssignment","src":"1908:27:18","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1922:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"1930:4:18","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1918:3:18"},"nodeType":"YulFunctionCall","src":"1918:17:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1908:6:18"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1886:18:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1879:6:18"},"nodeType":"YulFunctionCall","src":"1879:26:18"},"nodeType":"YulIf","src":"1876:61:18"},{"body":{"nodeType":"YulBlock","src":"1996:111:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2017:1:18","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2024:3:18","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2029:10:18","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2020:3:18"},"nodeType":"YulFunctionCall","src":"2020:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2010:6:18"},"nodeType":"YulFunctionCall","src":"2010:31:18"},"nodeType":"YulExpressionStatement","src":"2010:31:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2061:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2064:4:18","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2054:6:18"},"nodeType":"YulFunctionCall","src":"2054:15:18"},"nodeType":"YulExpressionStatement","src":"2054:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2089:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2092:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2082:6:18"},"nodeType":"YulFunctionCall","src":"2082:15:18"},"nodeType":"YulExpressionStatement","src":"2082:15:18"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1952:18:18"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1975:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"1983:2:18","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1972:2:18"},"nodeType":"YulFunctionCall","src":"1972:14:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1949:2:18"},"nodeType":"YulFunctionCall","src":"1949:38:18"},"nodeType":"YulIf","src":"1946:161:18"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1768:4:18","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1777:6:18","type":""}],"src":"1733:380:18"},{"body":{"nodeType":"YulBlock","src":"2174:65:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2191:1:18","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"2194:3:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2184:6:18"},"nodeType":"YulFunctionCall","src":"2184:14:18"},"nodeType":"YulExpressionStatement","src":"2184:14:18"},{"nodeType":"YulAssignment","src":"2207:26:18","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2225:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2228:4:18","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2215:9:18"},"nodeType":"YulFunctionCall","src":"2215:18:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"2207:4:18"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"2157:3:18","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"2165:4:18","type":""}],"src":"2118:121:18"},{"body":{"nodeType":"YulBlock","src":"2325:464:18","statements":[{"body":{"nodeType":"YulBlock","src":"2358:425:18","statements":[{"nodeType":"YulVariableDeclaration","src":"2372:11:18","value":{"kind":"number","nodeType":"YulLiteral","src":"2382:1:18","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2376:2:18","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2403:2:18"},{"name":"array","nodeType":"YulIdentifier","src":"2407:5:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2396:6:18"},"nodeType":"YulFunctionCall","src":"2396:17:18"},"nodeType":"YulExpressionStatement","src":"2396:17:18"},{"nodeType":"YulVariableDeclaration","src":"2426:31:18","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2448:2:18"},{"kind":"number","nodeType":"YulLiteral","src":"2452:4:18","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2438:9:18"},"nodeType":"YulFunctionCall","src":"2438:19:18"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"2430:4:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2470:57:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2493:4:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2503:1:18","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2510:10:18"},{"kind":"number","nodeType":"YulLiteral","src":"2522:2:18","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2506:3:18"},"nodeType":"YulFunctionCall","src":"2506:19:18"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2499:3:18"},"nodeType":"YulFunctionCall","src":"2499:27:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2489:3:18"},"nodeType":"YulFunctionCall","src":"2489:38:18"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"2474:11:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"2564:23:18","statements":[{"nodeType":"YulAssignment","src":"2566:19:18","value":{"name":"data","nodeType":"YulIdentifier","src":"2581:4:18"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"2566:11:18"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2546:10:18"},{"kind":"number","nodeType":"YulLiteral","src":"2558:4:18","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2543:2:18"},"nodeType":"YulFunctionCall","src":"2543:20:18"},"nodeType":"YulIf","src":"2540:47:18"},{"nodeType":"YulVariableDeclaration","src":"2600:41:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2614:4:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2624:1:18","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2631:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"2636:2:18","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2627:3:18"},"nodeType":"YulFunctionCall","src":"2627:12:18"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2620:3:18"},"nodeType":"YulFunctionCall","src":"2620:20:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2610:3:18"},"nodeType":"YulFunctionCall","src":"2610:31:18"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2604:2:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2654:24:18","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"2667:11:18"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"2658:5:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"2752:21:18","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2761:5:18"},{"name":"_1","nodeType":"YulIdentifier","src":"2768:2:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2754:6:18"},"nodeType":"YulFunctionCall","src":"2754:17:18"},"nodeType":"YulExpressionStatement","src":"2754:17:18"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2702:5:18"},{"name":"_2","nodeType":"YulIdentifier","src":"2709:2:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2699:2:18"},"nodeType":"YulFunctionCall","src":"2699:13:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2713:26:18","statements":[{"nodeType":"YulAssignment","src":"2715:22:18","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2728:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"2735:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2724:3:18"},"nodeType":"YulFunctionCall","src":"2724:13:18"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"2715:5:18"}]}]},"pre":{"nodeType":"YulBlock","src":"2695:3:18","statements":[]},"src":"2691:82:18"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2341:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"2346:2:18","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2338:2:18"},"nodeType":"YulFunctionCall","src":"2338:11:18"},"nodeType":"YulIf","src":"2335:448:18"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"2297:5:18","type":""},{"name":"len","nodeType":"YulTypedName","src":"2304:3:18","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"2309:10:18","type":""}],"src":"2244:545:18"},{"body":{"nodeType":"YulBlock","src":"2879:81:18","statements":[{"nodeType":"YulAssignment","src":"2889:65:18","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2904:4:18"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2922:1:18","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"2925:3:18"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2918:3:18"},"nodeType":"YulFunctionCall","src":"2918:11:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2935:1:18","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2931:3:18"},"nodeType":"YulFunctionCall","src":"2931:6:18"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2914:3:18"},"nodeType":"YulFunctionCall","src":"2914:24:18"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2910:3:18"},"nodeType":"YulFunctionCall","src":"2910:29:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2900:3:18"},"nodeType":"YulFunctionCall","src":"2900:40:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2946:1:18","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"2949:3:18"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2942:3:18"},"nodeType":"YulFunctionCall","src":"2942:11:18"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2897:2:18"},"nodeType":"YulFunctionCall","src":"2897:57:18"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"2889:4:18"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2856:4:18","type":""},{"name":"len","nodeType":"YulTypedName","src":"2862:3:18","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"2870:4:18","type":""}],"src":"2794:166:18"},{"body":{"nodeType":"YulBlock","src":"3061:1256:18","statements":[{"nodeType":"YulVariableDeclaration","src":"3071:24:18","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3091:3:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3085:5:18"},"nodeType":"YulFunctionCall","src":"3085:10:18"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"3075:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"3138:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3140:16:18"},"nodeType":"YulFunctionCall","src":"3140:18:18"},"nodeType":"YulExpressionStatement","src":"3140:18:18"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3110:6:18"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3126:2:18","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"3130:1:18","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3122:3:18"},"nodeType":"YulFunctionCall","src":"3122:10:18"},{"kind":"number","nodeType":"YulLiteral","src":"3134:1:18","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3118:3:18"},"nodeType":"YulFunctionCall","src":"3118:18:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3107:2:18"},"nodeType":"YulFunctionCall","src":"3107:30:18"},"nodeType":"YulIf","src":"3104:56:18"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3213:4:18"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3251:4:18"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3245:5:18"},"nodeType":"YulFunctionCall","src":"3245:11:18"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"3219:25:18"},"nodeType":"YulFunctionCall","src":"3219:38:18"},{"name":"newLen","nodeType":"YulIdentifier","src":"3259:6:18"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"3169:43:18"},"nodeType":"YulFunctionCall","src":"3169:97:18"},"nodeType":"YulExpressionStatement","src":"3169:97:18"},{"nodeType":"YulVariableDeclaration","src":"3275:18:18","value":{"kind":"number","nodeType":"YulLiteral","src":"3292:1:18","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"3279:9:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3302:23:18","value":{"kind":"number","nodeType":"YulLiteral","src":"3321:4:18","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"3306:11:18","type":""}]},{"nodeType":"YulAssignment","src":"3334:24:18","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3347:11:18"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3334:9:18"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"3404:656:18","statements":[{"nodeType":"YulVariableDeclaration","src":"3418:35:18","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3437:6:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3449:2:18","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3445:3:18"},"nodeType":"YulFunctionCall","src":"3445:7:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3433:3:18"},"nodeType":"YulFunctionCall","src":"3433:20:18"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"3422:7:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3466:49:18","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3510:4:18"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"3480:29:18"},"nodeType":"YulFunctionCall","src":"3480:35:18"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"3470:6:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3528:10:18","value":{"kind":"number","nodeType":"YulLiteral","src":"3537:1:18","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3532:1:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"3615:172:18","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3640:6:18"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3658:3:18"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3663:9:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3654:3:18"},"nodeType":"YulFunctionCall","src":"3654:19:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3648:5:18"},"nodeType":"YulFunctionCall","src":"3648:26:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3633:6:18"},"nodeType":"YulFunctionCall","src":"3633:42:18"},"nodeType":"YulExpressionStatement","src":"3633:42:18"},{"nodeType":"YulAssignment","src":"3692:24:18","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3706:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"3714:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3702:3:18"},"nodeType":"YulFunctionCall","src":"3702:14:18"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3692:6:18"}]},{"nodeType":"YulAssignment","src":"3733:40:18","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3750:9:18"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3761:11:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3746:3:18"},"nodeType":"YulFunctionCall","src":"3746:27:18"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3733:9:18"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3562:1:18"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"3565:7:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3559:2:18"},"nodeType":"YulFunctionCall","src":"3559:14:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3574:28:18","statements":[{"nodeType":"YulAssignment","src":"3576:24:18","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3585:1:18"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3588:11:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3581:3:18"},"nodeType":"YulFunctionCall","src":"3581:19:18"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3576:1:18"}]}]},"pre":{"nodeType":"YulBlock","src":"3555:3:18","statements":[]},"src":"3551:236:18"},{"body":{"nodeType":"YulBlock","src":"3835:166:18","statements":[{"nodeType":"YulVariableDeclaration","src":"3853:43:18","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3880:3:18"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3885:9:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3876:3:18"},"nodeType":"YulFunctionCall","src":"3876:19:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3870:5:18"},"nodeType":"YulFunctionCall","src":"3870:26:18"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"3857:9:18","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3920:6:18"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"3932:9:18"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3959:1:18","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"3962:6:18"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3955:3:18"},"nodeType":"YulFunctionCall","src":"3955:14:18"},{"kind":"number","nodeType":"YulLiteral","src":"3971:3:18","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3951:3:18"},"nodeType":"YulFunctionCall","src":"3951:24:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3981:1:18","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3977:3:18"},"nodeType":"YulFunctionCall","src":"3977:6:18"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3947:3:18"},"nodeType":"YulFunctionCall","src":"3947:37:18"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3943:3:18"},"nodeType":"YulFunctionCall","src":"3943:42:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3928:3:18"},"nodeType":"YulFunctionCall","src":"3928:58:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3913:6:18"},"nodeType":"YulFunctionCall","src":"3913:74:18"},"nodeType":"YulExpressionStatement","src":"3913:74:18"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"3806:7:18"},{"name":"newLen","nodeType":"YulIdentifier","src":"3815:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3803:2:18"},"nodeType":"YulFunctionCall","src":"3803:19:18"},"nodeType":"YulIf","src":"3800:201:18"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4021:4:18"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4035:1:18","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"4038:6:18"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4031:3:18"},"nodeType":"YulFunctionCall","src":"4031:14:18"},{"kind":"number","nodeType":"YulLiteral","src":"4047:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4027:3:18"},"nodeType":"YulFunctionCall","src":"4027:22:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4014:6:18"},"nodeType":"YulFunctionCall","src":"4014:36:18"},"nodeType":"YulExpressionStatement","src":"4014:36:18"}]},"nodeType":"YulCase","src":"3397:663:18","value":{"kind":"number","nodeType":"YulLiteral","src":"3402:1:18","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"4077:234:18","statements":[{"nodeType":"YulVariableDeclaration","src":"4091:14:18","value":{"kind":"number","nodeType":"YulLiteral","src":"4104:1:18","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4095:5:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"4140:67:18","statements":[{"nodeType":"YulAssignment","src":"4158:35:18","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4177:3:18"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4182:9:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4173:3:18"},"nodeType":"YulFunctionCall","src":"4173:19:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4167:5:18"},"nodeType":"YulFunctionCall","src":"4167:26:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4158:5:18"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"4121:6:18"},"nodeType":"YulIf","src":"4118:89:18"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4227:4:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4286:5:18"},{"name":"newLen","nodeType":"YulIdentifier","src":"4293:6:18"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"4233:52:18"},"nodeType":"YulFunctionCall","src":"4233:67:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4220:6:18"},"nodeType":"YulFunctionCall","src":"4220:81:18"},"nodeType":"YulExpressionStatement","src":"4220:81:18"}]},"nodeType":"YulCase","src":"4069:242:18","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3377:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"3385:2:18","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3374:2:18"},"nodeType":"YulFunctionCall","src":"3374:14:18"},"nodeType":"YulSwitch","src":"3367:944:18"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"3046:4:18","type":""},{"name":"src","nodeType":"YulTypedName","src":"3052:3:18","type":""}],"src":"2965:1352:18"},{"body":{"nodeType":"YulBlock","src":"4535:276:18","statements":[{"nodeType":"YulAssignment","src":"4545:27:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4557:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4568:3:18","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4553:3:18"},"nodeType":"YulFunctionCall","src":"4553:19:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4545:4:18"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4588:9:18"},{"name":"value0","nodeType":"YulIdentifier","src":"4599:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4581:6:18"},"nodeType":"YulFunctionCall","src":"4581:25:18"},"nodeType":"YulExpressionStatement","src":"4581:25:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4626:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4637:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4622:3:18"},"nodeType":"YulFunctionCall","src":"4622:18:18"},{"name":"value1","nodeType":"YulIdentifier","src":"4642:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4615:6:18"},"nodeType":"YulFunctionCall","src":"4615:34:18"},"nodeType":"YulExpressionStatement","src":"4615:34:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4669:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4680:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4665:3:18"},"nodeType":"YulFunctionCall","src":"4665:18:18"},{"name":"value2","nodeType":"YulIdentifier","src":"4685:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4658:6:18"},"nodeType":"YulFunctionCall","src":"4658:34:18"},"nodeType":"YulExpressionStatement","src":"4658:34:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4712:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4723:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4708:3:18"},"nodeType":"YulFunctionCall","src":"4708:18:18"},{"name":"value3","nodeType":"YulIdentifier","src":"4728:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4701:6:18"},"nodeType":"YulFunctionCall","src":"4701:34:18"},"nodeType":"YulExpressionStatement","src":"4701:34:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4755:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4766:3:18","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4751:3:18"},"nodeType":"YulFunctionCall","src":"4751:19:18"},{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"4776:6:18"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4792:3:18","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4797:1:18","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4788:3:18"},"nodeType":"YulFunctionCall","src":"4788:11:18"},{"kind":"number","nodeType":"YulLiteral","src":"4801:1:18","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4784:3:18"},"nodeType":"YulFunctionCall","src":"4784:19:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4772:3:18"},"nodeType":"YulFunctionCall","src":"4772:32:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4744:6:18"},"nodeType":"YulFunctionCall","src":"4744:61:18"},"nodeType":"YulExpressionStatement","src":"4744:61:18"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4472:9:18","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4483:6:18","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4491:6:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4499:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4507:6:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4515:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4526:4:18","type":""}],"src":"4322:489:18"},{"body":{"nodeType":"YulBlock","src":"4990:181:18","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5007:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"5018:2:18","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5000:6:18"},"nodeType":"YulFunctionCall","src":"5000:21:18"},"nodeType":"YulExpressionStatement","src":"5000:21:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5041:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"5052:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5037:3:18"},"nodeType":"YulFunctionCall","src":"5037:18:18"},{"kind":"number","nodeType":"YulLiteral","src":"5057:2:18","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5030:6:18"},"nodeType":"YulFunctionCall","src":"5030:30:18"},"nodeType":"YulExpressionStatement","src":"5030:30:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5080:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"5091:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5076:3:18"},"nodeType":"YulFunctionCall","src":"5076:18:18"},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"5096:33:18","type":"","value":"ERC20: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5069:6:18"},"nodeType":"YulFunctionCall","src":"5069:61:18"},"nodeType":"YulExpressionStatement","src":"5069:61:18"},{"nodeType":"YulAssignment","src":"5139:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5151:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"5162:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5147:3:18"},"nodeType":"YulFunctionCall","src":"5147:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5139:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4967:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4981:4:18","type":""}],"src":"4816:355:18"},{"body":{"nodeType":"YulBlock","src":"5224:174:18","statements":[{"nodeType":"YulAssignment","src":"5234:16:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5245:1:18"},{"name":"y","nodeType":"YulIdentifier","src":"5248:1:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5241:3:18"},"nodeType":"YulFunctionCall","src":"5241:9:18"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"5234:3:18"}]},{"body":{"nodeType":"YulBlock","src":"5281:111:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5302:1:18","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5309:3:18","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5314:10:18","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5305:3:18"},"nodeType":"YulFunctionCall","src":"5305:20:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5295:6:18"},"nodeType":"YulFunctionCall","src":"5295:31:18"},"nodeType":"YulExpressionStatement","src":"5295:31:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5346:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5349:4:18","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5339:6:18"},"nodeType":"YulFunctionCall","src":"5339:15:18"},"nodeType":"YulExpressionStatement","src":"5339:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5374:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5377:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5367:6:18"},"nodeType":"YulFunctionCall","src":"5367:15:18"},"nodeType":"YulExpressionStatement","src":"5367:15:18"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5265:1:18"},{"name":"sum","nodeType":"YulIdentifier","src":"5268:3:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5262:2:18"},"nodeType":"YulFunctionCall","src":"5262:10:18"},"nodeType":"YulIf","src":"5259:133:18"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5207:1:18","type":""},{"name":"y","nodeType":"YulTypedName","src":"5210:1:18","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"5216:3:18","type":""}],"src":"5176:222:18"},{"body":{"nodeType":"YulBlock","src":"5504:76:18","statements":[{"nodeType":"YulAssignment","src":"5514:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5526:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"5537:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5522:3:18"},"nodeType":"YulFunctionCall","src":"5522:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5514:4:18"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5556:9:18"},{"name":"value0","nodeType":"YulIdentifier","src":"5567:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5549:6:18"},"nodeType":"YulFunctionCall","src":"5549:25:18"},"nodeType":"YulExpressionStatement","src":"5549:25:18"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5473:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5484:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5495:4:18","type":""}],"src":"5403:177:18"},{"body":{"nodeType":"YulBlock","src":"5706:275:18","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5723:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"5734:2:18","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5716:6:18"},"nodeType":"YulFunctionCall","src":"5716:21:18"},"nodeType":"YulExpressionStatement","src":"5716:21:18"},{"nodeType":"YulVariableDeclaration","src":"5746:27:18","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5766:6:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5760:5:18"},"nodeType":"YulFunctionCall","src":"5760:13:18"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5750:6:18","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5793:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"5804:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5789:3:18"},"nodeType":"YulFunctionCall","src":"5789:18:18"},{"name":"length","nodeType":"YulIdentifier","src":"5809:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5782:6:18"},"nodeType":"YulFunctionCall","src":"5782:34:18"},"nodeType":"YulExpressionStatement","src":"5782:34:18"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5864:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"5872:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5860:3:18"},"nodeType":"YulFunctionCall","src":"5860:15:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5881:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"5892:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5877:3:18"},"nodeType":"YulFunctionCall","src":"5877:18:18"},{"name":"length","nodeType":"YulIdentifier","src":"5897:6:18"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"5825:34:18"},"nodeType":"YulFunctionCall","src":"5825:79:18"},"nodeType":"YulExpressionStatement","src":"5825:79:18"},{"nodeType":"YulAssignment","src":"5913:62:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5929:9:18"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5948:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"5956:2:18","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5944:3:18"},"nodeType":"YulFunctionCall","src":"5944:15:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5965:2:18","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5961:3:18"},"nodeType":"YulFunctionCall","src":"5961:7:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5940:3:18"},"nodeType":"YulFunctionCall","src":"5940:29:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5925:3:18"},"nodeType":"YulFunctionCall","src":"5925:45:18"},{"kind":"number","nodeType":"YulLiteral","src":"5972:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5921:3:18"},"nodeType":"YulFunctionCall","src":"5921:54:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5913:4:18"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5675:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5686:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5697:4:18","type":""}],"src":"5585:396:18"},{"body":{"nodeType":"YulBlock","src":"6080:203:18","statements":[{"nodeType":"YulVariableDeclaration","src":"6090:26:18","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"6110:5:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6104:5:18"},"nodeType":"YulFunctionCall","src":"6104:12:18"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6094:6:18","type":""}]},{"nodeType":"YulAssignment","src":"6125:32:18","value":{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"6144:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"6151:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6140:3:18"},"nodeType":"YulFunctionCall","src":"6140:16:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6134:5:18"},"nodeType":"YulFunctionCall","src":"6134:23:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6125:5:18"}]},{"body":{"nodeType":"YulBlock","src":"6194:83:18","statements":[{"nodeType":"YulAssignment","src":"6208:59:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6221:5:18"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6236:1:18","type":"","value":"3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6243:4:18","type":"","value":"0x20"},{"name":"length","nodeType":"YulIdentifier","src":"6249:6:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6239:3:18"},"nodeType":"YulFunctionCall","src":"6239:17:18"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6232:3:18"},"nodeType":"YulFunctionCall","src":"6232:25:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6263:1:18","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6259:3:18"},"nodeType":"YulFunctionCall","src":"6259:6:18"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6228:3:18"},"nodeType":"YulFunctionCall","src":"6228:38:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6217:3:18"},"nodeType":"YulFunctionCall","src":"6217:50:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6208:5:18"}]}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6172:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"6180:4:18","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6169:2:18"},"nodeType":"YulFunctionCall","src":"6169:16:18"},"nodeType":"YulIf","src":"6166:111:18"}]},"name":"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"6060:5:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6070:5:18","type":""}],"src":"5986:297:18"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(offset, 0x20), add(memPtr, 0x20), _1)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n        value2 := mload(add(headStart, 64))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value\n    {\n        let length := mload(array)\n        value := mload(add(array, 0x20))\n        if lt(length, 0x20)\n        {\n            value := and(value, shl(shl(3, sub(0x20, length)), not(0)))\n        }\n    }\n}","id":18,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6101606040523480156200001257600080fd5b5060405162001a4738038062001a4783398101604081905262000035916200039e565b82604051806040016040528060018152602001603160f81b8152506200006b6000836200015260201b620006ce1790919060201c565b610120526200008881600162000152602090811b620006ce17901c565b61014052815160208084019190912060e052815190820120610100524660a0526200011660e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c05260066200012d8482620004a0565b5060076200013c8382620004a0565b50620001493382620001a2565b505050620005e8565b600060208351101562000172576200016a836200028b565b90506200019c565b826200018983620002ce60201b620006ff1760201c565b90620001969082620004a0565b5060ff90505b92915050565b6001600160a01b038216620001fe5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064015b60405180910390fd5b80600560008282546200021291906200056c565b90915550506001600160a01b03821660009081526003602052604081208054839290620002419084906200056c565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600080829050601f81511115620002b9578260405163305a27a960e01b8152600401620001f591906200058e565b8051620002c682620005c3565b179392505050565b90565b634e487b7160e01b600052604160045260246000fd5b60005b8381101562000304578181015183820152602001620002ea565b50506000910152565b600082601f8301126200031f57600080fd5b81516001600160401b03808211156200033c576200033c620002d1565b604051601f8301601f19908116603f01168101908282118183101715620003675762000367620002d1565b816040528381528660208588010111156200038157600080fd5b62000394846020830160208901620002e7565b9695505050505050565b600080600060608486031215620003b457600080fd5b83516001600160401b0380821115620003cc57600080fd5b620003da878388016200030d565b94506020860151915080821115620003f157600080fd5b5062000400868287016200030d565b925050604084015190509250925092565b600181811c908216806200042657607f821691505b6020821081036200044757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200049b57600081815260208120601f850160051c81016020861015620004765750805b601f850160051c820191505b81811015620004975782815560010162000482565b5050505b505050565b81516001600160401b03811115620004bc57620004bc620002d1565b620004d481620004cd845462000411565b846200044d565b602080601f8311600181146200050c5760008415620004f35750858301515b600019600386901b1c1916600185901b17855562000497565b600085815260208120601f198616915b828110156200053d578886015182559484019460019091019084016200051c565b50858210156200055c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200019c57634e487b7160e01b600052601160045260246000fd5b6020815260008251806020840152620005af816040850160208701620002e7565b601f01601f19169190910160400192915050565b80516020808301519190811015620004475760001960209190910360031b1b16919050565b60805160a05160c05160e051610100516101205161014051611404620006436000396000610bd101526000610ba401526000610b4c01526000610b2401526000610a7f01526000610aa901526000610ad301526114046000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d7146101e9578063a9059cbb146101fc578063d505accf1461020f578063dd62ed3e1461022457600080fd5b806370a082311461018a5780637ecebe00146101b357806384b0196e146101c657806395d89b41146101e157600080fd5b806323b872dd116100d357806323b872dd1461014d578063313ce567146101605780633644e5151461016f578063395093511461017757600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013b575b600080fd5b61010261025d565b60405161010f9190611005565b60405180910390f35b61012b61012636600461103b565b6102ef565b604051901515815260200161010f565b6005545b60405190815260200161010f565b61012b61015b366004611065565b610306565b6040516012815260200161010f565b61013f6103ca565b61012b61018536600461103b565b6103d9565b61013f6101983660046110a1565b6001600160a01b031660009081526003602052604090205490565b61013f6101c13660046110a1565b610415565b6101ce610433565b60405161010f97969594939291906110bc565b610102610495565b61012b6101f736600461103b565b6104a4565b61012b61020a36600461103b565b610555565b61022261021d36600461116e565b610562565b005b61013f6102323660046111e1565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b60606006805461026c90611214565b80601f016020809104026020016040519081016040528092919081815260200182805461029890611214565b80156102e55780601f106102ba576101008083540402835291602001916102e5565b820191906000526020600020905b8154815290600101906020018083116102c857829003601f168201915b5050505050905090565b60006102fc338484610702565b5060015b92915050565b600061031384848461085a565b6001600160a01b0384166000908152600460209081526040808320338452909152902054828110156103b25760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6103bf8533858403610702565b506001949350505050565b60006103d4610a72565b905090565b3360008181526004602090815260408083206001600160a01b038716845290915281205490916102fc91859061041090869061124e565b610702565b6001600160a01b038116600090815260026020526040812054610300565b600060608060008060006060610447610b9d565b61044f610bca565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b60606007805461026c90611214565b3360009081526004602090815260408083206001600160a01b03861684529091528120548281101561053e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016103a9565b61054b3385858403610702565b5060019392505050565b60006102fc33848461085a565b8342111561059f576040517f62791302000000000000000000000000000000000000000000000000000000008152600481018590526024016103a9565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886105ec8c6001600160a01b0316600090815260026020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061064782610bf7565b9050600061065782878787610c3f565b9050896001600160a01b0316816001600160a01b0316146106b7576040517f4b800e460000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301528b1660248201526044016103a9565b6106c28a8a8a610702565b50505050505050505050565b60006020835110156106ea576106e383610c6d565b9050610300565b816106f584826112d4565b5060ff9050610300565b90565b6001600160a01b03831661077d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016103a9565b6001600160a01b0382166107f95760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016103a9565b6001600160a01b0383811660008181526004602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166108d65760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103a9565b6001600160a01b0382166109525760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016103a9565b6001600160a01b038316600090815260036020526040902054818110156109e15760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103a9565b6001600160a01b03808516600090815260036020526040808220858503905591851681529081208054849290610a1890849061124e565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a6491815260200190565b60405180910390a350505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610acb57507f000000000000000000000000000000000000000000000000000000000000000046145b15610af557507f000000000000000000000000000000000000000000000000000000000000000090565b6103d4604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60606103d47f00000000000000000000000000000000000000000000000000000000000000006000610cc4565b60606103d47f00000000000000000000000000000000000000000000000000000000000000006001610cc4565b6000610300610c04610a72565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b600080600080610c5188888888610d68565b925092509250610c618282610e37565b50909695505050505050565b600080829050601f81511115610cb157826040517f305a27a90000000000000000000000000000000000000000000000000000000081526004016103a99190611005565b8051610cbc82611394565b179392505050565b606060ff8314610cd7576106e383610f3f565b818054610ce390611214565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0f90611214565b8015610d5c5780601f10610d3157610100808354040283529160200191610d5c565b820191906000526020600020905b815481529060010190602001808311610d3f57829003601f168201915b50505050509050610300565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610da35750600091506003905082610e2d565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610df7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610e2357506000925060019150829050610e2d565b9250600091508190505b9450945094915050565b6000826003811115610e4b57610e4b6113b8565b03610e54575050565b6001826003811115610e6857610e686113b8565b03610e9f576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002826003811115610eb357610eb36113b8565b03610eed576040517ffce698f7000000000000000000000000000000000000000000000000000000008152600481018290526024016103a9565b6003826003811115610f0157610f016113b8565b03610f3b576040517fd78bce0c000000000000000000000000000000000000000000000000000000008152600481018290526024016103a9565b5050565b60606000610f4c83610f7e565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600060ff8216601f811115610300576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000815180845260005b81811015610fe557602081850181015186830182015201610fc9565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006110186020830184610fbf565b9392505050565b80356001600160a01b038116811461103657600080fd5b919050565b6000806040838503121561104e57600080fd5b6110578361101f565b946020939093013593505050565b60008060006060848603121561107a57600080fd5b6110838461101f565b92506110916020850161101f565b9150604084013590509250925092565b6000602082840312156110b357600080fd5b6110188261101f565b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e0818401526110f860e084018a610fbf565b838103604085015261110a818a610fbf565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b8181101561115c57835183529284019291840191600101611140565b50909c9b505050505050505050505050565b600080600080600080600060e0888a03121561118957600080fd5b6111928861101f565b96506111a06020890161101f565b95506040880135945060608801359350608088013560ff811681146111c457600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156111f457600080fd5b6111fd8361101f565b915061120b6020840161101f565b90509250929050565b600181811c9082168061122857607f821691505b60208210810361124857634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561030057634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b601f8211156112cf57600081815260208120601f850160051c810160208610156112ac5750805b601f850160051c820191505b818110156112cb578281556001016112b8565b5050505b505050565b815167ffffffffffffffff8111156112ee576112ee61126f565b611302816112fc8454611214565b84611285565b602080601f831160018114611337576000841561131f5750858301515b600019600386901b1c1916600185901b1785556112cb565b600085815260208120601f198616915b8281101561136657888601518255948401946001909101908401611347565b50858210156113845787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b805160208083015191908110156112485760001960209190910360031b1b16919050565b634e487b7160e01b600052602160045260246000fdfea26469706673582212208adf8cefaa85c6159763a6a6465afda52890fd7aec68a829111b982e1e4599bc64736f6c63430008110033","opcodes":"PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1A47 CODESIZE SUB DUP1 PUSH3 0x1A47 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x35 SWAP2 PUSH3 0x39E JUMP JUMPDEST DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x31 PUSH1 0xF8 SHL DUP2 MSTORE POP PUSH3 0x6B PUSH1 0x0 DUP4 PUSH3 0x152 PUSH1 0x20 SHL PUSH3 0x6CE OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x120 MSTORE PUSH3 0x88 DUP2 PUSH1 0x1 PUSH3 0x152 PUSH1 0x20 SWAP1 DUP2 SHL PUSH3 0x6CE OR SWAP1 SHR JUMP JUMPDEST PUSH2 0x140 MSTORE DUP2 MLOAD PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0xE0 MSTORE DUP2 MLOAD SWAP1 DUP3 ADD KECCAK256 PUSH2 0x100 MSTORE CHAINID PUSH1 0xA0 MSTORE PUSH3 0x116 PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x80 MSTORE POP POP ADDRESS PUSH1 0xC0 MSTORE PUSH1 0x6 PUSH3 0x12D DUP5 DUP3 PUSH3 0x4A0 JUMP JUMPDEST POP PUSH1 0x7 PUSH3 0x13C DUP4 DUP3 PUSH3 0x4A0 JUMP JUMPDEST POP PUSH3 0x149 CALLER DUP3 PUSH3 0x1A2 JUMP JUMPDEST POP POP POP PUSH3 0x5E8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH3 0x172 JUMPI PUSH3 0x16A DUP4 PUSH3 0x28B JUMP JUMPDEST SWAP1 POP PUSH3 0x19C JUMP JUMPDEST DUP3 PUSH3 0x189 DUP4 PUSH3 0x2CE PUSH1 0x20 SHL PUSH3 0x6FF OR PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 PUSH3 0x196 SWAP1 DUP3 PUSH3 0x4A0 JUMP JUMPDEST POP PUSH1 0xFF SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x1FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH3 0x212 SWAP2 SWAP1 PUSH3 0x56C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH3 0x241 SWAP1 DUP5 SWAP1 PUSH3 0x56C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH3 0x2B9 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x1F5 SWAP2 SWAP1 PUSH3 0x58E JUMP JUMPDEST DUP1 MLOAD PUSH3 0x2C6 DUP3 PUSH3 0x5C3 JUMP JUMPDEST OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x304 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x2EA JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x31F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x33C JUMPI PUSH3 0x33C PUSH3 0x2D1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x367 JUMPI PUSH3 0x367 PUSH3 0x2D1 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x381 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x394 DUP5 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP10 ADD PUSH3 0x2E7 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x3B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x3CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x3DA DUP8 DUP4 DUP9 ADD PUSH3 0x30D JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x3F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x400 DUP7 DUP3 DUP8 ADD PUSH3 0x30D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x426 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x447 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x49B JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x476 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x497 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x482 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x4BC JUMPI PUSH3 0x4BC PUSH3 0x2D1 JUMP JUMPDEST PUSH3 0x4D4 DUP2 PUSH3 0x4CD DUP5 SLOAD PUSH3 0x411 JUMP JUMPDEST DUP5 PUSH3 0x44D JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x50C JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x4F3 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x497 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x53D JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x51C JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x55C JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH3 0x19C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x5AF DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x2E7 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH3 0x447 JUMPI PUSH1 0x0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x1404 PUSH3 0x643 PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0xBD1 ADD MSTORE PUSH1 0x0 PUSH2 0xBA4 ADD MSTORE PUSH1 0x0 PUSH2 0xB4C ADD MSTORE PUSH1 0x0 PUSH2 0xB24 ADD MSTORE PUSH1 0x0 PUSH2 0xA7F ADD MSTORE PUSH1 0x0 PUSH2 0xAA9 ADD MSTORE PUSH1 0x0 PUSH2 0xAD3 ADD MSTORE PUSH2 0x1404 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1E9 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x20F JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x224 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x14D JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x160 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x118 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x13B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x102 PUSH2 0x25D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x1005 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12B PUSH2 0x126 CALLDATASIZE PUSH1 0x4 PUSH2 0x103B JUMP JUMPDEST PUSH2 0x2EF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10F JUMP JUMPDEST PUSH1 0x5 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10F JUMP JUMPDEST PUSH2 0x12B PUSH2 0x15B CALLDATASIZE PUSH1 0x4 PUSH2 0x1065 JUMP JUMPDEST PUSH2 0x306 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10F JUMP JUMPDEST PUSH2 0x13F PUSH2 0x3CA JUMP JUMPDEST PUSH2 0x12B PUSH2 0x185 CALLDATASIZE PUSH1 0x4 PUSH2 0x103B JUMP JUMPDEST PUSH2 0x3D9 JUMP JUMPDEST PUSH2 0x13F PUSH2 0x198 CALLDATASIZE PUSH1 0x4 PUSH2 0x10A1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x13F PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x10A1 JUMP JUMPDEST PUSH2 0x415 JUMP JUMPDEST PUSH2 0x1CE PUSH2 0x433 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x10BC JUMP JUMPDEST PUSH2 0x102 PUSH2 0x495 JUMP JUMPDEST PUSH2 0x12B PUSH2 0x1F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x103B JUMP JUMPDEST PUSH2 0x4A4 JUMP JUMPDEST PUSH2 0x12B PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0x103B JUMP JUMPDEST PUSH2 0x555 JUMP JUMPDEST PUSH2 0x222 PUSH2 0x21D CALLDATASIZE PUSH1 0x4 PUSH2 0x116E JUMP JUMPDEST PUSH2 0x562 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x13F PUSH2 0x232 CALLDATASIZE PUSH1 0x4 PUSH2 0x11E1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x6 DUP1 SLOAD PUSH2 0x26C SWAP1 PUSH2 0x1214 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x298 SWAP1 PUSH2 0x1214 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2E5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2BA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2E5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2C8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FC CALLER DUP5 DUP5 PUSH2 0x702 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x313 DUP5 DUP5 DUP5 PUSH2 0x85A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x3B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6C6F77616E6365000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3BF DUP6 CALLER DUP6 DUP5 SUB PUSH2 0x702 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D4 PUSH2 0xA72 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 PUSH2 0x2FC SWAP2 DUP6 SWAP1 PUSH2 0x410 SWAP1 DUP7 SWAP1 PUSH2 0x124E JUMP JUMPDEST PUSH2 0x702 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x300 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH2 0x447 PUSH2 0xB9D JUMP JUMPDEST PUSH2 0x44F PUSH2 0xBCA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH32 0xF00000000000000000000000000000000000000000000000000000000000000 SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x7 DUP1 SLOAD PUSH2 0x26C SWAP1 PUSH2 0x1214 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x53E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A9 JUMP JUMPDEST PUSH2 0x54B CALLER DUP6 DUP6 DUP5 SUB PUSH2 0x702 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FC CALLER DUP5 DUP5 PUSH2 0x85A JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x59F JUMPI PUSH1 0x40 MLOAD PUSH32 0x6279130200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3A9 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x5EC DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x647 DUP3 PUSH2 0xBF7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x657 DUP3 DUP8 DUP8 DUP8 PUSH2 0xC3F JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4B800E4600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP12 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x3A9 JUMP JUMPDEST PUSH2 0x6C2 DUP11 DUP11 DUP11 PUSH2 0x702 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH2 0x6EA JUMPI PUSH2 0x6E3 DUP4 PUSH2 0xC6D JUMP JUMPDEST SWAP1 POP PUSH2 0x300 JUMP JUMPDEST DUP2 PUSH2 0x6F5 DUP5 DUP3 PUSH2 0x12D4 JUMP JUMPDEST POP PUSH1 0xFF SWAP1 POP PUSH2 0x300 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x77D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x7F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x8D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x952 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x9E1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xA18 SWAP1 DUP5 SWAP1 PUSH2 0x124E JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA64 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0xACB JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0xAF5 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3D4 PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3D4 PUSH32 0x0 PUSH1 0x0 PUSH2 0xCC4 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3D4 PUSH32 0x0 PUSH1 0x1 PUSH2 0xCC4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x300 PUSH2 0xC04 PUSH2 0xA72 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0xC51 DUP9 DUP9 DUP9 DUP9 PUSH2 0xD68 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0xC61 DUP3 DUP3 PUSH2 0xE37 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH2 0xCB1 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x305A27A900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A9 SWAP2 SWAP1 PUSH2 0x1005 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xCBC DUP3 PUSH2 0x1394 JUMP JUMPDEST OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0xCD7 JUMPI PUSH2 0x6E3 DUP4 PUSH2 0xF3F JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0xCE3 SWAP1 PUSH2 0x1214 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xD0F SWAP1 PUSH2 0x1214 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD5C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD31 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xD5C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD3F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x300 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0xDA3 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0xE2D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDF7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xE23 JUMPI POP PUSH1 0x0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0xE2D JUMP JUMPDEST SWAP3 POP PUSH1 0x0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xE4B JUMPI PUSH2 0xE4B PUSH2 0x13B8 JUMP JUMPDEST SUB PUSH2 0xE54 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xE68 JUMPI PUSH2 0xE68 PUSH2 0x13B8 JUMP JUMPDEST SUB PUSH2 0xE9F JUMPI PUSH1 0x40 MLOAD PUSH32 0xF645EEDF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xEB3 JUMPI PUSH2 0xEB3 PUSH2 0x13B8 JUMP JUMPDEST SUB PUSH2 0xEED JUMPI PUSH1 0x40 MLOAD PUSH32 0xFCE698F700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3A9 JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xF01 JUMPI PUSH2 0xF01 PUSH2 0x13B8 JUMP JUMPDEST SUB PUSH2 0xF3B JUMPI PUSH1 0x40 MLOAD PUSH32 0xD78BCE0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3A9 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xF4C DUP4 PUSH2 0xF7E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x300 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB3512B0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xFE5 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xFC9 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1018 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xFBF JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1036 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x104E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1057 DUP4 PUSH2 0x101F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x107A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1083 DUP5 PUSH2 0x101F JUMP JUMPDEST SWAP3 POP PUSH2 0x1091 PUSH1 0x20 DUP6 ADD PUSH2 0x101F JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1018 DUP3 PUSH2 0x101F JUMP JUMPDEST PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP9 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0xE0 DUP2 DUP5 ADD MSTORE PUSH2 0x10F8 PUSH1 0xE0 DUP5 ADD DUP11 PUSH2 0xFBF JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x110A DUP2 DUP11 PUSH2 0xFBF JUMP JUMPDEST PUSH1 0x60 DUP6 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD DUP8 SWAP1 MSTORE DUP5 DUP2 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE DUP4 DUP8 ADD SWAP3 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x115C JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1140 JUMP JUMPDEST POP SWAP1 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x1189 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1192 DUP9 PUSH2 0x101F JUMP JUMPDEST SWAP7 POP PUSH2 0x11A0 PUSH1 0x20 DUP10 ADD PUSH2 0x101F JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x11C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x11F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11FD DUP4 PUSH2 0x101F JUMP JUMPDEST SWAP2 POP PUSH2 0x120B PUSH1 0x20 DUP5 ADD PUSH2 0x101F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1228 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1248 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x300 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x12CF JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x12AC JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x12CB JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x12B8 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12EE JUMPI PUSH2 0x12EE PUSH2 0x126F JUMP JUMPDEST PUSH2 0x1302 DUP2 PUSH2 0x12FC DUP5 SLOAD PUSH2 0x1214 JUMP JUMPDEST DUP5 PUSH2 0x1285 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x1337 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x131F JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x12CB JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1366 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x1347 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x1384 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x1248 JUMPI PUSH1 0x0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 0xDF DUP13 0xEF 0xAA DUP6 0xC6 ISZERO SWAP8 PUSH4 0xA6A6465A REVERT 0xA5 0x28 SWAP1 REVERT PUSH27 0xEC68A829111B982E1E4599BC64736F6C6343000811003300000000 ","sourceMap":"246:5958:3:-:0;;;968:233;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1087:5;3376:440:2;;;;;;;;;;;;;-1:-1:-1;;;3376:440:2;;;3450:45;3481:13;3450:4;:30;;;;;;:45;;;;:::i;:::-;3442:53;;3517:51;:7;3551:16;3517:33;;;;;;;:51;;:::i;:::-;3506:62;;3593:22;;;;;;;;;;3579:36;;3643:25;;;;;;3626:42;;3698:13;3681:30;;3747:23;4297:11;;4310:14;;4275:80;;;2099:95;4275:80;;;4581:25:18;4622:18;;;4615:34;;;;4665:18;;;4658:34;4326:13:2;4708:18:18;;;4701:34;4349:4:2;4751:19:18;;;4744:61;4238:7:2;;4553:19:18;;4275:80:2;;;;;;;;;;;;4265:91;;;;;;4258:98;;4183:181;;3747:23;3722:48;;-1:-1:-1;;3803:4:2;3781:27;;1110:5:3::1;:13;1118:5:::0;1110;:13:::1;:::i;:::-;-1:-1:-1::0;1134:7:3::1;:17;1144:7:::0;1134;:17:::1;:::i;:::-;-1:-1:-1::0;1162:31:3::1;1168:10;1180:12:::0;1162:5:::1;:31::i;:::-;968:233:::0;;;246:5958;;2973:347:14;3069:11;3119:2;3103:5;3097:19;:24;3093:220;;;3145:20;3159:5;3145:13;:20::i;:::-;3138:27;;;;3093:220;3239:5;3198:32;3224:5;3198:25;;;;;:32;;:::i;:::-;:38;:46;;:38;:46;:::i;:::-;-1:-1:-1;1430:66:14;;-1:-1:-1;3093:220:14;2973:347;;;;:::o;4352:276:3:-;-1:-1:-1;;;;;4436:21:3;;4428:65;;;;-1:-1:-1;;;4428:65:3;;5018:2:18;4428:65:3;;;5000:21:18;5057:2;5037:18;;;5030:30;5096:33;5076:18;;;5069:61;5147:18;;4428:65:3;;;;;;;;;4522:6;4506:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;4539:18:3;;;;;;:9;:18;;;;;:28;;4561:6;;4539:18;:28;;4561:6;;4539:28;:::i;:::-;;;;-1:-1:-1;;4583:37:3;;5549:25:18;;;-1:-1:-1;;;;;4583:37:3;;;4600:1;;4583:37;;5537:2:18;5522:18;4583:37:3;;;;;;;4352:276;;:::o;1758:292:14:-;1823:11;1847:17;1873:3;1847:30;;1906:2;1892:4;:11;:16;1888:74;;;1946:3;1932:18;;-1:-1:-1;;;1932:18:14;;;;;;;;:::i;1888:74::-;2029:11;;2012:13;2029:4;2012:13;:::i;:::-;2004:36;;1758:292;-1:-1:-1;;;1758:292:14:o;3586:179:16:-;3737:10;3586:179::o;14:127:18:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:250;231:1;241:113;255:6;252:1;249:13;241:113;;;331:11;;;325:18;312:11;;;305:39;277:2;270:10;241:113;;;-1:-1:-1;;388:1:18;370:16;;363:27;146:250::o;401:699::-;455:5;508:3;501:4;493:6;489:17;485:27;475:55;;526:1;523;516:12;475:55;549:13;;-1:-1:-1;;;;;611:10:18;;;608:36;;;624:18;;:::i;:::-;699:2;693:9;667:2;753:13;;-1:-1:-1;;749:22:18;;;773:2;745:31;741:40;729:53;;;797:18;;;817:22;;;794:46;791:72;;;843:18;;:::i;:::-;883:10;879:2;872:22;918:2;910:6;903:18;964:3;957:4;952:2;944:6;940:15;936:26;933:35;930:55;;;981:1;978;971:12;930:55;994:76;1067:2;1060:4;1052:6;1048:17;1041:4;1033:6;1029:17;994:76;:::i;:::-;1088:6;401:699;-1:-1:-1;;;;;;401:699:18:o;1105:623::-;1213:6;1221;1229;1282:2;1270:9;1261:7;1257:23;1253:32;1250:52;;;1298:1;1295;1288:12;1250:52;1325:16;;-1:-1:-1;;;;;1390:14:18;;;1387:34;;;1417:1;1414;1407:12;1387:34;1440:61;1493:7;1484:6;1473:9;1469:22;1440:61;:::i;:::-;1430:71;;1547:2;1536:9;1532:18;1526:25;1510:41;;1576:2;1566:8;1563:16;1560:36;;;1592:1;1589;1582:12;1560:36;;1615:63;1670:7;1659:8;1648:9;1644:24;1615:63;:::i;:::-;1605:73;;;1718:2;1707:9;1703:18;1697:25;1687:35;;1105:623;;;;;:::o;1733:380::-;1812:1;1808:12;;;;1855;;;1876:61;;1930:4;1922:6;1918:17;1908:27;;1876:61;1983:2;1975:6;1972:14;1952:18;1949:38;1946:161;;2029:10;2024:3;2020:20;2017:1;2010:31;2064:4;2061:1;2054:15;2092:4;2089:1;2082:15;1946:161;;1733:380;;;:::o;2244:545::-;2346:2;2341:3;2338:11;2335:448;;;2382:1;2407:5;2403:2;2396:17;2452:4;2448:2;2438:19;2522:2;2510:10;2506:19;2503:1;2499:27;2493:4;2489:38;2558:4;2546:10;2543:20;2540:47;;;-1:-1:-1;2581:4:18;2540:47;2636:2;2631:3;2627:12;2624:1;2620:20;2614:4;2610:31;2600:41;;2691:82;2709:2;2702:5;2699:13;2691:82;;;2754:17;;;2735:1;2724:13;2691:82;;;2695:3;;;2335:448;2244:545;;;:::o;2965:1352::-;3085:10;;-1:-1:-1;;;;;3107:30:18;;3104:56;;;3140:18;;:::i;:::-;3169:97;3259:6;3219:38;3251:4;3245:11;3219:38;:::i;:::-;3213:4;3169:97;:::i;:::-;3321:4;;3385:2;3374:14;;3402:1;3397:663;;;;4104:1;4121:6;4118:89;;;-1:-1:-1;4173:19:18;;;4167:26;4118:89;-1:-1:-1;;2922:1:18;2918:11;;;2914:24;2910:29;2900:40;2946:1;2942:11;;;2897:57;4220:81;;3367:944;;3397:663;2191:1;2184:14;;;2228:4;2215:18;;-1:-1:-1;;3433:20:18;;;3551:236;3565:7;3562:1;3559:14;3551:236;;;3654:19;;;3648:26;3633:42;;3746:27;;;;3714:1;3702:14;;;;3581:19;;3551:236;;;3555:3;3815:6;3806:7;3803:19;3800:201;;;3876:19;;;3870:26;-1:-1:-1;;3959:1:18;3955:14;;;3971:3;3951:24;3947:37;3943:42;3928:58;3913:74;;3800:201;-1:-1:-1;;;;;4047:1:18;4031:14;;;4027:22;4014:36;;-1:-1:-1;2965:1352:18:o;5176:222::-;5241:9;;;5262:10;;;5259:133;;;5314:10;5309:3;5305:20;5302:1;5295:31;5349:4;5346:1;5339:15;5377:4;5374:1;5367:15;5585:396;5734:2;5723:9;5716:21;5697:4;5766:6;5760:13;5809:6;5804:2;5793:9;5789:18;5782:34;5825:79;5897:6;5892:2;5881:9;5877:18;5872:2;5864:6;5860:15;5825:79;:::i;:::-;5965:2;5944:15;-1:-1:-1;;5940:29:18;5925:45;;;;5972:2;5921:54;;5585:396;-1:-1:-1;;5585:396:18:o;5986:297::-;6104:12;;6151:4;6140:16;;;6134:23;;6104:12;6169:16;;6166:111;;;-1:-1:-1;;6243:4:18;6239:17;;;;6236:1;6232:25;6228:38;6217:50;;5986:297;-1:-1:-1;5986:297:18:o;:::-;246:5958:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DOMAIN_SEPARATOR_1418":{"entryPoint":970,"id":1418,"parameterSlots":0,"returnSlots":1},"@_EIP712Name_856":{"entryPoint":2973,"id":856,"parameterSlots":0,"returnSlots":1},"@_EIP712Version_868":{"entryPoint":3018,"id":868,"parameterSlots":0,"returnSlots":1},"@_approve_1314":{"entryPoint":1794,"id":1314,"parameterSlots":3,"returnSlots":0},"@_buildDomainSeparator_786":{"entryPoint":null,"id":786,"parameterSlots":0,"returnSlots":1},"@_domainSeparatorV4_765":{"entryPoint":2674,"id":765,"parameterSlots":0,"returnSlots":1},"@_hashTypedDataV4_802":{"entryPoint":3063,"id":802,"parameterSlots":1,"returnSlots":1},"@_throwError_641":{"entryPoint":3639,"id":641,"parameterSlots":2,"returnSlots":0},"@_transfer_1233":{"entryPoint":2138,"id":1233,"parameterSlots":3,"returnSlots":0},"@_useNonce_2740":{"entryPoint":null,"id":2740,"parameterSlots":1,"returnSlots":1},"@allowance_1085":{"entryPoint":null,"id":1085,"parameterSlots":2,"returnSlots":1},"@approve_1105":{"entryPoint":751,"id":1105,"parameterSlots":2,"returnSlots":1},"@balanceOf_1001":{"entryPoint":null,"id":1001,"parameterSlots":1,"returnSlots":1},"@byteLength_4982":{"entryPoint":3966,"id":4982,"parameterSlots":1,"returnSlots":1},"@decimals_979":{"entryPoint":null,"id":979,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_1143":{"entryPoint":1188,"id":1143,"parameterSlots":2,"returnSlots":1},"@eip712Domain_844":{"entryPoint":1075,"id":844,"parameterSlots":0,"returnSlots":7},"@getStringSlot_5326":{"entryPoint":1791,"id":5326,"parameterSlots":1,"returnSlots":1},"@increaseAllowance_1169":{"entryPoint":985,"id":1169,"parameterSlots":2,"returnSlots":1},"@name_961":{"entryPoint":605,"id":961,"parameterSlots":0,"returnSlots":1},"@nonces_1408":{"entryPoint":1045,"id":1408,"parameterSlots":1,"returnSlots":1},"@nonces_2725":{"entryPoint":null,"id":2725,"parameterSlots":1,"returnSlots":1},"@permit_1391":{"entryPoint":1378,"id":1391,"parameterSlots":7,"returnSlots":0},"@recover_592":{"entryPoint":3135,"id":592,"parameterSlots":4,"returnSlots":1},"@symbol_970":{"entryPoint":1173,"id":970,"parameterSlots":0,"returnSlots":1},"@toShortStringWithFallback_5022":{"entryPoint":1742,"id":5022,"parameterSlots":2,"returnSlots":1},"@toShortString_4924":{"entryPoint":3181,"id":4924,"parameterSlots":1,"returnSlots":1},"@toStringWithFallback_5049":{"entryPoint":3268,"id":5049,"parameterSlots":2,"returnSlots":1},"@toString_4950":{"entryPoint":3903,"id":4950,"parameterSlots":1,"returnSlots":1},"@toTypedDataHash_2697":{"entryPoint":null,"id":2697,"parameterSlots":2,"returnSlots":1},"@totalSupply_988":{"entryPoint":null,"id":988,"parameterSlots":0,"returnSlots":1},"@transferFrom_1048":{"entryPoint":774,"id":1048,"parameterSlots":3,"returnSlots":1},"@transfer_1068":{"entryPoint":1365,"id":1068,"parameterSlots":2,"returnSlots":1},"@tryRecover_556":{"entryPoint":3432,"id":556,"parameterSlots":4,"returnSlots":3},"abi_decode_address":{"entryPoint":4127,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":4257,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":4577,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":4197,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32":{"entryPoint":4462,"id":null,"parameterSlots":2,"returnSlots":7},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":4155,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_string":{"entryPoint":4031,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":4284,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4101,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":4686,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":4741,"id":null,"parameterSlots":3,"returnSlots":0},"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32":{"entryPoint":5012,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":4820,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":4628,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x21":{"entryPoint":5048,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":4719,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:13017:18","statements":[{"nodeType":"YulBlock","src":"6:3:18","statements":[]},{"body":{"nodeType":"YulBlock","src":"64:373:18","statements":[{"nodeType":"YulVariableDeclaration","src":"74:26:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"94:5:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"88:5:18"},"nodeType":"YulFunctionCall","src":"88:12:18"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"78:6:18","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"116:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"121:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"109:6:18"},"nodeType":"YulFunctionCall","src":"109:19:18"},"nodeType":"YulExpressionStatement","src":"109:19:18"},{"nodeType":"YulVariableDeclaration","src":"137:10:18","value":{"kind":"number","nodeType":"YulLiteral","src":"146:1:18","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"141:1:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"208:110:18","statements":[{"nodeType":"YulVariableDeclaration","src":"222:14:18","value":{"kind":"number","nodeType":"YulLiteral","src":"232:4:18","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"226:2:18","type":""}]},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"264:3:18"},{"name":"i","nodeType":"YulIdentifier","src":"269:1:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"260:3:18"},"nodeType":"YulFunctionCall","src":"260:11:18"},{"name":"_1","nodeType":"YulIdentifier","src":"273:2:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"256:3:18"},"nodeType":"YulFunctionCall","src":"256:20:18"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"292:5:18"},{"name":"i","nodeType":"YulIdentifier","src":"299:1:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"288:3:18"},"nodeType":"YulFunctionCall","src":"288:13:18"},{"name":"_1","nodeType":"YulIdentifier","src":"303:2:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"284:3:18"},"nodeType":"YulFunctionCall","src":"284:22:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"278:5:18"},"nodeType":"YulFunctionCall","src":"278:29:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"249:6:18"},"nodeType":"YulFunctionCall","src":"249:59:18"},"nodeType":"YulExpressionStatement","src":"249:59:18"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"167:1:18"},{"name":"length","nodeType":"YulIdentifier","src":"170:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"164:2:18"},"nodeType":"YulFunctionCall","src":"164:13:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"178:21:18","statements":[{"nodeType":"YulAssignment","src":"180:17:18","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"189:1:18"},{"kind":"number","nodeType":"YulLiteral","src":"192:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"185:3:18"},"nodeType":"YulFunctionCall","src":"185:12:18"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"180:1:18"}]}]},"pre":{"nodeType":"YulBlock","src":"160:3:18","statements":[]},"src":"156:162:18"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"342:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"347:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"338:3:18"},"nodeType":"YulFunctionCall","src":"338:16:18"},{"kind":"number","nodeType":"YulLiteral","src":"356:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"334:3:18"},"nodeType":"YulFunctionCall","src":"334:27:18"},{"kind":"number","nodeType":"YulLiteral","src":"363:1:18","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"327:6:18"},"nodeType":"YulFunctionCall","src":"327:38:18"},"nodeType":"YulExpressionStatement","src":"327:38:18"},{"nodeType":"YulAssignment","src":"374:57:18","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"389:3:18"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"402:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"410:2:18","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"398:3:18"},"nodeType":"YulFunctionCall","src":"398:15:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"419:2:18","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"415:3:18"},"nodeType":"YulFunctionCall","src":"415:7:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"394:3:18"},"nodeType":"YulFunctionCall","src":"394:29:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"385:3:18"},"nodeType":"YulFunctionCall","src":"385:39:18"},{"kind":"number","nodeType":"YulLiteral","src":"426:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"381:3:18"},"nodeType":"YulFunctionCall","src":"381:50:18"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"374:3:18"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"41:5:18","type":""},{"name":"pos","nodeType":"YulTypedName","src":"48:3:18","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"56:3:18","type":""}],"src":"14:423:18"},{"body":{"nodeType":"YulBlock","src":"563:99:18","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"580:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"591:2:18","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"573:6:18"},"nodeType":"YulFunctionCall","src":"573:21:18"},"nodeType":"YulExpressionStatement","src":"573:21:18"},{"nodeType":"YulAssignment","src":"603:53:18","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"629:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"641:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"652:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"637:3:18"},"nodeType":"YulFunctionCall","src":"637:18:18"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"611:17:18"},"nodeType":"YulFunctionCall","src":"611:45:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"603:4:18"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"532:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"543:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"554:4:18","type":""}],"src":"442:220:18"},{"body":{"nodeType":"YulBlock","src":"716:147:18","statements":[{"nodeType":"YulAssignment","src":"726:29:18","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"748:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"735:12:18"},"nodeType":"YulFunctionCall","src":"735:20:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"726:5:18"}]},{"body":{"nodeType":"YulBlock","src":"841:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"850:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"853:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"843:6:18"},"nodeType":"YulFunctionCall","src":"843:12:18"},"nodeType":"YulExpressionStatement","src":"843:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"777:5:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"788:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"795:42:18","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"784:3:18"},"nodeType":"YulFunctionCall","src":"784:54:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"774:2:18"},"nodeType":"YulFunctionCall","src":"774:65:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"767:6:18"},"nodeType":"YulFunctionCall","src":"767:73:18"},"nodeType":"YulIf","src":"764:93:18"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"695:6:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"706:5:18","type":""}],"src":"667:196:18"},{"body":{"nodeType":"YulBlock","src":"955:167:18","statements":[{"body":{"nodeType":"YulBlock","src":"1001:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1010:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1013:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1003:6:18"},"nodeType":"YulFunctionCall","src":"1003:12:18"},"nodeType":"YulExpressionStatement","src":"1003:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"976:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"985:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"972:3:18"},"nodeType":"YulFunctionCall","src":"972:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"997:2:18","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"968:3:18"},"nodeType":"YulFunctionCall","src":"968:32:18"},"nodeType":"YulIf","src":"965:52:18"},{"nodeType":"YulAssignment","src":"1026:39:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1055:9:18"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1036:18:18"},"nodeType":"YulFunctionCall","src":"1036:29:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1026:6:18"}]},{"nodeType":"YulAssignment","src":"1074:42:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1101:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"1112:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1097:3:18"},"nodeType":"YulFunctionCall","src":"1097:18:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1084:12:18"},"nodeType":"YulFunctionCall","src":"1084:32:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1074:6:18"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"913:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"924:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"936:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"944:6:18","type":""}],"src":"868:254:18"},{"body":{"nodeType":"YulBlock","src":"1222:92:18","statements":[{"nodeType":"YulAssignment","src":"1232:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1244:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"1255:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1240:3:18"},"nodeType":"YulFunctionCall","src":"1240:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1232:4:18"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1274:9:18"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1299:6:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1292:6:18"},"nodeType":"YulFunctionCall","src":"1292:14:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1285:6:18"},"nodeType":"YulFunctionCall","src":"1285:22:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1267:6:18"},"nodeType":"YulFunctionCall","src":"1267:41:18"},"nodeType":"YulExpressionStatement","src":"1267:41:18"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1191:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1202:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1213:4:18","type":""}],"src":"1127:187:18"},{"body":{"nodeType":"YulBlock","src":"1420:76:18","statements":[{"nodeType":"YulAssignment","src":"1430:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1442:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"1453:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1438:3:18"},"nodeType":"YulFunctionCall","src":"1438:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1430:4:18"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1472:9:18"},{"name":"value0","nodeType":"YulIdentifier","src":"1483:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1465:6:18"},"nodeType":"YulFunctionCall","src":"1465:25:18"},"nodeType":"YulExpressionStatement","src":"1465:25:18"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1389:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1400:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1411:4:18","type":""}],"src":"1319:177:18"},{"body":{"nodeType":"YulBlock","src":"1605:224:18","statements":[{"body":{"nodeType":"YulBlock","src":"1651:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1660:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1663:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1653:6:18"},"nodeType":"YulFunctionCall","src":"1653:12:18"},"nodeType":"YulExpressionStatement","src":"1653:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1626:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"1635:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1622:3:18"},"nodeType":"YulFunctionCall","src":"1622:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"1647:2:18","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1618:3:18"},"nodeType":"YulFunctionCall","src":"1618:32:18"},"nodeType":"YulIf","src":"1615:52:18"},{"nodeType":"YulAssignment","src":"1676:39:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1705:9:18"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1686:18:18"},"nodeType":"YulFunctionCall","src":"1686:29:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1676:6:18"}]},{"nodeType":"YulAssignment","src":"1724:48:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1757:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"1768:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1753:3:18"},"nodeType":"YulFunctionCall","src":"1753:18:18"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1734:18:18"},"nodeType":"YulFunctionCall","src":"1734:38:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1724:6:18"}]},{"nodeType":"YulAssignment","src":"1781:42:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1808:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"1819:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1804:3:18"},"nodeType":"YulFunctionCall","src":"1804:18:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1791:12:18"},"nodeType":"YulFunctionCall","src":"1791:32:18"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1781:6:18"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1555:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1566:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1578:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1586:6:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1594:6:18","type":""}],"src":"1501:328:18"},{"body":{"nodeType":"YulBlock","src":"1931:87:18","statements":[{"nodeType":"YulAssignment","src":"1941:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1953:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"1964:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1949:3:18"},"nodeType":"YulFunctionCall","src":"1949:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1941:4:18"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1983:9:18"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1998:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"2006:4:18","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1994:3:18"},"nodeType":"YulFunctionCall","src":"1994:17:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1976:6:18"},"nodeType":"YulFunctionCall","src":"1976:36:18"},"nodeType":"YulExpressionStatement","src":"1976:36:18"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1900:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1911:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1922:4:18","type":""}],"src":"1834:184:18"},{"body":{"nodeType":"YulBlock","src":"2124:76:18","statements":[{"nodeType":"YulAssignment","src":"2134:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2146:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"2157:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2142:3:18"},"nodeType":"YulFunctionCall","src":"2142:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2134:4:18"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2176:9:18"},{"name":"value0","nodeType":"YulIdentifier","src":"2187:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2169:6:18"},"nodeType":"YulFunctionCall","src":"2169:25:18"},"nodeType":"YulExpressionStatement","src":"2169:25:18"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2093:9:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2104:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2115:4:18","type":""}],"src":"2023:177:18"},{"body":{"nodeType":"YulBlock","src":"2275:116:18","statements":[{"body":{"nodeType":"YulBlock","src":"2321:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2330:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2333:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2323:6:18"},"nodeType":"YulFunctionCall","src":"2323:12:18"},"nodeType":"YulExpressionStatement","src":"2323:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2296:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"2305:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2292:3:18"},"nodeType":"YulFunctionCall","src":"2292:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"2317:2:18","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2288:3:18"},"nodeType":"YulFunctionCall","src":"2288:32:18"},"nodeType":"YulIf","src":"2285:52:18"},{"nodeType":"YulAssignment","src":"2346:39:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2375:9:18"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2356:18:18"},"nodeType":"YulFunctionCall","src":"2356:29:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2346:6:18"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2241:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2252:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2264:6:18","type":""}],"src":"2205:186:18"},{"body":{"nodeType":"YulBlock","src":"2753:978:18","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2770:9:18"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2785:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"2793:66:18","type":"","value":"0xff00000000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2781:3:18"},"nodeType":"YulFunctionCall","src":"2781:79:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2763:6:18"},"nodeType":"YulFunctionCall","src":"2763:98:18"},"nodeType":"YulExpressionStatement","src":"2763:98:18"},{"nodeType":"YulVariableDeclaration","src":"2870:12:18","value":{"kind":"number","nodeType":"YulLiteral","src":"2880:2:18","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2874:2:18","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2902:9:18"},{"name":"_1","nodeType":"YulIdentifier","src":"2913:2:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2898:3:18"},"nodeType":"YulFunctionCall","src":"2898:18:18"},{"kind":"number","nodeType":"YulLiteral","src":"2918:3:18","type":"","value":"224"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2891:6:18"},"nodeType":"YulFunctionCall","src":"2891:31:18"},"nodeType":"YulExpressionStatement","src":"2891:31:18"},{"nodeType":"YulVariableDeclaration","src":"2931:60:18","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2963:6:18"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2975:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"2986:3:18","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2971:3:18"},"nodeType":"YulFunctionCall","src":"2971:19:18"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"2945:17:18"},"nodeType":"YulFunctionCall","src":"2945:46:18"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"2935:6:18","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3011:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"3022:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3007:3:18"},"nodeType":"YulFunctionCall","src":"3007:18:18"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"3031:6:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"3039:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3027:3:18"},"nodeType":"YulFunctionCall","src":"3027:22:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3000:6:18"},"nodeType":"YulFunctionCall","src":"3000:50:18"},"nodeType":"YulExpressionStatement","src":"3000:50:18"},{"nodeType":"YulVariableDeclaration","src":"3059:47:18","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"3091:6:18"},{"name":"tail_1","nodeType":"YulIdentifier","src":"3099:6:18"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"3073:17:18"},"nodeType":"YulFunctionCall","src":"3073:33:18"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"3063:6:18","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3126:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"3137:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3122:3:18"},"nodeType":"YulFunctionCall","src":"3122:18:18"},{"name":"value3","nodeType":"YulIdentifier","src":"3142:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3115:6:18"},"nodeType":"YulFunctionCall","src":"3115:34:18"},"nodeType":"YulExpressionStatement","src":"3115:34:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3169:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"3180:3:18","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3165:3:18"},"nodeType":"YulFunctionCall","src":"3165:19:18"},{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"3190:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"3198:42:18","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3186:3:18"},"nodeType":"YulFunctionCall","src":"3186:55:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3158:6:18"},"nodeType":"YulFunctionCall","src":"3158:84:18"},"nodeType":"YulExpressionStatement","src":"3158:84:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3262:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"3273:3:18","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3258:3:18"},"nodeType":"YulFunctionCall","src":"3258:19:18"},{"name":"value5","nodeType":"YulIdentifier","src":"3279:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3251:6:18"},"nodeType":"YulFunctionCall","src":"3251:35:18"},"nodeType":"YulExpressionStatement","src":"3251:35:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3306:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"3317:3:18","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3302:3:18"},"nodeType":"YulFunctionCall","src":"3302:19:18"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"3327:6:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"3335:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3323:3:18"},"nodeType":"YulFunctionCall","src":"3323:22:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3295:6:18"},"nodeType":"YulFunctionCall","src":"3295:51:18"},"nodeType":"YulExpressionStatement","src":"3295:51:18"},{"nodeType":"YulVariableDeclaration","src":"3355:17:18","value":{"name":"tail_2","nodeType":"YulIdentifier","src":"3366:6:18"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"3359:3:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3381:27:18","value":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"3401:6:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3395:5:18"},"nodeType":"YulFunctionCall","src":"3395:13:18"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3385:6:18","type":""}]},{"expression":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"3424:6:18"},{"name":"length","nodeType":"YulIdentifier","src":"3432:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3417:6:18"},"nodeType":"YulFunctionCall","src":"3417:22:18"},"nodeType":"YulExpressionStatement","src":"3417:22:18"},{"nodeType":"YulAssignment","src":"3448:22:18","value":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"3459:6:18"},{"name":"_1","nodeType":"YulIdentifier","src":"3467:2:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3455:3:18"},"nodeType":"YulFunctionCall","src":"3455:15:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3448:3:18"}]},{"nodeType":"YulVariableDeclaration","src":"3479:29:18","value":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"3497:6:18"},{"name":"_1","nodeType":"YulIdentifier","src":"3505:2:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3493:3:18"},"nodeType":"YulFunctionCall","src":"3493:15:18"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"3483:6:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3517:10:18","value":{"kind":"number","nodeType":"YulLiteral","src":"3526:1:18","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3521:1:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"3585:120:18","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3606:3:18"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3617:6:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3611:5:18"},"nodeType":"YulFunctionCall","src":"3611:13:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3599:6:18"},"nodeType":"YulFunctionCall","src":"3599:26:18"},"nodeType":"YulExpressionStatement","src":"3599:26:18"},{"nodeType":"YulAssignment","src":"3638:19:18","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3649:3:18"},{"name":"_1","nodeType":"YulIdentifier","src":"3654:2:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3645:3:18"},"nodeType":"YulFunctionCall","src":"3645:12:18"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3638:3:18"}]},{"nodeType":"YulAssignment","src":"3670:25:18","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3684:6:18"},{"name":"_1","nodeType":"YulIdentifier","src":"3692:2:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3680:3:18"},"nodeType":"YulFunctionCall","src":"3680:15:18"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3670:6:18"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3547:1:18"},{"name":"length","nodeType":"YulIdentifier","src":"3550:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3544:2:18"},"nodeType":"YulFunctionCall","src":"3544:13:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3558:18:18","statements":[{"nodeType":"YulAssignment","src":"3560:14:18","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3569:1:18"},{"kind":"number","nodeType":"YulLiteral","src":"3572:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3565:3:18"},"nodeType":"YulFunctionCall","src":"3565:9:18"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3560:1:18"}]}]},"pre":{"nodeType":"YulBlock","src":"3540:3:18","statements":[]},"src":"3536:169:18"},{"nodeType":"YulAssignment","src":"3714:11:18","value":{"name":"pos","nodeType":"YulIdentifier","src":"3722:3:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3714:4:18"}]}]},"name":"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2674:9:18","type":""},{"name":"value6","nodeType":"YulTypedName","src":"2685:6:18","type":""},{"name":"value5","nodeType":"YulTypedName","src":"2693:6:18","type":""},{"name":"value4","nodeType":"YulTypedName","src":"2701:6:18","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2709:6:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2717:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2725:6:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2733:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2744:4:18","type":""}],"src":"2396:1335:18"},{"body":{"nodeType":"YulBlock","src":"3906:523:18","statements":[{"body":{"nodeType":"YulBlock","src":"3953:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3962:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3965:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3955:6:18"},"nodeType":"YulFunctionCall","src":"3955:12:18"},"nodeType":"YulExpressionStatement","src":"3955:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3927:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"3936:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3923:3:18"},"nodeType":"YulFunctionCall","src":"3923:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"3948:3:18","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3919:3:18"},"nodeType":"YulFunctionCall","src":"3919:33:18"},"nodeType":"YulIf","src":"3916:53:18"},{"nodeType":"YulAssignment","src":"3978:39:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4007:9:18"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3988:18:18"},"nodeType":"YulFunctionCall","src":"3988:29:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3978:6:18"}]},{"nodeType":"YulAssignment","src":"4026:48:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4059:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4070:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4055:3:18"},"nodeType":"YulFunctionCall","src":"4055:18:18"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4036:18:18"},"nodeType":"YulFunctionCall","src":"4036:38:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4026:6:18"}]},{"nodeType":"YulAssignment","src":"4083:42:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4110:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4121:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4106:3:18"},"nodeType":"YulFunctionCall","src":"4106:18:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4093:12:18"},"nodeType":"YulFunctionCall","src":"4093:32:18"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4083:6:18"}]},{"nodeType":"YulAssignment","src":"4134:42:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4161:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4172:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4157:3:18"},"nodeType":"YulFunctionCall","src":"4157:18:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4144:12:18"},"nodeType":"YulFunctionCall","src":"4144:32:18"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4134:6:18"}]},{"nodeType":"YulVariableDeclaration","src":"4185:46:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4215:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4226:3:18","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4211:3:18"},"nodeType":"YulFunctionCall","src":"4211:19:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4198:12:18"},"nodeType":"YulFunctionCall","src":"4198:33:18"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4189:5:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"4279:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4288:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4291:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4281:6:18"},"nodeType":"YulFunctionCall","src":"4281:12:18"},"nodeType":"YulExpressionStatement","src":"4281:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4253:5:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4264:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"4271:4:18","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4260:3:18"},"nodeType":"YulFunctionCall","src":"4260:16:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4250:2:18"},"nodeType":"YulFunctionCall","src":"4250:27:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4243:6:18"},"nodeType":"YulFunctionCall","src":"4243:35:18"},"nodeType":"YulIf","src":"4240:55:18"},{"nodeType":"YulAssignment","src":"4304:15:18","value":{"name":"value","nodeType":"YulIdentifier","src":"4314:5:18"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"4304:6:18"}]},{"nodeType":"YulAssignment","src":"4328:43:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4355:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4366:3:18","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4351:3:18"},"nodeType":"YulFunctionCall","src":"4351:19:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4338:12:18"},"nodeType":"YulFunctionCall","src":"4338:33:18"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"4328:6:18"}]},{"nodeType":"YulAssignment","src":"4380:43:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4407:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4418:3:18","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4403:3:18"},"nodeType":"YulFunctionCall","src":"4403:19:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4390:12:18"},"nodeType":"YulFunctionCall","src":"4390:33:18"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"4380:6:18"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3824:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3835:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3847:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3855:6:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3863:6:18","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3871:6:18","type":""},{"name":"value4","nodeType":"YulTypedName","src":"3879:6:18","type":""},{"name":"value5","nodeType":"YulTypedName","src":"3887:6:18","type":""},{"name":"value6","nodeType":"YulTypedName","src":"3895:6:18","type":""}],"src":"3736:693:18"},{"body":{"nodeType":"YulBlock","src":"4521:173:18","statements":[{"body":{"nodeType":"YulBlock","src":"4567:16:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4576:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4579:1:18","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4569:6:18"},"nodeType":"YulFunctionCall","src":"4569:12:18"},"nodeType":"YulExpressionStatement","src":"4569:12:18"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4542:7:18"},{"name":"headStart","nodeType":"YulIdentifier","src":"4551:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4538:3:18"},"nodeType":"YulFunctionCall","src":"4538:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"4563:2:18","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4534:3:18"},"nodeType":"YulFunctionCall","src":"4534:32:18"},"nodeType":"YulIf","src":"4531:52:18"},{"nodeType":"YulAssignment","src":"4592:39:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4621:9:18"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4602:18:18"},"nodeType":"YulFunctionCall","src":"4602:29:18"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4592:6:18"}]},{"nodeType":"YulAssignment","src":"4640:48:18","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4673:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"4684:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4669:3:18"},"nodeType":"YulFunctionCall","src":"4669:18:18"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4650:18:18"},"nodeType":"YulFunctionCall","src":"4650:38:18"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4640:6:18"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4479:9:18","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4490:7:18","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4502:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4510:6:18","type":""}],"src":"4434:260:18"},{"body":{"nodeType":"YulBlock","src":"4754:382:18","statements":[{"nodeType":"YulAssignment","src":"4764:22:18","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4778:1:18","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"4781:4:18"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4774:3:18"},"nodeType":"YulFunctionCall","src":"4774:12:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4764:6:18"}]},{"nodeType":"YulVariableDeclaration","src":"4795:38:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4825:4:18"},{"kind":"number","nodeType":"YulLiteral","src":"4831:1:18","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4821:3:18"},"nodeType":"YulFunctionCall","src":"4821:12:18"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"4799:18:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"4872:31:18","statements":[{"nodeType":"YulAssignment","src":"4874:27:18","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4888:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"4896:4:18","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4884:3:18"},"nodeType":"YulFunctionCall","src":"4884:17:18"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4874:6:18"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4852:18:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4845:6:18"},"nodeType":"YulFunctionCall","src":"4845:26:18"},"nodeType":"YulIf","src":"4842:61:18"},{"body":{"nodeType":"YulBlock","src":"4962:168:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4983:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4986:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4976:6:18"},"nodeType":"YulFunctionCall","src":"4976:88:18"},"nodeType":"YulExpressionStatement","src":"4976:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5084:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5087:4:18","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5077:6:18"},"nodeType":"YulFunctionCall","src":"5077:15:18"},"nodeType":"YulExpressionStatement","src":"5077:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5112:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5115:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5105:6:18"},"nodeType":"YulFunctionCall","src":"5105:15:18"},"nodeType":"YulExpressionStatement","src":"5105:15:18"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4918:18:18"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4941:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"4949:2:18","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4938:2:18"},"nodeType":"YulFunctionCall","src":"4938:14:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4915:2:18"},"nodeType":"YulFunctionCall","src":"4915:38:18"},"nodeType":"YulIf","src":"4912:218:18"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"4734:4:18","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"4743:6:18","type":""}],"src":"4699:437:18"},{"body":{"nodeType":"YulBlock","src":"5315:230:18","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5332:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"5343:2:18","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5325:6:18"},"nodeType":"YulFunctionCall","src":"5325:21:18"},"nodeType":"YulExpressionStatement","src":"5325:21:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5366:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"5377:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5362:3:18"},"nodeType":"YulFunctionCall","src":"5362:18:18"},{"kind":"number","nodeType":"YulLiteral","src":"5382:2:18","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5355:6:18"},"nodeType":"YulFunctionCall","src":"5355:30:18"},"nodeType":"YulExpressionStatement","src":"5355:30:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5405:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"5416:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5401:3:18"},"nodeType":"YulFunctionCall","src":"5401:18:18"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732061","kind":"string","nodeType":"YulLiteral","src":"5421:34:18","type":"","value":"ERC20: transfer amount exceeds a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5394:6:18"},"nodeType":"YulFunctionCall","src":"5394:62:18"},"nodeType":"YulExpressionStatement","src":"5394:62:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5476:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"5487:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5472:3:18"},"nodeType":"YulFunctionCall","src":"5472:18:18"},{"hexValue":"6c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"5492:10:18","type":"","value":"llowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5465:6:18"},"nodeType":"YulFunctionCall","src":"5465:38:18"},"nodeType":"YulExpressionStatement","src":"5465:38:18"},{"nodeType":"YulAssignment","src":"5512:27:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5524:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"5535:3:18","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5520:3:18"},"nodeType":"YulFunctionCall","src":"5520:19:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5512:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5292:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5306:4:18","type":""}],"src":"5141:404:18"},{"body":{"nodeType":"YulBlock","src":"5598:231:18","statements":[{"nodeType":"YulAssignment","src":"5608:16:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5619:1:18"},{"name":"y","nodeType":"YulIdentifier","src":"5622:1:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5615:3:18"},"nodeType":"YulFunctionCall","src":"5615:9:18"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"5608:3:18"}]},{"body":{"nodeType":"YulBlock","src":"5655:168:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5676:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5679:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5669:6:18"},"nodeType":"YulFunctionCall","src":"5669:88:18"},"nodeType":"YulExpressionStatement","src":"5669:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5777:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5780:4:18","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5770:6:18"},"nodeType":"YulFunctionCall","src":"5770:15:18"},"nodeType":"YulExpressionStatement","src":"5770:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5805:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5808:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5798:6:18"},"nodeType":"YulFunctionCall","src":"5798:15:18"},"nodeType":"YulExpressionStatement","src":"5798:15:18"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5639:1:18"},{"name":"sum","nodeType":"YulIdentifier","src":"5642:3:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5636:2:18"},"nodeType":"YulFunctionCall","src":"5636:10:18"},"nodeType":"YulIf","src":"5633:190:18"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5581:1:18","type":""},{"name":"y","nodeType":"YulTypedName","src":"5584:1:18","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"5590:3:18","type":""}],"src":"5550:279:18"},{"body":{"nodeType":"YulBlock","src":"5866:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5883:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5886:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5876:6:18"},"nodeType":"YulFunctionCall","src":"5876:88:18"},"nodeType":"YulExpressionStatement","src":"5876:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5980:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5983:4:18","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5973:6:18"},"nodeType":"YulFunctionCall","src":"5973:15:18"},"nodeType":"YulExpressionStatement","src":"5973:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6004:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6007:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5997:6:18"},"nodeType":"YulFunctionCall","src":"5997:15:18"},"nodeType":"YulExpressionStatement","src":"5997:15:18"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"5834:184:18"},{"body":{"nodeType":"YulBlock","src":"6197:227:18","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6214:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"6225:2:18","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6207:6:18"},"nodeType":"YulFunctionCall","src":"6207:21:18"},"nodeType":"YulExpressionStatement","src":"6207:21:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6248:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"6259:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6244:3:18"},"nodeType":"YulFunctionCall","src":"6244:18:18"},{"kind":"number","nodeType":"YulLiteral","src":"6264:2:18","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6237:6:18"},"nodeType":"YulFunctionCall","src":"6237:30:18"},"nodeType":"YulExpressionStatement","src":"6237:30:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6287:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"6298:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6283:3:18"},"nodeType":"YulFunctionCall","src":"6283:18:18"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"6303:34:18","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6276:6:18"},"nodeType":"YulFunctionCall","src":"6276:62:18"},"nodeType":"YulExpressionStatement","src":"6276:62:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6358:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"6369:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6354:3:18"},"nodeType":"YulFunctionCall","src":"6354:18:18"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"6374:7:18","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6347:6:18"},"nodeType":"YulFunctionCall","src":"6347:35:18"},"nodeType":"YulExpressionStatement","src":"6347:35:18"},{"nodeType":"YulAssignment","src":"6391:27:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6403:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"6414:3:18","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6399:3:18"},"nodeType":"YulFunctionCall","src":"6399:19:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6391:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6174:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6188:4:18","type":""}],"src":"6023:401:18"},{"body":{"nodeType":"YulBlock","src":"6670:373:18","statements":[{"nodeType":"YulAssignment","src":"6680:27:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6692:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"6703:3:18","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6688:3:18"},"nodeType":"YulFunctionCall","src":"6688:19:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6680:4:18"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6723:9:18"},{"name":"value0","nodeType":"YulIdentifier","src":"6734:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6716:6:18"},"nodeType":"YulFunctionCall","src":"6716:25:18"},"nodeType":"YulExpressionStatement","src":"6716:25:18"},{"nodeType":"YulVariableDeclaration","src":"6750:52:18","value":{"kind":"number","nodeType":"YulLiteral","src":"6760:42:18","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6754:2:18","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6822:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"6833:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6818:3:18"},"nodeType":"YulFunctionCall","src":"6818:18:18"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"6842:6:18"},{"name":"_1","nodeType":"YulIdentifier","src":"6850:2:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6838:3:18"},"nodeType":"YulFunctionCall","src":"6838:15:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6811:6:18"},"nodeType":"YulFunctionCall","src":"6811:43:18"},"nodeType":"YulExpressionStatement","src":"6811:43:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6874:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"6885:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6870:3:18"},"nodeType":"YulFunctionCall","src":"6870:18:18"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"6894:6:18"},{"name":"_1","nodeType":"YulIdentifier","src":"6902:2:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6890:3:18"},"nodeType":"YulFunctionCall","src":"6890:15:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6863:6:18"},"nodeType":"YulFunctionCall","src":"6863:43:18"},"nodeType":"YulExpressionStatement","src":"6863:43:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6926:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"6937:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6922:3:18"},"nodeType":"YulFunctionCall","src":"6922:18:18"},{"name":"value3","nodeType":"YulIdentifier","src":"6942:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6915:6:18"},"nodeType":"YulFunctionCall","src":"6915:34:18"},"nodeType":"YulExpressionStatement","src":"6915:34:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6969:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"6980:3:18","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6965:3:18"},"nodeType":"YulFunctionCall","src":"6965:19:18"},{"name":"value4","nodeType":"YulIdentifier","src":"6986:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6958:6:18"},"nodeType":"YulFunctionCall","src":"6958:35:18"},"nodeType":"YulExpressionStatement","src":"6958:35:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7013:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"7024:3:18","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7009:3:18"},"nodeType":"YulFunctionCall","src":"7009:19:18"},{"name":"value5","nodeType":"YulIdentifier","src":"7030:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7002:6:18"},"nodeType":"YulFunctionCall","src":"7002:35:18"},"nodeType":"YulExpressionStatement","src":"7002:35:18"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6599:9:18","type":""},{"name":"value5","nodeType":"YulTypedName","src":"6610:6:18","type":""},{"name":"value4","nodeType":"YulTypedName","src":"6618:6:18","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6626:6:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6634:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6642:6:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6650:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6661:4:18","type":""}],"src":"6429:614:18"},{"body":{"nodeType":"YulBlock","src":"7177:198:18","statements":[{"nodeType":"YulAssignment","src":"7187:26:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7199:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"7210:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7195:3:18"},"nodeType":"YulFunctionCall","src":"7195:18:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7187:4:18"}]},{"nodeType":"YulVariableDeclaration","src":"7222:52:18","value":{"kind":"number","nodeType":"YulLiteral","src":"7232:42:18","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7226:2:18","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7290:9:18"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7305:6:18"},{"name":"_1","nodeType":"YulIdentifier","src":"7313:2:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7301:3:18"},"nodeType":"YulFunctionCall","src":"7301:15:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7283:6:18"},"nodeType":"YulFunctionCall","src":"7283:34:18"},"nodeType":"YulExpressionStatement","src":"7283:34:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7337:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"7348:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7333:3:18"},"nodeType":"YulFunctionCall","src":"7333:18:18"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7357:6:18"},{"name":"_1","nodeType":"YulIdentifier","src":"7365:2:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7353:3:18"},"nodeType":"YulFunctionCall","src":"7353:15:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7326:6:18"},"nodeType":"YulFunctionCall","src":"7326:43:18"},"nodeType":"YulExpressionStatement","src":"7326:43:18"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7138:9:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7149:6:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7157:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7168:4:18","type":""}],"src":"7048:327:18"},{"body":{"nodeType":"YulBlock","src":"7436:65:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7453:1:18","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"7456:3:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7446:6:18"},"nodeType":"YulFunctionCall","src":"7446:14:18"},"nodeType":"YulExpressionStatement","src":"7446:14:18"},{"nodeType":"YulAssignment","src":"7469:26:18","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7487:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7490:4:18","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7477:9:18"},"nodeType":"YulFunctionCall","src":"7477:18:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"7469:4:18"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"7419:3:18","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"7427:4:18","type":""}],"src":"7380:121:18"},{"body":{"nodeType":"YulBlock","src":"7587:464:18","statements":[{"body":{"nodeType":"YulBlock","src":"7620:425:18","statements":[{"nodeType":"YulVariableDeclaration","src":"7634:11:18","value":{"kind":"number","nodeType":"YulLiteral","src":"7644:1:18","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7638:2:18","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"7665:2:18"},{"name":"array","nodeType":"YulIdentifier","src":"7669:5:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7658:6:18"},"nodeType":"YulFunctionCall","src":"7658:17:18"},"nodeType":"YulExpressionStatement","src":"7658:17:18"},{"nodeType":"YulVariableDeclaration","src":"7688:31:18","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"7710:2:18"},{"kind":"number","nodeType":"YulLiteral","src":"7714:4:18","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7700:9:18"},"nodeType":"YulFunctionCall","src":"7700:19:18"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"7692:4:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7732:57:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7755:4:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7765:1:18","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"7772:10:18"},{"kind":"number","nodeType":"YulLiteral","src":"7784:2:18","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7768:3:18"},"nodeType":"YulFunctionCall","src":"7768:19:18"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7761:3:18"},"nodeType":"YulFunctionCall","src":"7761:27:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7751:3:18"},"nodeType":"YulFunctionCall","src":"7751:38:18"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"7736:11:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"7826:23:18","statements":[{"nodeType":"YulAssignment","src":"7828:19:18","value":{"name":"data","nodeType":"YulIdentifier","src":"7843:4:18"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"7828:11:18"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"7808:10:18"},{"kind":"number","nodeType":"YulLiteral","src":"7820:4:18","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7805:2:18"},"nodeType":"YulFunctionCall","src":"7805:20:18"},"nodeType":"YulIf","src":"7802:47:18"},{"nodeType":"YulVariableDeclaration","src":"7862:41:18","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7876:4:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7886:1:18","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"7893:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"7898:2:18","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7889:3:18"},"nodeType":"YulFunctionCall","src":"7889:12:18"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7882:3:18"},"nodeType":"YulFunctionCall","src":"7882:20:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7872:3:18"},"nodeType":"YulFunctionCall","src":"7872:31:18"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"7866:2:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7916:24:18","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"7929:11:18"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"7920:5:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"8014:21:18","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"8023:5:18"},{"name":"_1","nodeType":"YulIdentifier","src":"8030:2:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8016:6:18"},"nodeType":"YulFunctionCall","src":"8016:17:18"},"nodeType":"YulExpressionStatement","src":"8016:17:18"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"7964:5:18"},{"name":"_2","nodeType":"YulIdentifier","src":"7971:2:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7961:2:18"},"nodeType":"YulFunctionCall","src":"7961:13:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7975:26:18","statements":[{"nodeType":"YulAssignment","src":"7977:22:18","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"7990:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"7997:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7986:3:18"},"nodeType":"YulFunctionCall","src":"7986:13:18"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"7977:5:18"}]}]},"pre":{"nodeType":"YulBlock","src":"7957:3:18","statements":[]},"src":"7953:82:18"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"7603:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"7608:2:18","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7600:2:18"},"nodeType":"YulFunctionCall","src":"7600:11:18"},"nodeType":"YulIf","src":"7597:448:18"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"7559:5:18","type":""},{"name":"len","nodeType":"YulTypedName","src":"7566:3:18","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"7571:10:18","type":""}],"src":"7506:545:18"},{"body":{"nodeType":"YulBlock","src":"8141:81:18","statements":[{"nodeType":"YulAssignment","src":"8151:65:18","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"8166:4:18"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8184:1:18","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"8187:3:18"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8180:3:18"},"nodeType":"YulFunctionCall","src":"8180:11:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8197:1:18","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8193:3:18"},"nodeType":"YulFunctionCall","src":"8193:6:18"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8176:3:18"},"nodeType":"YulFunctionCall","src":"8176:24:18"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8172:3:18"},"nodeType":"YulFunctionCall","src":"8172:29:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8162:3:18"},"nodeType":"YulFunctionCall","src":"8162:40:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8208:1:18","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"8211:3:18"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8204:3:18"},"nodeType":"YulFunctionCall","src":"8204:11:18"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8159:2:18"},"nodeType":"YulFunctionCall","src":"8159:57:18"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"8151:4:18"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"8118:4:18","type":""},{"name":"len","nodeType":"YulTypedName","src":"8124:3:18","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"8132:4:18","type":""}],"src":"8056:166:18"},{"body":{"nodeType":"YulBlock","src":"8323:1256:18","statements":[{"nodeType":"YulVariableDeclaration","src":"8333:24:18","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8353:3:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8347:5:18"},"nodeType":"YulFunctionCall","src":"8347:10:18"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"8337:6:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"8400:22:18","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"8402:16:18"},"nodeType":"YulFunctionCall","src":"8402:18:18"},"nodeType":"YulExpressionStatement","src":"8402:18:18"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8372:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"8380:18:18","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8369:2:18"},"nodeType":"YulFunctionCall","src":"8369:30:18"},"nodeType":"YulIf","src":"8366:56:18"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8475:4:18"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8513:4:18"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"8507:5:18"},"nodeType":"YulFunctionCall","src":"8507:11:18"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"8481:25:18"},"nodeType":"YulFunctionCall","src":"8481:38:18"},{"name":"newLen","nodeType":"YulIdentifier","src":"8521:6:18"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"8431:43:18"},"nodeType":"YulFunctionCall","src":"8431:97:18"},"nodeType":"YulExpressionStatement","src":"8431:97:18"},{"nodeType":"YulVariableDeclaration","src":"8537:18:18","value":{"kind":"number","nodeType":"YulLiteral","src":"8554:1:18","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"8541:9:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8564:23:18","value":{"kind":"number","nodeType":"YulLiteral","src":"8583:4:18","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"8568:11:18","type":""}]},{"nodeType":"YulAssignment","src":"8596:24:18","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"8609:11:18"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"8596:9:18"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"8666:656:18","statements":[{"nodeType":"YulVariableDeclaration","src":"8680:35:18","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8699:6:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8711:2:18","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8707:3:18"},"nodeType":"YulFunctionCall","src":"8707:7:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8695:3:18"},"nodeType":"YulFunctionCall","src":"8695:20:18"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"8684:7:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8728:49:18","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8772:4:18"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"8742:29:18"},"nodeType":"YulFunctionCall","src":"8742:35:18"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"8732:6:18","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8790:10:18","value":{"kind":"number","nodeType":"YulLiteral","src":"8799:1:18","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"8794:1:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"8877:172:18","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8902:6:18"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8920:3:18"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"8925:9:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8916:3:18"},"nodeType":"YulFunctionCall","src":"8916:19:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8910:5:18"},"nodeType":"YulFunctionCall","src":"8910:26:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8895:6:18"},"nodeType":"YulFunctionCall","src":"8895:42:18"},"nodeType":"YulExpressionStatement","src":"8895:42:18"},{"nodeType":"YulAssignment","src":"8954:24:18","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8968:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"8976:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8964:3:18"},"nodeType":"YulFunctionCall","src":"8964:14:18"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8954:6:18"}]},{"nodeType":"YulAssignment","src":"8995:40:18","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"9012:9:18"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"9023:11:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9008:3:18"},"nodeType":"YulFunctionCall","src":"9008:27:18"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"8995:9:18"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8824:1:18"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"8827:7:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8821:2:18"},"nodeType":"YulFunctionCall","src":"8821:14:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8836:28:18","statements":[{"nodeType":"YulAssignment","src":"8838:24:18","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8847:1:18"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"8850:11:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8843:3:18"},"nodeType":"YulFunctionCall","src":"8843:19:18"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"8838:1:18"}]}]},"pre":{"nodeType":"YulBlock","src":"8817:3:18","statements":[]},"src":"8813:236:18"},{"body":{"nodeType":"YulBlock","src":"9097:166:18","statements":[{"nodeType":"YulVariableDeclaration","src":"9115:43:18","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"9142:3:18"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"9147:9:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9138:3:18"},"nodeType":"YulFunctionCall","src":"9138:19:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9132:5:18"},"nodeType":"YulFunctionCall","src":"9132:26:18"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"9119:9:18","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"9182:6:18"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"9194:9:18"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9221:1:18","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"9224:6:18"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9217:3:18"},"nodeType":"YulFunctionCall","src":"9217:14:18"},{"kind":"number","nodeType":"YulLiteral","src":"9233:3:18","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9213:3:18"},"nodeType":"YulFunctionCall","src":"9213:24:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9243:1:18","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9239:3:18"},"nodeType":"YulFunctionCall","src":"9239:6:18"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"9209:3:18"},"nodeType":"YulFunctionCall","src":"9209:37:18"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9205:3:18"},"nodeType":"YulFunctionCall","src":"9205:42:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9190:3:18"},"nodeType":"YulFunctionCall","src":"9190:58:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"9175:6:18"},"nodeType":"YulFunctionCall","src":"9175:74:18"},"nodeType":"YulExpressionStatement","src":"9175:74:18"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"9068:7:18"},{"name":"newLen","nodeType":"YulIdentifier","src":"9077:6:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9065:2:18"},"nodeType":"YulFunctionCall","src":"9065:19:18"},"nodeType":"YulIf","src":"9062:201:18"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"9283:4:18"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9297:1:18","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"9300:6:18"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9293:3:18"},"nodeType":"YulFunctionCall","src":"9293:14:18"},{"kind":"number","nodeType":"YulLiteral","src":"9309:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9289:3:18"},"nodeType":"YulFunctionCall","src":"9289:22:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"9276:6:18"},"nodeType":"YulFunctionCall","src":"9276:36:18"},"nodeType":"YulExpressionStatement","src":"9276:36:18"}]},"nodeType":"YulCase","src":"8659:663:18","value":{"kind":"number","nodeType":"YulLiteral","src":"8664:1:18","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"9339:234:18","statements":[{"nodeType":"YulVariableDeclaration","src":"9353:14:18","value":{"kind":"number","nodeType":"YulLiteral","src":"9366:1:18","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"9357:5:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"9402:67:18","statements":[{"nodeType":"YulAssignment","src":"9420:35:18","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"9439:3:18"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"9444:9:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9435:3:18"},"nodeType":"YulFunctionCall","src":"9435:19:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9429:5:18"},"nodeType":"YulFunctionCall","src":"9429:26:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9420:5:18"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"9383:6:18"},"nodeType":"YulIf","src":"9380:89:18"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"9489:4:18"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9548:5:18"},{"name":"newLen","nodeType":"YulIdentifier","src":"9555:6:18"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"9495:52:18"},"nodeType":"YulFunctionCall","src":"9495:67:18"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"9482:6:18"},"nodeType":"YulFunctionCall","src":"9482:81:18"},"nodeType":"YulExpressionStatement","src":"9482:81:18"}]},"nodeType":"YulCase","src":"9331:242:18","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8639:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"8647:2:18","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8636:2:18"},"nodeType":"YulFunctionCall","src":"8636:14:18"},"nodeType":"YulSwitch","src":"8629:944:18"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"8308:4:18","type":""},{"name":"src","nodeType":"YulTypedName","src":"8314:3:18","type":""}],"src":"8227:1352:18"},{"body":{"nodeType":"YulBlock","src":"9758:226:18","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9775:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"9786:2:18","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9768:6:18"},"nodeType":"YulFunctionCall","src":"9768:21:18"},"nodeType":"YulExpressionStatement","src":"9768:21:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9809:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"9820:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9805:3:18"},"nodeType":"YulFunctionCall","src":"9805:18:18"},{"kind":"number","nodeType":"YulLiteral","src":"9825:2:18","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9798:6:18"},"nodeType":"YulFunctionCall","src":"9798:30:18"},"nodeType":"YulExpressionStatement","src":"9798:30:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9848:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"9859:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9844:3:18"},"nodeType":"YulFunctionCall","src":"9844:18:18"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"9864:34:18","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9837:6:18"},"nodeType":"YulFunctionCall","src":"9837:62:18"},"nodeType":"YulExpressionStatement","src":"9837:62:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9919:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"9930:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9915:3:18"},"nodeType":"YulFunctionCall","src":"9915:18:18"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"9935:6:18","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9908:6:18"},"nodeType":"YulFunctionCall","src":"9908:34:18"},"nodeType":"YulExpressionStatement","src":"9908:34:18"},{"nodeType":"YulAssignment","src":"9951:27:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9963:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"9974:3:18","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9959:3:18"},"nodeType":"YulFunctionCall","src":"9959:19:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9951:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9735:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9749:4:18","type":""}],"src":"9584:400:18"},{"body":{"nodeType":"YulBlock","src":"10163:224:18","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10180:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"10191:2:18","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10173:6:18"},"nodeType":"YulFunctionCall","src":"10173:21:18"},"nodeType":"YulExpressionStatement","src":"10173:21:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10214:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"10225:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10210:3:18"},"nodeType":"YulFunctionCall","src":"10210:18:18"},{"kind":"number","nodeType":"YulLiteral","src":"10230:2:18","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10203:6:18"},"nodeType":"YulFunctionCall","src":"10203:30:18"},"nodeType":"YulExpressionStatement","src":"10203:30:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10253:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"10264:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10249:3:18"},"nodeType":"YulFunctionCall","src":"10249:18:18"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"10269:34:18","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10242:6:18"},"nodeType":"YulFunctionCall","src":"10242:62:18"},"nodeType":"YulExpressionStatement","src":"10242:62:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10324:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"10335:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10320:3:18"},"nodeType":"YulFunctionCall","src":"10320:18:18"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"10340:4:18","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10313:6:18"},"nodeType":"YulFunctionCall","src":"10313:32:18"},"nodeType":"YulExpressionStatement","src":"10313:32:18"},{"nodeType":"YulAssignment","src":"10354:27:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10366:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"10377:3:18","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10362:3:18"},"nodeType":"YulFunctionCall","src":"10362:19:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10354:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10140:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10154:4:18","type":""}],"src":"9989:398:18"},{"body":{"nodeType":"YulBlock","src":"10566:227:18","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10583:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"10594:2:18","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10576:6:18"},"nodeType":"YulFunctionCall","src":"10576:21:18"},"nodeType":"YulExpressionStatement","src":"10576:21:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10617:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"10628:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10613:3:18"},"nodeType":"YulFunctionCall","src":"10613:18:18"},{"kind":"number","nodeType":"YulLiteral","src":"10633:2:18","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10606:6:18"},"nodeType":"YulFunctionCall","src":"10606:30:18"},"nodeType":"YulExpressionStatement","src":"10606:30:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10656:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"10667:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10652:3:18"},"nodeType":"YulFunctionCall","src":"10652:18:18"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"10672:34:18","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10645:6:18"},"nodeType":"YulFunctionCall","src":"10645:62:18"},"nodeType":"YulExpressionStatement","src":"10645:62:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10727:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"10738:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10723:3:18"},"nodeType":"YulFunctionCall","src":"10723:18:18"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"10743:7:18","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10716:6:18"},"nodeType":"YulFunctionCall","src":"10716:35:18"},"nodeType":"YulExpressionStatement","src":"10716:35:18"},{"nodeType":"YulAssignment","src":"10760:27:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10772:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"10783:3:18","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10768:3:18"},"nodeType":"YulFunctionCall","src":"10768:19:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10760:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10543:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10557:4:18","type":""}],"src":"10392:401:18"},{"body":{"nodeType":"YulBlock","src":"10972:225:18","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10989:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"11000:2:18","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10982:6:18"},"nodeType":"YulFunctionCall","src":"10982:21:18"},"nodeType":"YulExpressionStatement","src":"10982:21:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11023:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"11034:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11019:3:18"},"nodeType":"YulFunctionCall","src":"11019:18:18"},{"kind":"number","nodeType":"YulLiteral","src":"11039:2:18","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11012:6:18"},"nodeType":"YulFunctionCall","src":"11012:30:18"},"nodeType":"YulExpressionStatement","src":"11012:30:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11062:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"11073:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11058:3:18"},"nodeType":"YulFunctionCall","src":"11058:18:18"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"11078:34:18","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11051:6:18"},"nodeType":"YulFunctionCall","src":"11051:62:18"},"nodeType":"YulExpressionStatement","src":"11051:62:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11133:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"11144:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11129:3:18"},"nodeType":"YulFunctionCall","src":"11129:18:18"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"11149:5:18","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11122:6:18"},"nodeType":"YulFunctionCall","src":"11122:33:18"},"nodeType":"YulExpressionStatement","src":"11122:33:18"},{"nodeType":"YulAssignment","src":"11164:27:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11176:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"11187:3:18","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11172:3:18"},"nodeType":"YulFunctionCall","src":"11172:19:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11164:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10949:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10963:4:18","type":""}],"src":"10798:399:18"},{"body":{"nodeType":"YulBlock","src":"11376:228:18","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11393:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"11404:2:18","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11386:6:18"},"nodeType":"YulFunctionCall","src":"11386:21:18"},"nodeType":"YulExpressionStatement","src":"11386:21:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11427:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"11438:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11423:3:18"},"nodeType":"YulFunctionCall","src":"11423:18:18"},{"kind":"number","nodeType":"YulLiteral","src":"11443:2:18","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11416:6:18"},"nodeType":"YulFunctionCall","src":"11416:30:18"},"nodeType":"YulExpressionStatement","src":"11416:30:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11466:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"11477:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11462:3:18"},"nodeType":"YulFunctionCall","src":"11462:18:18"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"11482:34:18","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11455:6:18"},"nodeType":"YulFunctionCall","src":"11455:62:18"},"nodeType":"YulExpressionStatement","src":"11455:62:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11537:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"11548:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11533:3:18"},"nodeType":"YulFunctionCall","src":"11533:18:18"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"11553:8:18","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11526:6:18"},"nodeType":"YulFunctionCall","src":"11526:36:18"},"nodeType":"YulExpressionStatement","src":"11526:36:18"},{"nodeType":"YulAssignment","src":"11571:27:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11583:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"11594:3:18","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11579:3:18"},"nodeType":"YulFunctionCall","src":"11579:19:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11571:4:18"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11353:9:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11367:4:18","type":""}],"src":"11202:402:18"},{"body":{"nodeType":"YulBlock","src":"11703:203:18","statements":[{"nodeType":"YulVariableDeclaration","src":"11713:26:18","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"11733:5:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11727:5:18"},"nodeType":"YulFunctionCall","src":"11727:12:18"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"11717:6:18","type":""}]},{"nodeType":"YulAssignment","src":"11748:32:18","value":{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"11767:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"11774:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11763:3:18"},"nodeType":"YulFunctionCall","src":"11763:16:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11757:5:18"},"nodeType":"YulFunctionCall","src":"11757:23:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"11748:5:18"}]},{"body":{"nodeType":"YulBlock","src":"11817:83:18","statements":[{"nodeType":"YulAssignment","src":"11831:59:18","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11844:5:18"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11859:1:18","type":"","value":"3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11866:4:18","type":"","value":"0x20"},{"name":"length","nodeType":"YulIdentifier","src":"11872:6:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11862:3:18"},"nodeType":"YulFunctionCall","src":"11862:17:18"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11855:3:18"},"nodeType":"YulFunctionCall","src":"11855:25:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11886:1:18","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11882:3:18"},"nodeType":"YulFunctionCall","src":"11882:6:18"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11851:3:18"},"nodeType":"YulFunctionCall","src":"11851:38:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11840:3:18"},"nodeType":"YulFunctionCall","src":"11840:50:18"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"11831:5:18"}]}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"11795:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"11803:4:18","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11792:2:18"},"nodeType":"YulFunctionCall","src":"11792:16:18"},"nodeType":"YulIf","src":"11789:111:18"}]},"name":"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"11683:5:18","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"11693:5:18","type":""}],"src":"11609:297:18"},{"body":{"nodeType":"YulBlock","src":"12124:299:18","statements":[{"nodeType":"YulAssignment","src":"12134:27:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12146:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"12157:3:18","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12142:3:18"},"nodeType":"YulFunctionCall","src":"12142:19:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12134:4:18"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12177:9:18"},{"name":"value0","nodeType":"YulIdentifier","src":"12188:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12170:6:18"},"nodeType":"YulFunctionCall","src":"12170:25:18"},"nodeType":"YulExpressionStatement","src":"12170:25:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12215:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"12226:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12211:3:18"},"nodeType":"YulFunctionCall","src":"12211:18:18"},{"name":"value1","nodeType":"YulIdentifier","src":"12231:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12204:6:18"},"nodeType":"YulFunctionCall","src":"12204:34:18"},"nodeType":"YulExpressionStatement","src":"12204:34:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12258:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"12269:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12254:3:18"},"nodeType":"YulFunctionCall","src":"12254:18:18"},{"name":"value2","nodeType":"YulIdentifier","src":"12274:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12247:6:18"},"nodeType":"YulFunctionCall","src":"12247:34:18"},"nodeType":"YulExpressionStatement","src":"12247:34:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12301:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"12312:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12297:3:18"},"nodeType":"YulFunctionCall","src":"12297:18:18"},{"name":"value3","nodeType":"YulIdentifier","src":"12317:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12290:6:18"},"nodeType":"YulFunctionCall","src":"12290:34:18"},"nodeType":"YulExpressionStatement","src":"12290:34:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12344:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"12355:3:18","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12340:3:18"},"nodeType":"YulFunctionCall","src":"12340:19:18"},{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"12365:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"12373:42:18","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12361:3:18"},"nodeType":"YulFunctionCall","src":"12361:55:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12333:6:18"},"nodeType":"YulFunctionCall","src":"12333:84:18"},"nodeType":"YulExpressionStatement","src":"12333:84:18"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12061:9:18","type":""},{"name":"value4","nodeType":"YulTypedName","src":"12072:6:18","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12080:6:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12088:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12096:6:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12104:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12115:4:18","type":""}],"src":"11911:512:18"},{"body":{"nodeType":"YulBlock","src":"12609:217:18","statements":[{"nodeType":"YulAssignment","src":"12619:27:18","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12631:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"12642:3:18","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12627:3:18"},"nodeType":"YulFunctionCall","src":"12627:19:18"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12619:4:18"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12662:9:18"},{"name":"value0","nodeType":"YulIdentifier","src":"12673:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12655:6:18"},"nodeType":"YulFunctionCall","src":"12655:25:18"},"nodeType":"YulExpressionStatement","src":"12655:25:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12700:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"12711:2:18","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12696:3:18"},"nodeType":"YulFunctionCall","src":"12696:18:18"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12720:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"12728:4:18","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12716:3:18"},"nodeType":"YulFunctionCall","src":"12716:17:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12689:6:18"},"nodeType":"YulFunctionCall","src":"12689:45:18"},"nodeType":"YulExpressionStatement","src":"12689:45:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12754:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"12765:2:18","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12750:3:18"},"nodeType":"YulFunctionCall","src":"12750:18:18"},{"name":"value2","nodeType":"YulIdentifier","src":"12770:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12743:6:18"},"nodeType":"YulFunctionCall","src":"12743:34:18"},"nodeType":"YulExpressionStatement","src":"12743:34:18"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12797:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"12808:2:18","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12793:3:18"},"nodeType":"YulFunctionCall","src":"12793:18:18"},{"name":"value3","nodeType":"YulIdentifier","src":"12813:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12786:6:18"},"nodeType":"YulFunctionCall","src":"12786:34:18"},"nodeType":"YulExpressionStatement","src":"12786:34:18"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12554:9:18","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12565:6:18","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12573:6:18","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12581:6:18","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12589:6:18","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12600:4:18","type":""}],"src":"12428:398:18"},{"body":{"nodeType":"YulBlock","src":"12863:152:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12880:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12883:77:18","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12873:6:18"},"nodeType":"YulFunctionCall","src":"12873:88:18"},"nodeType":"YulExpressionStatement","src":"12873:88:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12977:1:18","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12980:4:18","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12970:6:18"},"nodeType":"YulFunctionCall","src":"12970:15:18"},"nodeType":"YulExpressionStatement","src":"12970:15:18"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13001:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13004:4:18","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12994:6:18"},"nodeType":"YulFunctionCall","src":"12994:15:18"},"nodeType":"YulExpressionStatement","src":"12994:15:18"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"12831:184:18"}]},"contents":"{\n    { }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xff00000000000000000000000000000000000000000000000000000000000000))\n        let _1 := 32\n        mstore(add(headStart, _1), 224)\n        let tail_1 := abi_encode_string(value1, add(headStart, 224))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_string(value2, tail_1)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), sub(tail_2, headStart))\n        let pos := tail_2\n        let length := mload(value6)\n        mstore(tail_2, length)\n        pos := add(tail_2, _1)\n        let srcPtr := add(value6, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let value := calldataload(add(headStart, 128))\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n        value4 := value\n        value5 := calldataload(add(headStart, 160))\n        value6 := calldataload(add(headStart, 192))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds a\")\n        mstore(add(headStart, 96), \"llowance\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value\n    {\n        let length := mload(array)\n        value := mload(add(array, 0x20))\n        if lt(length, 0x20)\n        {\n            value := and(value, shl(shl(3, sub(0x20, length)), not(0)))\n        }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n}","id":18,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"663":[{"length":32,"start":2771}],"665":[{"length":32,"start":2729}],"667":[{"length":32,"start":2687}],"669":[{"length":32,"start":2852}],"671":[{"length":32,"start":2892}],"674":[{"length":32,"start":2980}],"677":[{"length":32,"start":3025}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1E9 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x20F JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x224 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x14D JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x160 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x118 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x13B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x102 PUSH2 0x25D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x1005 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12B PUSH2 0x126 CALLDATASIZE PUSH1 0x4 PUSH2 0x103B JUMP JUMPDEST PUSH2 0x2EF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10F JUMP JUMPDEST PUSH1 0x5 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10F JUMP JUMPDEST PUSH2 0x12B PUSH2 0x15B CALLDATASIZE PUSH1 0x4 PUSH2 0x1065 JUMP JUMPDEST PUSH2 0x306 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10F JUMP JUMPDEST PUSH2 0x13F PUSH2 0x3CA JUMP JUMPDEST PUSH2 0x12B PUSH2 0x185 CALLDATASIZE PUSH1 0x4 PUSH2 0x103B JUMP JUMPDEST PUSH2 0x3D9 JUMP JUMPDEST PUSH2 0x13F PUSH2 0x198 CALLDATASIZE PUSH1 0x4 PUSH2 0x10A1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x13F PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x10A1 JUMP JUMPDEST PUSH2 0x415 JUMP JUMPDEST PUSH2 0x1CE PUSH2 0x433 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x10BC JUMP JUMPDEST PUSH2 0x102 PUSH2 0x495 JUMP JUMPDEST PUSH2 0x12B PUSH2 0x1F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x103B JUMP JUMPDEST PUSH2 0x4A4 JUMP JUMPDEST PUSH2 0x12B PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0x103B JUMP JUMPDEST PUSH2 0x555 JUMP JUMPDEST PUSH2 0x222 PUSH2 0x21D CALLDATASIZE PUSH1 0x4 PUSH2 0x116E JUMP JUMPDEST PUSH2 0x562 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x13F PUSH2 0x232 CALLDATASIZE PUSH1 0x4 PUSH2 0x11E1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x6 DUP1 SLOAD PUSH2 0x26C SWAP1 PUSH2 0x1214 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x298 SWAP1 PUSH2 0x1214 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2E5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2BA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2E5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2C8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FC CALLER DUP5 DUP5 PUSH2 0x702 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x313 DUP5 DUP5 DUP5 PUSH2 0x85A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x3B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6C6F77616E6365000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3BF DUP6 CALLER DUP6 DUP5 SUB PUSH2 0x702 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D4 PUSH2 0xA72 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 PUSH2 0x2FC SWAP2 DUP6 SWAP1 PUSH2 0x410 SWAP1 DUP7 SWAP1 PUSH2 0x124E JUMP JUMPDEST PUSH2 0x702 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x300 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH2 0x447 PUSH2 0xB9D JUMP JUMPDEST PUSH2 0x44F PUSH2 0xBCA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH32 0xF00000000000000000000000000000000000000000000000000000000000000 SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x7 DUP1 SLOAD PUSH2 0x26C SWAP1 PUSH2 0x1214 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x53E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A9 JUMP JUMPDEST PUSH2 0x54B CALLER DUP6 DUP6 DUP5 SUB PUSH2 0x702 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FC CALLER DUP5 DUP5 PUSH2 0x85A JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x59F JUMPI PUSH1 0x40 MLOAD PUSH32 0x6279130200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3A9 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x5EC DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x647 DUP3 PUSH2 0xBF7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x657 DUP3 DUP8 DUP8 DUP8 PUSH2 0xC3F JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4B800E4600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP12 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x3A9 JUMP JUMPDEST PUSH2 0x6C2 DUP11 DUP11 DUP11 PUSH2 0x702 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH2 0x6EA JUMPI PUSH2 0x6E3 DUP4 PUSH2 0xC6D JUMP JUMPDEST SWAP1 POP PUSH2 0x300 JUMP JUMPDEST DUP2 PUSH2 0x6F5 DUP5 DUP3 PUSH2 0x12D4 JUMP JUMPDEST POP PUSH1 0xFF SWAP1 POP PUSH2 0x300 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x77D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x7F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x8D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x952 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x9E1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xA18 SWAP1 DUP5 SWAP1 PUSH2 0x124E JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA64 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0xACB JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0xAF5 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3D4 PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3D4 PUSH32 0x0 PUSH1 0x0 PUSH2 0xCC4 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3D4 PUSH32 0x0 PUSH1 0x1 PUSH2 0xCC4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x300 PUSH2 0xC04 PUSH2 0xA72 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0xC51 DUP9 DUP9 DUP9 DUP9 PUSH2 0xD68 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0xC61 DUP3 DUP3 PUSH2 0xE37 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH2 0xCB1 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x305A27A900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A9 SWAP2 SWAP1 PUSH2 0x1005 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xCBC DUP3 PUSH2 0x1394 JUMP JUMPDEST OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0xCD7 JUMPI PUSH2 0x6E3 DUP4 PUSH2 0xF3F JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0xCE3 SWAP1 PUSH2 0x1214 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xD0F SWAP1 PUSH2 0x1214 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD5C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD31 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xD5C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD3F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x300 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0xDA3 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0xE2D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDF7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xE23 JUMPI POP PUSH1 0x0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0xE2D JUMP JUMPDEST SWAP3 POP PUSH1 0x0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xE4B JUMPI PUSH2 0xE4B PUSH2 0x13B8 JUMP JUMPDEST SUB PUSH2 0xE54 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xE68 JUMPI PUSH2 0xE68 PUSH2 0x13B8 JUMP JUMPDEST SUB PUSH2 0xE9F JUMPI PUSH1 0x40 MLOAD PUSH32 0xF645EEDF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xEB3 JUMPI PUSH2 0xEB3 PUSH2 0x13B8 JUMP JUMPDEST SUB PUSH2 0xEED JUMPI PUSH1 0x40 MLOAD PUSH32 0xFCE698F700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3A9 JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xF01 JUMPI PUSH2 0xF01 PUSH2 0x13B8 JUMP JUMPDEST SUB PUSH2 0xF3B JUMPI PUSH1 0x40 MLOAD PUSH32 0xD78BCE0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3A9 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xF4C DUP4 PUSH2 0xF7E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x300 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB3512B0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xFE5 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xFC9 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1018 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xFBF JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1036 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x104E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1057 DUP4 PUSH2 0x101F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x107A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1083 DUP5 PUSH2 0x101F JUMP JUMPDEST SWAP3 POP PUSH2 0x1091 PUSH1 0x20 DUP6 ADD PUSH2 0x101F JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1018 DUP3 PUSH2 0x101F JUMP JUMPDEST PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP9 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0xE0 DUP2 DUP5 ADD MSTORE PUSH2 0x10F8 PUSH1 0xE0 DUP5 ADD DUP11 PUSH2 0xFBF JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x110A DUP2 DUP11 PUSH2 0xFBF JUMP JUMPDEST PUSH1 0x60 DUP6 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD DUP8 SWAP1 MSTORE DUP5 DUP2 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE DUP4 DUP8 ADD SWAP3 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x115C JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1140 JUMP JUMPDEST POP SWAP1 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x1189 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1192 DUP9 PUSH2 0x101F JUMP JUMPDEST SWAP7 POP PUSH2 0x11A0 PUSH1 0x20 DUP10 ADD PUSH2 0x101F JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x11C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x11F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11FD DUP4 PUSH2 0x101F JUMP JUMPDEST SWAP2 POP PUSH2 0x120B PUSH1 0x20 DUP5 ADD PUSH2 0x101F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1228 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1248 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x300 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x12CF JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x12AC JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x12CB JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x12B8 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12EE JUMPI PUSH2 0x12EE PUSH2 0x126F JUMP JUMPDEST PUSH2 0x1302 DUP2 PUSH2 0x12FC DUP5 SLOAD PUSH2 0x1214 JUMP JUMPDEST DUP5 PUSH2 0x1285 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x1337 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x131F JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x12CB JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1366 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x1347 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x1384 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x1248 JUMPI PUSH1 0x0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 0xDF DUP13 0xEF 0xAA DUP6 0xC6 ISZERO SWAP8 PUSH4 0xA6A6465A REVERT 0xA5 0x28 SWAP1 REVERT PUSH27 0xEC68A829111B982E1E4599BC64736F6C6343000811003300000000 ","sourceMap":"246:5958:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1209:100;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2720:192;;;;;;:::i;:::-;;:::i;:::-;;;1292:14:18;;1285:22;1267:41;;1255:2;1240:18;2720:192:3;1127:187:18;1530:108:3;1618:12;;1530:108;;;1465:25:18;;;1453:2;1438:18;1530:108:3;1319:177:18;1797:525:3;;;;;;:::i;:::-;;:::i;1429:93::-;;;1512:2;1976:36:18;;1964:2;1949:18;1429:93:3;1834:184:18;6087:114:3;;;:::i;3399:286::-;;;;;;:::i;:::-;;:::i;1646:143::-;;;;;;:::i;:::-;-1:-1:-1;;;;;1763:18:3;1736:7;1763:18;;;:9;:18;;;;;;;1646:143;5829:145;;;;;;:::i;:::-;;:::i;5240:580:2:-;;;:::i;:::-;;;;;;;;;;;;;:::i;1317:104:3:-;;;:::i;2920:471::-;;;;;;:::i;:::-;;:::i;2330:198::-;;;;;;:::i;:::-;;:::i;5075:695::-;;;;;;:::i;:::-;;:::i;:::-;;2536:176;;;;;;:::i;:::-;-1:-1:-1;;;;;2677:18:3;;;2650:7;2677:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;2536:176;1209:100;1263:13;1296:5;1289:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1209:100;:::o;2720:192::-;2828:4;2845:37;2854:10;2866:7;2875:6;2845:8;:37::i;:::-;-1:-1:-1;2900:4:3;2720:192;;;;;:::o;1797:525::-;1937:4;1954:36;1964:6;1972:9;1983:6;1954:9;:36::i;:::-;-1:-1:-1;;;;;2030:19:3;;2003:24;2030:19;;;:11;:19;;;;;;;;2050:10;2030:31;;;;;;;;2094:26;;;;2072:116;;;;-1:-1:-1;;;2072:116:3;;5343:2:18;2072:116:3;;;5325:21:18;5382:2;5362:18;;;5355:30;5421:34;5401:18;;;5394:62;5492:10;5472:18;;;5465:38;5520:19;;2072:116:3;;;;;;;;;2224:55;2233:6;2241:10;2272:6;2253:16;:25;2224:8;:55::i;:::-;-1:-1:-1;2310:4:3;;1797:525;-1:-1:-1;;;;1797:525:3:o;6087:114::-;6146:7;6173:20;:18;:20::i;:::-;6166:27;;6087:114;:::o;3399:286::-;3552:10;3512:4;3599:23;;;:11;:23;;;;;;;;-1:-1:-1;;;;;3599:32:3;;;;;;;;;;3512:4;;3529:126;;3577:7;;3599:45;;3634:10;;3599:45;:::i;:::-;3529:8;:126::i;5829:145::-;-1:-1:-1;;;;;634:14:10;;5920:7:3;634:14:10;;;:7;:14;;;;;;5947:19:3;547:109:10;5240:580:2;5343:13;5371:18;5404:21;5440:15;5470:25;5510:12;5537:27;5645:13;:11;:13::i;:::-;5673:16;:14;:16::i;:::-;5785;;;5768:1;5785:16;;;;;;;;;5592:220;;;;-1:-1:-1;5592:220:2;;-1:-1:-1;5704:13:2;;-1:-1:-1;5740:4:2;;-1:-1:-1;5768:1:2;-1:-1:-1;5785:16:2;-1:-1:-1;5592:220:2;-1:-1:-1;5240:580:2:o;1317:104:3:-;1373:13;1406:7;1399:14;;;;;:::i;2920:471::-;3094:10;3038:4;3082:23;;;:11;:23;;;;;;;;-1:-1:-1;;;;;3082:32:3;;;;;;;;;;3147:35;;;;3125:122;;;;-1:-1:-1;;;3125:122:3;;6225:2:18;3125:122:3;;;6207:21:18;6264:2;6244:18;;;6237:30;6303:34;6283:18;;;6276:62;6374:7;6354:18;;;6347:35;6399:19;;3125:122:3;6023:401:18;3125:122:3;3283:65;3292:10;3304:7;3332:15;3313:16;:34;3283:8;:65::i;:::-;-1:-1:-1;3379:4:3;;2920:471;-1:-1:-1;;;2920:471:3:o;2330:198::-;2441:4;2458:40;2468:10;2480:9;2491:6;2458:9;:40::i;5075:695::-;5305:8;5287:15;:26;5283:99;;;5337:33;;;;;;;;1465:25:18;;;1438:18;;5337:33:3;1319:177:18;5283:99:3;5394:18;410:95;5453:5;5460:7;5469:5;5476:16;5486:5;-1:-1:-1;;;;;1144:14:10;837:7;1144:14;;;:7;:14;;;;;:16;;;;;;;;;777:402;5476:16:3;5425:78;;;;;;6716:25:18;;;;-1:-1:-1;;;;;6838:15:18;;;6818:18;;;6811:43;6890:15;;;;6870:18;;;6863:43;6922:18;;;6915:34;6965:19;;;6958:35;7009:19;;;7002:35;;;6688:19;;5425:78:3;;;;;;;;;;;;5415:89;;;;;;5394:110;;5517:12;5532:28;5549:10;5532:16;:28::i;:::-;5517:43;;5573:14;5590:28;5604:4;5610:1;5613;5616;5590:13;:28::i;:::-;5573:45;;5643:5;-1:-1:-1;;;;;5633:15:3;:6;-1:-1:-1;;;;;5633:15:3;;5629:90;;5672:35;;;;;-1:-1:-1;;;;;7301:15:18;;;5672:35:3;;;7283:34:18;7353:15;;7333:18;;;7326:43;7195:18;;5672:35:3;7048:327:18;5629:90:3;5731:31;5740:5;5747:7;5756:5;5731:8;:31::i;:::-;5272:498;;;5075:695;;;;;;;:::o;2973:347:14:-;3069:11;3119:2;3103:5;3097:19;:24;3093:220;;;3145:20;3159:5;3145:13;:20::i;:::-;3138:27;;;;3093:220;3224:5;3198:46;3239:5;3224;3198:46;:::i;:::-;-1:-1:-1;1430:66:14;;-1:-1:-1;3259:42:14;;3586:179:16;3737:10;3586:179::o;4636:380:3:-;-1:-1:-1;;;;;4772:19:3;;4764:68;;;;-1:-1:-1;;;4764:68:3;;9786:2:18;4764:68:3;;;9768:21:18;9825:2;9805:18;;;9798:30;9864:34;9844:18;;;9837:62;9935:6;9915:18;;;9908:34;9959:19;;4764:68:3;9584:400:18;4764:68:3;-1:-1:-1;;;;;4851:21:3;;4843:68;;;;-1:-1:-1;;;4843:68:3;;10191:2:18;4843:68:3;;;10173:21:18;10230:2;10210:18;;;10203:30;10269:34;10249:18;;;10242:62;10340:4;10320:18;;;10313:32;10362:19;;4843:68:3;9989:398:18;4843:68:3;-1:-1:-1;;;;;4924:18:3;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;4976:32;;1465:25:18;;;4976:32:3;;1438:18:18;4976:32:3;;;;;;;4636:380;;;:::o;3693:651::-;-1:-1:-1;;;;;3833:20:3;;3825:70;;;;-1:-1:-1;;;3825:70:3;;10594:2:18;3825:70:3;;;10576:21:18;10633:2;10613:18;;;10606:30;10672:34;10652:18;;;10645:62;10743:7;10723:18;;;10716:35;10768:19;;3825:70:3;10392:401:18;3825:70:3;-1:-1:-1;;;;;3914:23:3;;3906:71;;;;-1:-1:-1;;;3906:71:3;;11000:2:18;3906:71:3;;;10982:21:18;11039:2;11019:18;;;11012:30;11078:34;11058:18;;;11051:62;11149:5;11129:18;;;11122:33;11172:19;;3906:71:3;10798:399:18;3906:71:3;-1:-1:-1;;;;;4014:17:3;;3990:21;4014:17;;;:9;:17;;;;;;4064:23;;;;4042:111;;;;-1:-1:-1;;;4042:111:3;;11404:2:18;4042:111:3;;;11386:21:18;11443:2;11423:18;;;11416:30;11482:34;11462:18;;;11455:62;11553:8;11533:18;;;11526:36;11579:19;;4042:111:3;11202:402:18;4042:111:3;-1:-1:-1;;;;;4189:17:3;;;;;;;:9;:17;;;;;;4209:22;;;4189:42;;4253:20;;;;;;;;:30;;4225:6;;4189:17;4253:30;;4225:6;;4253:30;:::i;:::-;;;;;;;;4318:9;-1:-1:-1;;;;;4301:35:3;4310:6;-1:-1:-1;;;;;4301:35:3;;4329:6;4301:35;;;;1465:25:18;;1453:2;1438:18;;1319:177;4301:35:3;;;;;;;;3814:530;3693:651;;;:::o;3907:268:2:-;3960:7;3992:4;-1:-1:-1;;;;;4001:11:2;3984:28;;:63;;;;;4033:14;4016:13;:31;3984:63;3980:188;;;-1:-1:-1;4071:22:2;;3907:268::o;3980:188::-;4133:23;4275:80;;;2099:95;4275:80;;;12170:25:18;4297:11:2;12211:18:18;;;12204:34;;;;4310:14:2;12254:18:18;;;12247:34;4326:13:2;12297:18:18;;;12290:34;4349:4:2;12340:19:18;;;12333:84;4238:7:2;;12142:19:18;;4275:80:2;;;;;;;;;;;;4265:91;;;;;;4258:98;;4183:181;;6149:128;6195:13;6228:41;:5;6255:13;6228:26;:41::i;6612:137::-;6661:13;6694:47;:8;6724:16;6694:29;:47::i;5006:178::-;5083:7;5110:66;5143:20;:18;:20::i;:::-;5165:10;3575:4:9;3569:11;3606:10;3594:23;;3647:4;3638:14;;3631:39;;;;3700:4;3691:14;;3684:34;3757:4;3742:20;;;3398:382;7045:264:1;7130:7;7151:17;7170:18;7190:16;7210:25;7221:4;7227:1;7230;7233;7210:10;:25::i;:::-;7150:85;;;;;;7246:28;7258:5;7265:8;7246:11;:28::i;:::-;-1:-1:-1;7292:9:1;;7045:264;-1:-1:-1;;;;;;7045:264:1:o;1758:292:14:-;1823:11;1847:17;1873:3;1847:30;;1906:2;1892:4;:11;:16;1888:74;;;1946:3;1932:18;;;;;;;;;;;:::i;1888:74::-;2029:11;;2012:13;2029:4;2012:13;:::i;:::-;2004:36;;1758:292;-1:-1:-1;;;1758:292:14:o;3456:273::-;3550:13;1430:66;3580:46;;3576:146;;3650:15;3659:5;3650:8;:15::i;3576:146::-;3705:5;3698:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5329:1577:1;5460:17;;;6424:66;6411:79;;6407:166;;;-1:-1:-1;6523:1:1;;-1:-1:-1;6527:30:1;;-1:-1:-1;6559:1:1;6507:54;;6407:166;6687:24;;;6670:14;6687:24;;;;;;;;;12655:25:18;;;12728:4;12716:17;;12696:18;;;12689:45;;;;12750:18;;;12743:34;;;12793:18;;;12786:34;;;6687:24:1;;12627:19:18;;6687:24:1;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6687:24:1;;-1:-1:-1;;6687:24:1;;;-1:-1:-1;;;;;;;6726:20:1;;6722:115;;-1:-1:-1;6779:1:1;;-1:-1:-1;6783:29:1;;-1:-1:-1;6779:1:1;;-1:-1:-1;6763:62:1;;6722:115;6857:6;-1:-1:-1;6865:20:1;;-1:-1:-1;6865:20:1;;-1:-1:-1;5329:1577:1;;;;;;;;;:::o;7447:542::-;7543:20;7534:5;:29;;;;;;;;:::i;:::-;;7530:452;;7447:542;;:::o;7530:452::-;7641:29;7632:5;:38;;;;;;;;:::i;:::-;;7628:354;;7694:23;;;;;;;;;;;;;;7628:354;7748:35;7739:5;:44;;;;;;;;:::i;:::-;;7735:247;;7807:46;;;;;;;;1465:25:18;;;1438:18;;7807:46:1;1319:177:18;7735:247:1;7884:30;7875:5;:39;;;;;;;;:::i;:::-;;7871:111;;7938:32;;;;;;;;1465:25:18;;;1438:18;;7938:32:1;1319:177:18;7871:111:1;7447:542;;:::o;2139:387:14:-;2198:13;2224:11;2238:16;2249:4;2238:10;:16::i;:::-;2364:14;;;2375:2;2364:14;;;;;;;;;2224:30;;-1:-1:-1;2344:17:14;;2364:14;;;;;;;;;-1:-1:-1;;;2429:16:14;;;-1:-1:-1;2475:4:14;2466:14;;2459:28;;;;-1:-1:-1;2429:16:14;2139:387::o;2603:251::-;2664:7;2737:4;2701:40;;2765:2;2756:11;;2752:71;;;2791:20;;;;;;;;;;;;;;14:423:18;56:3;94:5;88:12;121:6;116:3;109:19;146:1;156:162;170:6;167:1;164:13;156:162;;;232:4;288:13;;;284:22;;278:29;260:11;;;256:20;;249:59;185:12;156:162;;;160:3;363:1;356:4;347:6;342:3;338:16;334:27;327:38;426:4;419:2;415:7;410:2;402:6;398:15;394:29;389:3;385:39;381:50;374:57;;;14:423;;;;:::o;442:220::-;591:2;580:9;573:21;554:4;611:45;652:2;641:9;637:18;629:6;611:45;:::i;:::-;603:53;442:220;-1:-1:-1;;;442:220:18:o;667:196::-;735:20;;-1:-1:-1;;;;;784:54:18;;774:65;;764:93;;853:1;850;843:12;764:93;667:196;;;:::o;868:254::-;936:6;944;997:2;985:9;976:7;972:23;968:32;965:52;;;1013:1;1010;1003:12;965:52;1036:29;1055:9;1036:29;:::i;:::-;1026:39;1112:2;1097:18;;;;1084:32;;-1:-1:-1;;;868:254:18:o;1501:328::-;1578:6;1586;1594;1647:2;1635:9;1626:7;1622:23;1618:32;1615:52;;;1663:1;1660;1653:12;1615:52;1686:29;1705:9;1686:29;:::i;:::-;1676:39;;1734:38;1768:2;1757:9;1753:18;1734:38;:::i;:::-;1724:48;;1819:2;1808:9;1804:18;1791:32;1781:42;;1501:328;;;;;:::o;2205:186::-;2264:6;2317:2;2305:9;2296:7;2292:23;2288:32;2285:52;;;2333:1;2330;2323:12;2285:52;2356:29;2375:9;2356:29;:::i;2396:1335::-;2793:66;2785:6;2781:79;2770:9;2763:98;2744:4;2880:2;2918:3;2913:2;2902:9;2898:18;2891:31;2945:46;2986:3;2975:9;2971:19;2963:6;2945:46;:::i;:::-;3039:9;3031:6;3027:22;3022:2;3011:9;3007:18;3000:50;3073:33;3099:6;3091;3073:33;:::i;:::-;3137:2;3122:18;;3115:34;;;-1:-1:-1;;;;;3186:55:18;;3180:3;3165:19;;3158:84;3273:3;3258:19;;3251:35;;;3323:22;;;3317:3;3302:19;;3295:51;3395:13;;3417:22;;;3493:15;;;;-1:-1:-1;3455:15:18;;;;-1:-1:-1;3536:169:18;3550:6;3547:1;3544:13;3536:169;;;3611:13;;3599:26;;3680:15;;;;3645:12;;;;3572:1;3565:9;3536:169;;;-1:-1:-1;3722:3:18;;2396:1335;-1:-1:-1;;;;;;;;;;;;2396:1335:18:o;3736:693::-;3847:6;3855;3863;3871;3879;3887;3895;3948:3;3936:9;3927:7;3923:23;3919:33;3916:53;;;3965:1;3962;3955:12;3916:53;3988:29;4007:9;3988:29;:::i;:::-;3978:39;;4036:38;4070:2;4059:9;4055:18;4036:38;:::i;:::-;4026:48;;4121:2;4110:9;4106:18;4093:32;4083:42;;4172:2;4161:9;4157:18;4144:32;4134:42;;4226:3;4215:9;4211:19;4198:33;4271:4;4264:5;4260:16;4253:5;4250:27;4240:55;;4291:1;4288;4281:12;4240:55;3736:693;;;;-1:-1:-1;3736:693:18;;;;4314:5;4366:3;4351:19;;4338:33;;-1:-1:-1;4418:3:18;4403:19;;;4390:33;;3736:693;-1:-1:-1;;3736:693:18:o;4434:260::-;4502:6;4510;4563:2;4551:9;4542:7;4538:23;4534:32;4531:52;;;4579:1;4576;4569:12;4531:52;4602:29;4621:9;4602:29;:::i;:::-;4592:39;;4650:38;4684:2;4673:9;4669:18;4650:38;:::i;:::-;4640:48;;4434:260;;;;;:::o;4699:437::-;4778:1;4774:12;;;;4821;;;4842:61;;4896:4;4888:6;4884:17;4874:27;;4842:61;4949:2;4941:6;4938:14;4918:18;4915:38;4912:218;;-1:-1:-1;;;4983:1:18;4976:88;5087:4;5084:1;5077:15;5115:4;5112:1;5105:15;4912:218;;4699:437;;;:::o;5550:279::-;5615:9;;;5636:10;;;5633:190;;;-1:-1:-1;;;5676:1:18;5669:88;5780:4;5777:1;5770:15;5808:4;5805:1;5798:15;5834:184;-1:-1:-1;;;5883:1:18;5876:88;5983:4;5980:1;5973:15;6007:4;6004:1;5997:15;7506:545;7608:2;7603:3;7600:11;7597:448;;;7644:1;7669:5;7665:2;7658:17;7714:4;7710:2;7700:19;7784:2;7772:10;7768:19;7765:1;7761:27;7755:4;7751:38;7820:4;7808:10;7805:20;7802:47;;;-1:-1:-1;7843:4:18;7802:47;7898:2;7893:3;7889:12;7886:1;7882:20;7876:4;7872:31;7862:41;;7953:82;7971:2;7964:5;7961:13;7953:82;;;8016:17;;;7997:1;7986:13;7953:82;;;7957:3;;;7597:448;7506:545;;;:::o;8227:1352::-;8353:3;8347:10;8380:18;8372:6;8369:30;8366:56;;;8402:18;;:::i;:::-;8431:97;8521:6;8481:38;8513:4;8507:11;8481:38;:::i;:::-;8475:4;8431:97;:::i;:::-;8583:4;;8647:2;8636:14;;8664:1;8659:663;;;;9366:1;9383:6;9380:89;;;-1:-1:-1;9435:19:18;;;9429:26;9380:89;-1:-1:-1;;8184:1:18;8180:11;;;8176:24;8172:29;8162:40;8208:1;8204:11;;;8159:57;9482:81;;8629:944;;8659:663;7453:1;7446:14;;;7490:4;7477:18;;-1:-1:-1;;8695:20:18;;;8813:236;8827:7;8824:1;8821:14;8813:236;;;8916:19;;;8910:26;8895:42;;9008:27;;;;8976:1;8964:14;;;;8843:19;;8813:236;;;8817:3;9077:6;9068:7;9065:19;9062:201;;;9138:19;;;9132:26;-1:-1:-1;;9221:1:18;9217:14;;;9233:3;9213:24;9209:37;9205:42;9190:58;9175:74;;9062:201;-1:-1:-1;;;;;9309:1:18;9293:14;;;9289:22;9276:36;;-1:-1:-1;8227:1352:18:o;11609:297::-;11727:12;;11774:4;11763:16;;;11757:23;;11727:12;11792:16;;11789:111;;;-1:-1:-1;;11866:4:18;11862:17;;;;11859:1;11855:25;11851:38;11840:50;;11609:297;-1:-1:-1;11609:297:18:o;12831:184::-;-1:-1:-1;;;12880:1:18;12873:88;12980:4;12977:1;12970:15;13004:4;13001:1;12994:15"},"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","eip712Domain()":"84b0196e","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n                /// @solidity memory-safe-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xdc6f7c5d0c8e145fd21aa1647db200d8fff2b8065b49177e545f7e6ef6af03b7\",\"license\":\"MIT\"},\"contracts/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\r\\n *\\r\\n * These functions can be used to verify that a message was signed by the holder\\r\\n * of the private keys of a given address.\\r\\n */\\r\\nlibrary ECDSA {\\r\\n    enum RecoverError {\\r\\n        NoError,\\r\\n        InvalidSignature,\\r\\n        InvalidSignatureLength,\\r\\n        InvalidSignatureS\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The signature derives the `address(0)`.\\r\\n     */\\r\\n    error ECDSAInvalidSignature();\\r\\n\\r\\n    /**\\r\\n     * @dev The signature has an invalid length.\\r\\n     */\\r\\n    error ECDSAInvalidSignatureLength(uint256 length);\\r\\n\\r\\n    /**\\r\\n     * @dev The signature has an S value that is in the upper half order.\\r\\n     */\\r\\n    error ECDSAInvalidSignatureS(bytes32 s);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\r\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\r\\n     * and a bytes32 providing additional information about the error.\\r\\n     *\\r\\n     * If no error is returned, then the address can be used for verification purposes.\\r\\n     *\\r\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\r\\n     * this function rejects them by requiring the `s` value to be in the lower\\r\\n     * half order, and the `v` value to be either 27 or 28.\\r\\n     *\\r\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\r\\n     * verification to be secure: it is possible to craft signatures that\\r\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\r\\n     * this is by receiving a hash of the original message (which may otherwise\\r\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\r\\n     *\\r\\n     * Documentation for signature generation:\\r\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\r\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\r\\n     */\\r\\n    function tryRecover(\\r\\n        bytes32 hash,\\r\\n        bytes memory signature\\r\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\r\\n        if (signature.length == 65) {\\r\\n            bytes32 r;\\r\\n            bytes32 s;\\r\\n            uint8 v;\\r\\n            // ecrecover takes the signature parameters, and the only way to get them\\r\\n            // currently is to use assembly.\\r\\n            assembly (\\\"memory-safe\\\") {\\r\\n                r := mload(add(signature, 0x20))\\r\\n                s := mload(add(signature, 0x40))\\r\\n                v := byte(0, mload(add(signature, 0x60)))\\r\\n            }\\r\\n            return tryRecover(hash, v, r, s);\\r\\n        } else {\\r\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\r\\n     * `signature`. This address can then be used for verification purposes.\\r\\n     *\\r\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\r\\n     * this function rejects them by requiring the `s` value to be in the lower\\r\\n     * half order, and the `v` value to be either 27 or 28.\\r\\n     *\\r\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\r\\n     * verification to be secure: it is possible to craft signatures that\\r\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\r\\n     * this is by receiving a hash of the original message (which may otherwise\\r\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\r\\n     */\\r\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\r\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\r\\n        _throwError(error, errorArg);\\r\\n        return recovered;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\r\\n     *\\r\\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\\r\\n     */\\r\\n    function tryRecover(\\r\\n        bytes32 hash,\\r\\n        bytes32 r,\\r\\n        bytes32 vs\\r\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\r\\n        unchecked {\\r\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\r\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\r\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\r\\n            return tryRecover(hash, v, r, s);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\r\\n     */\\r\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\r\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\r\\n        _throwError(error, errorArg);\\r\\n        return recovered;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\r\\n     * `r` and `s` signature fields separately.\\r\\n     */\\r\\n    function tryRecover(\\r\\n        bytes32 hash,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\r\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\r\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\r\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\r\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\r\\n        //\\r\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\r\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\r\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\r\\n        // these malleable signatures as well.\\r\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\r\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\r\\n        }\\r\\n\\r\\n        // If the signature is valid (and not malleable), return the signer address\\r\\n        address signer = ecrecover(hash, v, r, s);\\r\\n        if (signer == address(0)) {\\r\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\r\\n        }\\r\\n\\r\\n        return (signer, RecoverError.NoError, bytes32(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\r\\n     * `r` and `s` signature fields separately.\\r\\n     */\\r\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\r\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\r\\n        _throwError(error, errorArg);\\r\\n        return recovered;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\r\\n     */\\r\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\r\\n        if (error == RecoverError.NoError) {\\r\\n            return; // no error: do nothing\\r\\n        } else if (error == RecoverError.InvalidSignature) {\\r\\n            revert ECDSAInvalidSignature();\\r\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\r\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\r\\n        } else if (error == RecoverError.InvalidSignatureS) {\\r\\n            revert ECDSAInvalidSignatureS(errorArg);\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3ba64381b3abdb4a23b9bc9db7002192d8725850f9f6a053e5fa9d4314c8b94e\",\"license\":\"MIT\"},\"contracts/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/EIP712.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\r\\nimport {ShortStrings, ShortString} from \\\"./ShortStrings.sol\\\";\\r\\nimport {IERC5267} from \\\"./IERC5267.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\\r\\n *\\r\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\r\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\r\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\r\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\r\\n *\\r\\n * This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\r\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\r\\n * ({_hashTypedDataV4}).\\r\\n *\\r\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\r\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\r\\n *\\r\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\r\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\r\\n *\\r\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\r\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\r\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\r\\n *\\r\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\r\\n */\\r\\nabstract contract EIP712 is IERC5267 {\\r\\n    using ShortStrings for *;\\r\\n\\r\\n    bytes32 private constant TYPE_HASH =\\r\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\r\\n\\r\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\r\\n    // invalidate the cached domain separator if the chain id changes.\\r\\n    bytes32 private immutable _cachedDomainSeparator;\\r\\n    uint256 private immutable _cachedChainId;\\r\\n    address private immutable _cachedThis;\\r\\n\\r\\n    bytes32 private immutable _hashedName;\\r\\n    bytes32 private immutable _hashedVersion;\\r\\n\\r\\n    ShortString private immutable _name;\\r\\n    ShortString private immutable _version;\\r\\n    string private _nameFallback;\\r\\n    string private _versionFallback;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the domain separator and parameter caches.\\r\\n     *\\r\\n     * The meaning of `name` and `version` is specified in\\r\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\\r\\n     *\\r\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\r\\n     * - `version`: the current major version of the signing domain.\\r\\n     *\\r\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\r\\n     * contract upgrade].\\r\\n     */\\r\\n    constructor(string memory name, string memory version) {\\r\\n        _name = name.toShortStringWithFallback(_nameFallback);\\r\\n        _version = version.toShortStringWithFallback(_versionFallback);\\r\\n        _hashedName = keccak256(bytes(name));\\r\\n        _hashedVersion = keccak256(bytes(version));\\r\\n\\r\\n        _cachedChainId = block.chainid;\\r\\n        _cachedDomainSeparator = _buildDomainSeparator();\\r\\n        _cachedThis = address(this);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator for the current chain.\\r\\n     */\\r\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\r\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\r\\n            return _cachedDomainSeparator;\\r\\n        } else {\\r\\n            return _buildDomainSeparator();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _buildDomainSeparator() private view returns (bytes32) {\\r\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\r\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\r\\n     *\\r\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\r\\n     *\\r\\n     * ```solidity\\r\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\r\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\r\\n     *     mailTo,\\r\\n     *     keccak256(bytes(mailContents))\\r\\n     * )));\\r\\n     * address signer = ECDSA.recover(digest, signature);\\r\\n     * ```\\r\\n     */\\r\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\r\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC-5267}.\\r\\n     */\\r\\n    function eip712Domain()\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (\\r\\n            bytes1 fields,\\r\\n            string memory name,\\r\\n            string memory version,\\r\\n            uint256 chainId,\\r\\n            address verifyingContract,\\r\\n            bytes32 salt,\\r\\n            uint256[] memory extensions\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            hex\\\"0f\\\", // 01111\\r\\n            _EIP712Name(),\\r\\n            _EIP712Version(),\\r\\n            block.chainid,\\r\\n            address(this),\\r\\n            bytes32(0),\\r\\n            new uint256[](0)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The name parameter for the EIP712 domain.\\r\\n     *\\r\\n     * NOTE: By default this function reads _name which is an immutable value.\\r\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function _EIP712Name() internal view returns (string memory) {\\r\\n        return _name.toStringWithFallback(_nameFallback);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The version parameter for the EIP712 domain.\\r\\n     *\\r\\n     * NOTE: By default this function reads _version which is an immutable value.\\r\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function _EIP712Version() internal view returns (string memory) {\\r\\n        return _version.toStringWithFallback(_versionFallback);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xeb35f2f9b63573584419e231bb9da189392766e3f98e7af862b5e481363324d1\",\"license\":\"MIT\"},\"contracts/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\nimport \\\"./EIP712.sol\\\";\\r\\nimport \\\"./Nonces.sol\\\";\\r\\nimport \\\"./IERC20Permit.sol\\\";\\r\\nimport \\\"./ECDSA.sol\\\";\\r\\n\\r\\ncontract ERC20 is IERC20, IERC20Metadata, IERC20Permit, EIP712, Nonces {\\r\\n    using Address for address;\\r\\n\\r\\n    bytes32 private constant PERMIT_TYPEHASH =\\r\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n\\r\\n    /**\\r\\n     * @dev Permit deadline has expired.\\r\\n     */\\r\\n    error ERC2612ExpiredSignature(uint256 deadline);\\r\\n\\r\\n    /**\\r\\n     * @dev Mismatched signature.\\r\\n     */\\r\\n    error ERC2612InvalidSigner(address signer, address owner);\\r\\n\\r\\n    mapping(address => uint256) private _balances;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    uint256 private _totalSupply;\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint256 totalSupply_\\r\\n    ) EIP712(name_, \\\"1\\\") {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _mint(msg.sender, totalSupply_);\\r\\n    }\\r\\n\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(\\r\\n        address account\\r\\n    ) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\r\\n        require(\\r\\n            currentAllowance >= amount,\\r\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _approve(sender, msg.sender, currentAllowance - amount);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[msg.sender][spender];\\r\\n        require(\\r\\n            currentAllowance >= subtractedValue,\\r\\n            \\\"ERC20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _approve(msg.sender, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    ) public virtual returns (bool) {\\r\\n        _approve(\\r\\n            msg.sender,\\r\\n            spender,\\r\\n            _allowances[msg.sender][spender] + addedValue\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(\\r\\n            senderBalance >= amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @inheritdoc IERC20Permit\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public virtual {\\r\\n        if (block.timestamp > deadline) {\\r\\n            revert ERC2612ExpiredSignature(deadline);\\r\\n        }\\r\\n\\r\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\r\\n\\r\\n        bytes32 hash = _hashTypedDataV4(structHash);\\r\\n\\r\\n        address signer = ECDSA.recover(hash, v, r, s);\\r\\n        if (signer != owner) {\\r\\n            revert ERC2612InvalidSigner(signer, owner);\\r\\n        }\\r\\n\\r\\n        _approve(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @inheritdoc IERC20Permit\\r\\n     */\\r\\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\\r\\n        return super.nonces(owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @inheritdoc IERC20Permit\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\r\\n        return _domainSeparatorV4();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2ef42dcc23ac09b9080f06f22a2128017f4257951b9444c4690e2c6d7fc69233\",\"license\":\"MIT\"},\"contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0xf1c6b3772a4f2ef609b691567d287ca660cfaf3c08098db2fab688161527d1cb\",\"license\":\"MIT\"},\"contracts/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x0058a9166490cd86c4a925e9eae26ba8b466c9e3f541ec8a9fbccf61d39a1b01\",\"license\":\"MIT\"},\"contracts/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Permit.sol)\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n *\\r\\n * ==== Security Considerations\\r\\n *\\r\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\r\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\r\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\r\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\r\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\r\\n * generally recommended is:\\r\\n *\\r\\n * ```solidity\\r\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\r\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\r\\n *     doThing(..., value);\\r\\n * }\\r\\n *\\r\\n * function doThing(..., uint256 value) public {\\r\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\r\\n *     ...\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\r\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\r\\n * {SafeERC20-safeTransferFrom}).\\r\\n *\\r\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\r\\n * contracts should have entry points that don't rely on permit.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\r\\n     * given ``owner``'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     *\\r\\n     * CAUTION: See Security Considerations above.\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\",\"keccak256\":\"0x909189190215940f2461390cb2795d420e4562e50944723b285ca21b7d9013d8\",\"license\":\"MIT\"},\"contracts/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IERC5267 {\\r\\n    /**\\r\\n     * @dev MAY be emitted to signal that the domain could have changed.\\r\\n     */\\r\\n    event EIP712DomainChanged();\\r\\n\\r\\n    /**\\r\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\r\\n     * signature.\\r\\n     */\\r\\n    function eip712Domain()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bytes1 fields,\\r\\n            string memory name,\\r\\n            string memory version,\\r\\n            uint256 chainId,\\r\\n            address verifyingContract,\\r\\n            bytes32 salt,\\r\\n            uint256[] memory extensions\\r\\n        );\\r\\n}\",\"keccak256\":\"0x876223edf7464250bf20a50724b2a732c33dd3ec84942c55e509786e3682d44d\",\"license\":\"MIT\"},\"contracts/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Muldiv operation overflow.\\r\\n     */\\r\\n    error MathOverflowedMulDiv();\\r\\n\\r\\n    enum Rounding {\\r\\n        Floor, // Toward negative infinity\\r\\n        Ceil, // Toward positive infinity\\r\\n        Trunc, // Toward zero\\r\\n        Expand // Away from zero\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a > b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow.\\r\\n        return (a & b) + (a ^ b) / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ceiling of the division of two numbers.\\r\\n     *\\r\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\r\\n     * of rounding towards zero.\\r\\n     */\\r\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (b == 0) {\\r\\n            // Guarantee the same behavior as in a regular Solidity division.\\r\\n            return a / b;\\r\\n        }\\r\\n\\r\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\r\\n     * denominator == 0.\\r\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\r\\n     * Uniswap Labs also under MIT license.\\r\\n     */\\r\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\r\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\r\\n            // variables such that product = prod1 * 2^256 + prod0.\\r\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\r\\n            uint256 prod1; // Most significant 256 bits of the product\\r\\n            assembly {\\r\\n                let mm := mulmod(x, y, not(0))\\r\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n            }\\r\\n\\r\\n            // Handle non-overflow cases, 256 by 256 division.\\r\\n            if (prod1 == 0) {\\r\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\r\\n                // The surrounding unchecked block does not change this fact.\\r\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\r\\n                return prod0 / denominator;\\r\\n            }\\r\\n\\r\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\r\\n            if (denominator <= prod1) {\\r\\n                revert MathOverflowedMulDiv();\\r\\n            }\\r\\n\\r\\n            ///////////////////////////////////////////////\\r\\n            // 512 by 256 division.\\r\\n            ///////////////////////////////////////////////\\r\\n\\r\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\r\\n            uint256 remainder;\\r\\n            assembly {\\r\\n                // Compute remainder using mulmod.\\r\\n                remainder := mulmod(x, y, denominator)\\r\\n\\r\\n                // Subtract 256 bit number from 512 bit number.\\r\\n                prod1 := sub(prod1, gt(remainder, prod0))\\r\\n                prod0 := sub(prod0, remainder)\\r\\n            }\\r\\n\\r\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\r\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\r\\n\\r\\n            uint256 twos = denominator & (0 - denominator);\\r\\n            assembly {\\r\\n                // Divide denominator by twos.\\r\\n                denominator := div(denominator, twos)\\r\\n\\r\\n                // Divide [prod1 prod0] by twos.\\r\\n                prod0 := div(prod0, twos)\\r\\n\\r\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\r\\n                twos := add(div(sub(0, twos), twos), 1)\\r\\n            }\\r\\n\\r\\n            // Shift in bits from prod1 into prod0.\\r\\n            prod0 |= prod1 * twos;\\r\\n\\r\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\r\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\r\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\r\\n            uint256 inverse = (3 * denominator) ^ 2;\\r\\n\\r\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\r\\n            // works in modular arithmetic, doubling the correct bits in each step.\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\r\\n\\r\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\r\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\r\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\r\\n            // is no longer required.\\r\\n            result = prod0 * inverse;\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\r\\n     */\\r\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\r\\n        uint256 result = mulDiv(x, y, denominator);\\r\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\r\\n            result += 1;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\r\\n     * towards zero.\\r\\n     *\\r\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\r\\n     */\\r\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\r\\n        //\\r\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\r\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\r\\n        //\\r\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\r\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\r\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\r\\n        //\\r\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\r\\n        uint256 result = 1 << (log2(a) >> 1);\\r\\n\\r\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\r\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\r\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\r\\n        // into the expected uint128 result.\\r\\n        unchecked {\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            return min(result, a / result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\r\\n     */\\r\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = sqrt(a);\\r\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 128;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                value >>= 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 4 > 0) {\\r\\n                value >>= 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 2 > 0) {\\r\\n                value >>= 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 1 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log2(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >= 10 ** 64) {\\r\\n                value /= 10 ** 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >= 10 ** 32) {\\r\\n                value /= 10 ** 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >= 10 ** 16) {\\r\\n                value /= 10 ** 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >= 10 ** 8) {\\r\\n                value /= 10 ** 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >= 10 ** 4) {\\r\\n                value /= 10 ** 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >= 10 ** 2) {\\r\\n                value /= 10 ** 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >= 10 ** 1) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log10(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     *\\r\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\r\\n     */\\r\\n    function log256(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log256(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\r\\n     */\\r\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\r\\n        return uint8(rounding) % 2 == 1;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x261822f7c729b791c53b2a67cdfb3e0d99168503824e451a3752009edad39f0d\",\"license\":\"MIT\"},\"contracts/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MessageHashUtils.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {Strings} from \\\"./Strings.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\r\\n *\\r\\n * The library provides methods for generating a hash of a message that conforms to the\\r\\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\r\\n * specifications.\\r\\n */\\r\\nlibrary MessageHashUtils {\\r\\n    /**\\r\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\r\\n     * `0x45` (`personal_sign` messages).\\r\\n     *\\r\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\r\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\r\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\r\\n     *\\r\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\r\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\r\\n     * be re-hashed.\\r\\n     *\\r\\n     * See {ECDSA-recover}.\\r\\n     */\\r\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\r\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\r\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\r\\n     * `0x45` (`personal_sign` messages).\\r\\n     *\\r\\n     * The digest is calculated by prefixing an arbitrary `message` with\\r\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\r\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\r\\n     *\\r\\n     * See {ECDSA-recover}.\\r\\n     */\\r\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\r\\n        return\\r\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\r\\n     * `0x00` (data with intended validator).\\r\\n     *\\r\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\r\\n     * `validator` address. Then hashing the result.\\r\\n     *\\r\\n     * See {ECDSA-recover}.\\r\\n     */\\r\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\\r\\n     *\\r\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\r\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\r\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\r\\n     *\\r\\n     * See {ECDSA-recover}.\\r\\n     */\\r\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            let ptr := mload(0x40)\\r\\n            mstore(ptr, hex\\\"19_01\\\")\\r\\n            mstore(add(ptr, 0x02), domainSeparator)\\r\\n            mstore(add(ptr, 0x22), structHash)\\r\\n            digest := keccak256(ptr, 0x42)\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x7b9ca38fb1b624a655cf5c87404a11ba3d55553887a6308c77c36f344010e3e9\",\"license\":\"MIT\"},\"contracts/Nonces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\r\\n */\\r\\nabstract contract Nonces {\\r\\n    /**\\r\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\r\\n     */\\r\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\r\\n\\r\\n    mapping(address => uint256) private _nonces;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the next unused nonce for an address.\\r\\n     */\\r\\n    function nonces(address owner) public view virtual returns (uint256) {\\r\\n        return _nonces[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Consumes a nonce.\\r\\n     *\\r\\n     * Returns the current value and increments nonce.\\r\\n     */\\r\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\r\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\r\\n        // decremented or reset. This guarantees that the nonce never overflows.\\r\\n        unchecked {\\r\\n            // It is important to do x++ and not ++x here.\\r\\n            return _nonces[owner]++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\r\\n     */\\r\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\r\\n        uint256 current = _useNonce(owner);\\r\\n        if (nonce != current) {\\r\\n            revert InvalidAccountNonce(owner, current);\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x761f552efdccf5856fc0ee3d8b8319b246e7f97d7d05ac71c20571212ce8027c\",\"license\":\"MIT\"},\"contracts/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\r\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\r\\n * easily result in undesired exploitation or bugs, since developers usually\\r\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\r\\n * reverting the transaction when such an operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeCast {\\r\\n    /**\\r\\n     * @dev Value doesn't fit in an uint of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedIntToUint(int256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Value doesn't fit in an int of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedUintToInt(uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint248).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint248` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 248 bits\\r\\n     */\\r\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\r\\n        if (value > type(uint248).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(248, value);\\r\\n        }\\r\\n        return uint248(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint240).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint240` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 240 bits\\r\\n     */\\r\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\r\\n        if (value > type(uint240).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(240, value);\\r\\n        }\\r\\n        return uint240(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint232).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint232` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 232 bits\\r\\n     */\\r\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\r\\n        if (value > type(uint232).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(232, value);\\r\\n        }\\r\\n        return uint232(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint224).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint224` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 224 bits\\r\\n     */\\r\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\r\\n        if (value > type(uint224).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(224, value);\\r\\n        }\\r\\n        return uint224(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint216).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint216` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 216 bits\\r\\n     */\\r\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\r\\n        if (value > type(uint216).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(216, value);\\r\\n        }\\r\\n        return uint216(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint208).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint208` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 208 bits\\r\\n     */\\r\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\r\\n        if (value > type(uint208).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(208, value);\\r\\n        }\\r\\n        return uint208(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint200).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint200` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 200 bits\\r\\n     */\\r\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\r\\n        if (value > type(uint200).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(200, value);\\r\\n        }\\r\\n        return uint200(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint192).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint192` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 192 bits\\r\\n     */\\r\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\r\\n        if (value > type(uint192).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(192, value);\\r\\n        }\\r\\n        return uint192(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint184).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint184` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 184 bits\\r\\n     */\\r\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\r\\n        if (value > type(uint184).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(184, value);\\r\\n        }\\r\\n        return uint184(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint176).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint176` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 176 bits\\r\\n     */\\r\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\r\\n        if (value > type(uint176).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(176, value);\\r\\n        }\\r\\n        return uint176(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint168).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint168` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 168 bits\\r\\n     */\\r\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\r\\n        if (value > type(uint168).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(168, value);\\r\\n        }\\r\\n        return uint168(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint160).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint160` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 160 bits\\r\\n     */\\r\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\r\\n        if (value > type(uint160).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(160, value);\\r\\n        }\\r\\n        return uint160(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint152).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint152` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 152 bits\\r\\n     */\\r\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\r\\n        if (value > type(uint152).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(152, value);\\r\\n        }\\r\\n        return uint152(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint144).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint144` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 144 bits\\r\\n     */\\r\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\r\\n        if (value > type(uint144).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(144, value);\\r\\n        }\\r\\n        return uint144(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint136).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint136` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 136 bits\\r\\n     */\\r\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\r\\n        if (value > type(uint136).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(136, value);\\r\\n        }\\r\\n        return uint136(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint128).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint128` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 128 bits\\r\\n     */\\r\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\r\\n        if (value > type(uint128).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(128, value);\\r\\n        }\\r\\n        return uint128(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint120).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint120` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 120 bits\\r\\n     */\\r\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\r\\n        if (value > type(uint120).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(120, value);\\r\\n        }\\r\\n        return uint120(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint112).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint112` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 112 bits\\r\\n     */\\r\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\r\\n        if (value > type(uint112).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(112, value);\\r\\n        }\\r\\n        return uint112(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint104).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint104` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 104 bits\\r\\n     */\\r\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\r\\n        if (value > type(uint104).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(104, value);\\r\\n        }\\r\\n        return uint104(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint96).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint96` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 96 bits\\r\\n     */\\r\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\r\\n        if (value > type(uint96).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(96, value);\\r\\n        }\\r\\n        return uint96(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint88).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint88` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 88 bits\\r\\n     */\\r\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\r\\n        if (value > type(uint88).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(88, value);\\r\\n        }\\r\\n        return uint88(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint80).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint80` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 80 bits\\r\\n     */\\r\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\r\\n        if (value > type(uint80).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(80, value);\\r\\n        }\\r\\n        return uint80(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint72).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint72` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 72 bits\\r\\n     */\\r\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\r\\n        if (value > type(uint72).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(72, value);\\r\\n        }\\r\\n        return uint72(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint64).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint64` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 64 bits\\r\\n     */\\r\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\r\\n        if (value > type(uint64).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(64, value);\\r\\n        }\\r\\n        return uint64(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint56).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint56` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 56 bits\\r\\n     */\\r\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\r\\n        if (value > type(uint56).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(56, value);\\r\\n        }\\r\\n        return uint56(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint48).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint48` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 48 bits\\r\\n     */\\r\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\r\\n        if (value > type(uint48).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(48, value);\\r\\n        }\\r\\n        return uint48(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint40).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint40` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 40 bits\\r\\n     */\\r\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\r\\n        if (value > type(uint40).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(40, value);\\r\\n        }\\r\\n        return uint40(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint32).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint32` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 32 bits\\r\\n     */\\r\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\r\\n        if (value > type(uint32).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(32, value);\\r\\n        }\\r\\n        return uint32(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint24).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint24` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 24 bits\\r\\n     */\\r\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\r\\n        if (value > type(uint24).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(24, value);\\r\\n        }\\r\\n        return uint24(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint16).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint16` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 16 bits\\r\\n     */\\r\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\r\\n        if (value > type(uint16).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(16, value);\\r\\n        }\\r\\n        return uint16(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint8).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint8` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 8 bits\\r\\n     */\\r\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\r\\n        if (value > type(uint8).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(8, value);\\r\\n        }\\r\\n        return uint8(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a signed int256 into an unsigned uint256.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must be greater than or equal to 0.\\r\\n     */\\r\\n    function toUint256(int256 value) internal pure returns (uint256) {\\r\\n        if (value < 0) {\\r\\n            revert SafeCastOverflowedIntToUint(value);\\r\\n        }\\r\\n        return uint256(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int248 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int248 or\\r\\n     * greater than largest int248).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int248` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 248 bits\\r\\n     */\\r\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\r\\n        downcasted = int248(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(248, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int240 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int240 or\\r\\n     * greater than largest int240).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int240` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 240 bits\\r\\n     */\\r\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\r\\n        downcasted = int240(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(240, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int232 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int232 or\\r\\n     * greater than largest int232).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int232` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 232 bits\\r\\n     */\\r\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\r\\n        downcasted = int232(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(232, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int224 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int224 or\\r\\n     * greater than largest int224).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int224` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 224 bits\\r\\n     */\\r\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\r\\n        downcasted = int224(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(224, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int216 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int216 or\\r\\n     * greater than largest int216).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int216` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 216 bits\\r\\n     */\\r\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\r\\n        downcasted = int216(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(216, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int208 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int208 or\\r\\n     * greater than largest int208).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int208` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 208 bits\\r\\n     */\\r\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\r\\n        downcasted = int208(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(208, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int200 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int200 or\\r\\n     * greater than largest int200).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int200` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 200 bits\\r\\n     */\\r\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\r\\n        downcasted = int200(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(200, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int192 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int192 or\\r\\n     * greater than largest int192).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int192` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 192 bits\\r\\n     */\\r\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\r\\n        downcasted = int192(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(192, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int184 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int184 or\\r\\n     * greater than largest int184).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int184` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 184 bits\\r\\n     */\\r\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\r\\n        downcasted = int184(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(184, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int176 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int176 or\\r\\n     * greater than largest int176).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int176` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 176 bits\\r\\n     */\\r\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\r\\n        downcasted = int176(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(176, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int168 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int168 or\\r\\n     * greater than largest int168).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int168` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 168 bits\\r\\n     */\\r\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\r\\n        downcasted = int168(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(168, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int160 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int160 or\\r\\n     * greater than largest int160).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int160` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 160 bits\\r\\n     */\\r\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\r\\n        downcasted = int160(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(160, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int152 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int152 or\\r\\n     * greater than largest int152).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int152` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 152 bits\\r\\n     */\\r\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\r\\n        downcasted = int152(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(152, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int144 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int144 or\\r\\n     * greater than largest int144).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int144` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 144 bits\\r\\n     */\\r\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\r\\n        downcasted = int144(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(144, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int136 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int136 or\\r\\n     * greater than largest int136).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int136` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 136 bits\\r\\n     */\\r\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\r\\n        downcasted = int136(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(136, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int128 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int128 or\\r\\n     * greater than largest int128).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int128` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 128 bits\\r\\n     */\\r\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\r\\n        downcasted = int128(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(128, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int120 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int120 or\\r\\n     * greater than largest int120).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int120` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 120 bits\\r\\n     */\\r\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\r\\n        downcasted = int120(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(120, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int112 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int112 or\\r\\n     * greater than largest int112).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int112` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 112 bits\\r\\n     */\\r\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\r\\n        downcasted = int112(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(112, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int104 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int104 or\\r\\n     * greater than largest int104).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int104` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 104 bits\\r\\n     */\\r\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\r\\n        downcasted = int104(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(104, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int96 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int96 or\\r\\n     * greater than largest int96).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int96` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 96 bits\\r\\n     */\\r\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\r\\n        downcasted = int96(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(96, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int88 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int88 or\\r\\n     * greater than largest int88).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int88` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 88 bits\\r\\n     */\\r\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\r\\n        downcasted = int88(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(88, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int80 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int80 or\\r\\n     * greater than largest int80).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int80` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 80 bits\\r\\n     */\\r\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\r\\n        downcasted = int80(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(80, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int72 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int72 or\\r\\n     * greater than largest int72).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int72` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 72 bits\\r\\n     */\\r\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\r\\n        downcasted = int72(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(72, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int64 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int64 or\\r\\n     * greater than largest int64).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int64` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 64 bits\\r\\n     */\\r\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\r\\n        downcasted = int64(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(64, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int56 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int56 or\\r\\n     * greater than largest int56).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int56` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 56 bits\\r\\n     */\\r\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\r\\n        downcasted = int56(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(56, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int48 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int48 or\\r\\n     * greater than largest int48).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int48` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 48 bits\\r\\n     */\\r\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\r\\n        downcasted = int48(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(48, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int40 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int40 or\\r\\n     * greater than largest int40).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int40` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 40 bits\\r\\n     */\\r\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\r\\n        downcasted = int40(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(40, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int32 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int32 or\\r\\n     * greater than largest int32).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int32` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 32 bits\\r\\n     */\\r\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\r\\n        downcasted = int32(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(32, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int24 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int24 or\\r\\n     * greater than largest int24).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int24` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 24 bits\\r\\n     */\\r\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\r\\n        downcasted = int24(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(24, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int16 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int16 or\\r\\n     * greater than largest int16).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int16` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 16 bits\\r\\n     */\\r\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\r\\n        downcasted = int16(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(16, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int8 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int8 or\\r\\n     * greater than largest int8).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int8` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 8 bits\\r\\n     */\\r\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\r\\n        downcasted = int8(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(8, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an unsigned uint256 into a signed int256.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must be less than or equal to maxInt256.\\r\\n     */\\r\\n    function toInt256(uint256 value) internal pure returns (int256) {\\r\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\r\\n        if (value > uint256(type(int256).max)) {\\r\\n            revert SafeCastOverflowedUintToInt(value);\\r\\n        }\\r\\n        return int256(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\r\\n     */\\r\\n    function toUint(bool b) internal pure returns (uint256 u) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            u := iszero(iszero(b))\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x961a6a8aa2b6fef7d623252db5edca2d69cbc32192240805d5c2ab1e0f6344b1\",\"license\":\"MIT\"},\"contracts/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ShortStrings.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\r\\n\\r\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\r\\n// | length  | 0x                                                              BB |\\r\\ntype ShortString is bytes32;\\r\\n\\r\\n/**\\r\\n * @dev This library provides functions to convert short memory strings\\r\\n * into a `ShortString` type that can be used as an immutable variable.\\r\\n *\\r\\n * Strings of arbitrary length can be optimized using this library if\\r\\n * they are short enough (up to 31 bytes) by packing them with their\\r\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\r\\n * fallback mechanism can be used for every other case.\\r\\n *\\r\\n * Usage example:\\r\\n *\\r\\n * ```solidity\\r\\n * contract Named {\\r\\n *     using ShortStrings for *;\\r\\n *\\r\\n *     ShortString private immutable _name;\\r\\n *     string private _nameFallback;\\r\\n *\\r\\n *     constructor(string memory contractName) {\\r\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\r\\n *     }\\r\\n *\\r\\n *     function name() external view returns (string memory) {\\r\\n *         return _name.toStringWithFallback(_nameFallback);\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n */\\r\\nlibrary ShortStrings {\\r\\n    // Used as an identifier for strings longer than 31 bytes.\\r\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\r\\n\\r\\n    error StringTooLong(string str);\\r\\n    error InvalidShortString();\\r\\n\\r\\n    /**\\r\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\r\\n     *\\r\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\r\\n     */\\r\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\r\\n        bytes memory bstr = bytes(str);\\r\\n        if (bstr.length > 31) {\\r\\n            revert StringTooLong(str);\\r\\n        }\\r\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\r\\n     */\\r\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\r\\n        uint256 len = byteLength(sstr);\\r\\n        // using `new string(len)` would work locally but is not memory safe.\\r\\n        string memory str = new string(32);\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            mstore(str, len)\\r\\n            mstore(add(str, 0x20), sstr)\\r\\n        }\\r\\n        return str;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the length of a `ShortString`.\\r\\n     */\\r\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\r\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\r\\n        if (result > 31) {\\r\\n            revert InvalidShortString();\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\r\\n     */\\r\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\r\\n        if (bytes(value).length < 32) {\\r\\n            return toShortString(value);\\r\\n        } else {\\r\\n            StorageSlot.getStringSlot(store).value = value;\\r\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\r\\n     */\\r\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\r\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\r\\n            return toString(value);\\r\\n        } else {\\r\\n            return store;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\r\\n     * {setWithFallback}.\\r\\n     *\\r\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\r\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\r\\n     */\\r\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\r\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\r\\n            return byteLength(value);\\r\\n        } else {\\r\\n            return bytes(store).length;\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x100b22b7cf45a6da890e082b8d10211711bd1c7fbc2acdd9701c155ecfb9815d\",\"license\":\"MIT\"},\"contracts/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Standard signed math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary SignedMath {\\r\\n    /**\\r\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\r\\n     *\\r\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\r\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\r\\n     * one branch when needed, making this function more expensive.\\r\\n     */\\r\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\r\\n        unchecked {\\r\\n            // branchless ternary works because:\\r\\n            // b ^ (a ^ b) == a\\r\\n            // b ^ 0 == b\\r\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two signed numbers.\\r\\n     */\\r\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return ternary(a > b, a, b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two signed numbers.\\r\\n     */\\r\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return ternary(a < b, a, b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two signed numbers without overflow.\\r\\n     * The result is rounded towards zero.\\r\\n     */\\r\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\r\\n        // Formula from the book \\\"Hacker's Delight\\\"\\r\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\r\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the absolute unsigned value of a signed value.\\r\\n     */\\r\\n    function abs(int256 n) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\r\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\r\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\r\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\r\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\r\\n            int256 mask = n >> 255;\\r\\n\\r\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\r\\n            return uint256((n + mask) ^ mask);\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x0cbccda1e8f10a7217a92a04970cc83fe09795ad78586917c8a5d932c8d12501\",\"license\":\"MIT\"},\"contracts/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\r\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Library for reading and writing primitive types to specific storage slots.\\r\\n *\\r\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\r\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\r\\n *\\r\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\r\\n *\\r\\n * Example usage to set ERC-1967 implementation slot:\\r\\n * ```solidity\\r\\n * contract ERC1967 {\\r\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\r\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n *\\r\\n *     function _getImplementation() internal view returns (address) {\\r\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\r\\n *     }\\r\\n *\\r\\n *     function _setImplementation(address newImplementation) internal {\\r\\n *         require(newImplementation.code.length > 0);\\r\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * TIP: Consider using this library along with {SlotDerivation}.\\r\\n */\\r\\nlibrary StorageSlot {\\r\\n    struct AddressSlot {\\r\\n        address value;\\r\\n    }\\r\\n\\r\\n    struct BooleanSlot {\\r\\n        bool value;\\r\\n    }\\r\\n\\r\\n    struct Bytes32Slot {\\r\\n        bytes32 value;\\r\\n    }\\r\\n\\r\\n    struct Uint256Slot {\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    struct Int256Slot {\\r\\n        int256 value;\\r\\n    }\\r\\n\\r\\n    struct StringSlot {\\r\\n        string value;\\r\\n    }\\r\\n\\r\\n    struct BytesSlot {\\r\\n        bytes value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\r\\n     */\\r\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := store.slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\r\\n     */\\r\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := store.slot\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x85be17dae57122cd5d8658fff9ffa8ef7bf6271cd3d416dd1a9dca13532f1fd0\",\"license\":\"MIT\"},\"contracts/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Strings.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {Math} from \\\"./Math.sol\\\";\\r\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\r\\nimport {SignedMath} from \\\"./SignedMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    using SafeCast for *;\\r\\n\\r\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\r\\n    uint8 private constant ADDRESS_LENGTH = 20;\\r\\n\\r\\n    /**\\r\\n     * @dev The `value` string doesn't fit in the specified `length`.\\r\\n     */\\r\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\r\\n\\r\\n    /**\\r\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\r\\n     */\\r\\n    error StringsInvalidChar();\\r\\n\\r\\n    /**\\r\\n     * @dev The string being parsed is not a properly formatted address.\\r\\n     */\\r\\n    error StringsInvalidAddressFormat();\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            uint256 length = Math.log10(value) + 1;\\r\\n            string memory buffer = new string(length);\\r\\n            uint256 ptr;\\r\\n            assembly (\\\"memory-safe\\\") {\\r\\n                ptr := add(buffer, add(32, length))\\r\\n            }\\r\\n            while (true) {\\r\\n                ptr--;\\r\\n                assembly (\\\"memory-safe\\\") {\\r\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\r\\n                }\\r\\n                value /= 10;\\r\\n                if (value == 0) break;\\r\\n            }\\r\\n            return buffer;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\r\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            return toHexString(value, Math.log256(value) + 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        uint256 localValue = value;\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\r\\n            localValue >>= 4;\\r\\n        }\\r\\n        if (localValue != 0) {\\r\\n            revert StringsInsufficientHexLength(value, length);\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\r\\n     * representation.\\r\\n     */\\r\\n    function toHexString(address addr) internal pure returns (string memory) {\\r\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\r\\n     * representation, according to EIP-55.\\r\\n     */\\r\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\r\\n        bytes memory buffer = bytes(toHexString(addr));\\r\\n\\r\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\r\\n        uint256 hashValue;\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 41; i > 1; --i) {\\r\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\r\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\r\\n                // case shift by xoring with 0x20\\r\\n                buffer[i] ^= 0x20;\\r\\n            }\\r\\n            hashValue >>= 4;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the two strings are equal.\\r\\n     */\\r\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\r\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The string must be formatted as `[0-9]*`\\r\\n     * - The result must fit into an `uint256` type\\r\\n     */\\r\\n    function parseUint(string memory input) internal pure returns (uint256) {\\r\\n        return parseUint(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\\r\\n     * `end` (excluded).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The substring must be formatted as `[0-9]*`\\r\\n     * - The result must fit into an `uint256` type\\r\\n     */\\r\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\r\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\r\\n        if (!success) revert StringsInvalidChar();\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\r\\n     *\\r\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\r\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\r\\n     * character.\\r\\n     *\\r\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseUint(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) internal pure returns (bool success, uint256 value) {\\r\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\r\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {tryParseUint} that does not check bounds and returns (true, 0) if they are invalid.\\r\\n     */\\r\\n    function _tryParseUintUncheckedBounds(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) private pure returns (bool success, uint256 value) {\\r\\n        bytes memory buffer = bytes(input);\\r\\n\\r\\n        uint256 result = 0;\\r\\n        for (uint256 i = begin; i < end; ++i) {\\r\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\r\\n            if (chr > 9) return (false, 0);\\r\\n            result *= 10;\\r\\n            result += chr;\\r\\n        }\\r\\n        return (true, result);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The string must be formatted as `[-+]?[0-9]*`\\r\\n     * - The result must fit in an `int256` type.\\r\\n     */\\r\\n    function parseInt(string memory input) internal pure returns (int256) {\\r\\n        return parseInt(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\r\\n     * `end` (excluded).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\r\\n     * - The result must fit in an `int256` type.\\r\\n     */\\r\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\r\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\r\\n        if (!success) revert StringsInvalidChar();\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\r\\n     * the result does not fit in a `int256`.\\r\\n     *\\r\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\r\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\r\\n     * character or if the result does not fit in a `int256`.\\r\\n     *\\r\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseInt(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) internal pure returns (bool success, int256 value) {\\r\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\r\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {tryParseInt} that does not check bounds and returns (true, 0) if they are invalid.\\r\\n     */\\r\\n    function _tryParseIntUncheckedBounds(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) private pure returns (bool success, int256 value) {\\r\\n        bytes memory buffer = bytes(input);\\r\\n\\r\\n        // Check presence of a negative sign.\\r\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\r\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\r\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\r\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\r\\n\\r\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\r\\n\\r\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\r\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\r\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\r\\n            return (true, type(int256).min);\\r\\n        } else return (false, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\r\\n     * - The result must fit in an `uint256` type.\\r\\n     */\\r\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\r\\n        return parseHexUint(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\\r\\n     * `end` (excluded).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\r\\n     * - The result must fit in an `uint256` type.\\r\\n     */\\r\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\r\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\r\\n        if (!success) revert StringsInvalidChar();\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\r\\n     *\\r\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\r\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\r\\n     * invalid character.\\r\\n     *\\r\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseHexUint(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) internal pure returns (bool success, uint256 value) {\\r\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\r\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {tryParseHexUint} that does not check bounds and returns (true, 0) if they are invalid.\\r\\n     */\\r\\n    function _tryParseHexUintUncheckedBounds(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) private pure returns (bool success, uint256 value) {\\r\\n        bytes memory buffer = bytes(input);\\r\\n\\r\\n        // skip 0x prefix if present\\r\\n        bool hasPrefix = (begin < end + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\r\\n        uint256 offset = hasPrefix.toUint() * 2;\\r\\n\\r\\n        uint256 result = 0;\\r\\n        for (uint256 i = begin + offset; i < end; ++i) {\\r\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\r\\n            if (chr > 15) return (false, 0);\\r\\n            result *= 16;\\r\\n            unchecked {\\r\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\r\\n                // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.\\r\\n                result += chr;\\r\\n            }\\r\\n        }\\r\\n        return (true, result);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\r\\n     */\\r\\n    function parseAddress(string memory input) internal pure returns (address) {\\r\\n        return parseAddress(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\\r\\n     * `end` (excluded).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\r\\n     */\\r\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\r\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\r\\n        if (!success) revert StringsInvalidAddressFormat();\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\r\\n     * formatted address. See {parseAddress} requirements.\\r\\n     */\\r\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\r\\n        return tryParseAddress(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\r\\n     * formatted address. See {parseAddress} requirements.\\r\\n     */\\r\\n    function tryParseAddress(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) internal pure returns (bool success, address value) {\\r\\n        // check that input is the correct length\\r\\n        bool hasPrefix = (begin < end + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\r\\n\\r\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\r\\n\\r\\n        if (end - begin == expectedLength && end <= bytes(input).length) {\\r\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\r\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\r\\n            return (s, address(uint160(v)));\\r\\n        } else {\\r\\n            return (false, address(0));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\r\\n        uint8 value = uint8(chr);\\r\\n\\r\\n        // Try to parse `chr`:\\r\\n        // - Case 1: [0-9]\\r\\n        // - Case 2: [a-f]\\r\\n        // - Case 3: [A-F]\\r\\n        // - otherwise not supported\\r\\n        unchecked {\\r\\n            if (value > 47 && value < 58) value -= 48;\\r\\n            else if (value > 96 && value < 103) value -= 87;\\r\\n            else if (value > 64 && value < 71) value -= 55;\\r\\n            else return type(uint8).max;\\r\\n        }\\r\\n\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\r\\n     *\\r\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\r\\n     * assembly block as such would prevent some optimizations.\\r\\n     */\\r\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\r\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            value := mload(add(buffer, add(0x20, offset)))\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xce5ca113d4cd3005cbf2109590734a0410a5eebc6fc94d258af1897a40c29341\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":679,"contract":"contracts/ERC20.sol:ERC20","label":"_nameFallback","offset":0,"slot":"0","type":"t_string_storage"},{"astId":681,"contract":"contracts/ERC20.sol:ERC20","label":"_versionFallback","offset":0,"slot":"1","type":"t_string_storage"},{"astId":2712,"contract":"contracts/ERC20.sol:ERC20","label":"_nonces","offset":0,"slot":"2","type":"t_mapping(t_address,t_uint256)"},{"astId":912,"contract":"contracts/ERC20.sol:ERC20","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":918,"contract":"contracts/ERC20.sol:ERC20","label":"_allowances","offset":0,"slot":"4","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":920,"contract":"contracts/ERC20.sol:ERC20","label":"_totalSupply","offset":0,"slot":"5","type":"t_uint256"},{"astId":922,"contract":"contracts/ERC20.sol:ERC20","label":"_name","offset":0,"slot":"6","type":"t_string_storage"},{"astId":924,"contract":"contracts/ERC20.sol:ERC20","label":"_symbol","offset":0,"slot":"7","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}},"contracts/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0xf1c6b3772a4f2ef609b691567d287ca660cfaf3c08098db2fab688161527d1cb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null}}},"contracts/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0xf1c6b3772a4f2ef609b691567d287ca660cfaf3c08098db2fab688161527d1cb\",\"license\":\"MIT\"},\"contracts/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x0058a9166490cd86c4a925e9eae26ba8b466c9e3f541ec8a9fbccf61d39a1b01\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null}}},"contracts/IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[ERC-2612]. Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Permit.sol)\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n *\\r\\n * ==== Security Considerations\\r\\n *\\r\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\r\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\r\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\r\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\r\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\r\\n * generally recommended is:\\r\\n *\\r\\n * ```solidity\\r\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\r\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\r\\n *     doThing(..., value);\\r\\n * }\\r\\n *\\r\\n * function doThing(..., uint256 value) public {\\r\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\r\\n *     ...\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\r\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\r\\n * {SafeERC20-safeTransferFrom}).\\r\\n *\\r\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\r\\n * contracts should have entry points that don't rely on permit.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\r\\n     * given ``owner``'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     *\\r\\n     * CAUTION: See Security Considerations above.\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\",\"keccak256\":\"0x909189190215940f2461390cb2795d420e4562e50944723b285ca21b7d9013d8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null}}},"contracts/IERC5267.sol":{"IERC5267":{"abi":[{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"eip712Domain()":"84b0196e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IERC5267.sol\":\"IERC5267\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IERC5267 {\\r\\n    /**\\r\\n     * @dev MAY be emitted to signal that the domain could have changed.\\r\\n     */\\r\\n    event EIP712DomainChanged();\\r\\n\\r\\n    /**\\r\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\r\\n     * signature.\\r\\n     */\\r\\n    function eip712Domain()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bytes1 fields,\\r\\n            string memory name,\\r\\n            string memory version,\\r\\n            uint256 chainId,\\r\\n            address verifyingContract,\\r\\n            bytes32 salt,\\r\\n            uint256[] memory extensions\\r\\n        );\\r\\n}\",\"keccak256\":\"0x876223edf7464250bf20a50724b2a732c33dd3ec84942c55e509786e3682d44d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null}}},"contracts/Math.sol":{"Math":{"abi":[{"inputs":[],"name":"MathOverflowedMulDiv","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c9fe99980930069d53aad82aa7b6b6308003ace398fc175ae3c11dd66115d8a964736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 INVALID SWAP10 SWAP9 MULMOD ADDRESS MOD SWAP14 MSTORE8 0xAA 0xD8 0x2A 0xA7 0xB6 0xB6 ADDRESS DUP1 SUB 0xAC 0xE3 SWAP9 0xFC OR GAS 0xE3 0xC1 SAR 0xD6 PUSH2 0x15D8 0xA9 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"210:15320:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;210:15320:8;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c9fe99980930069d53aad82aa7b6b6308003ace398fc175ae3c11dd66115d8a964736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 INVALID SWAP10 SWAP9 MULMOD ADDRESS MOD SWAP14 MSTORE8 0xAA 0xD8 0x2A 0xA7 0xB6 0xB6 ADDRESS DUP1 SUB 0xAC 0xE3 SWAP9 0xFC OR GAS 0xE3 0xC1 SAR 0xD6 PUSH2 0x15D8 0xA9 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"210:15320:8:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Muldiv operation overflow.\\r\\n     */\\r\\n    error MathOverflowedMulDiv();\\r\\n\\r\\n    enum Rounding {\\r\\n        Floor, // Toward negative infinity\\r\\n        Ceil, // Toward positive infinity\\r\\n        Trunc, // Toward zero\\r\\n        Expand // Away from zero\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a > b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow.\\r\\n        return (a & b) + (a ^ b) / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ceiling of the division of two numbers.\\r\\n     *\\r\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\r\\n     * of rounding towards zero.\\r\\n     */\\r\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (b == 0) {\\r\\n            // Guarantee the same behavior as in a regular Solidity division.\\r\\n            return a / b;\\r\\n        }\\r\\n\\r\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\r\\n     * denominator == 0.\\r\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\r\\n     * Uniswap Labs also under MIT license.\\r\\n     */\\r\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\r\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\r\\n            // variables such that product = prod1 * 2^256 + prod0.\\r\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\r\\n            uint256 prod1; // Most significant 256 bits of the product\\r\\n            assembly {\\r\\n                let mm := mulmod(x, y, not(0))\\r\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n            }\\r\\n\\r\\n            // Handle non-overflow cases, 256 by 256 division.\\r\\n            if (prod1 == 0) {\\r\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\r\\n                // The surrounding unchecked block does not change this fact.\\r\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\r\\n                return prod0 / denominator;\\r\\n            }\\r\\n\\r\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\r\\n            if (denominator <= prod1) {\\r\\n                revert MathOverflowedMulDiv();\\r\\n            }\\r\\n\\r\\n            ///////////////////////////////////////////////\\r\\n            // 512 by 256 division.\\r\\n            ///////////////////////////////////////////////\\r\\n\\r\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\r\\n            uint256 remainder;\\r\\n            assembly {\\r\\n                // Compute remainder using mulmod.\\r\\n                remainder := mulmod(x, y, denominator)\\r\\n\\r\\n                // Subtract 256 bit number from 512 bit number.\\r\\n                prod1 := sub(prod1, gt(remainder, prod0))\\r\\n                prod0 := sub(prod0, remainder)\\r\\n            }\\r\\n\\r\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\r\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\r\\n\\r\\n            uint256 twos = denominator & (0 - denominator);\\r\\n            assembly {\\r\\n                // Divide denominator by twos.\\r\\n                denominator := div(denominator, twos)\\r\\n\\r\\n                // Divide [prod1 prod0] by twos.\\r\\n                prod0 := div(prod0, twos)\\r\\n\\r\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\r\\n                twos := add(div(sub(0, twos), twos), 1)\\r\\n            }\\r\\n\\r\\n            // Shift in bits from prod1 into prod0.\\r\\n            prod0 |= prod1 * twos;\\r\\n\\r\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\r\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\r\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\r\\n            uint256 inverse = (3 * denominator) ^ 2;\\r\\n\\r\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\r\\n            // works in modular arithmetic, doubling the correct bits in each step.\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\r\\n\\r\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\r\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\r\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\r\\n            // is no longer required.\\r\\n            result = prod0 * inverse;\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\r\\n     */\\r\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\r\\n        uint256 result = mulDiv(x, y, denominator);\\r\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\r\\n            result += 1;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\r\\n     * towards zero.\\r\\n     *\\r\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\r\\n     */\\r\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\r\\n        //\\r\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\r\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\r\\n        //\\r\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\r\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\r\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\r\\n        //\\r\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\r\\n        uint256 result = 1 << (log2(a) >> 1);\\r\\n\\r\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\r\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\r\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\r\\n        // into the expected uint128 result.\\r\\n        unchecked {\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            return min(result, a / result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\r\\n     */\\r\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = sqrt(a);\\r\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 128;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                value >>= 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 4 > 0) {\\r\\n                value >>= 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 2 > 0) {\\r\\n                value >>= 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 1 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log2(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >= 10 ** 64) {\\r\\n                value /= 10 ** 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >= 10 ** 32) {\\r\\n                value /= 10 ** 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >= 10 ** 16) {\\r\\n                value /= 10 ** 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >= 10 ** 8) {\\r\\n                value /= 10 ** 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >= 10 ** 4) {\\r\\n                value /= 10 ** 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >= 10 ** 2) {\\r\\n                value /= 10 ** 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >= 10 ** 1) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log10(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     *\\r\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\r\\n     */\\r\\n    function log256(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log256(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\r\\n     */\\r\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\r\\n        return uint8(rounding) % 2 == 1;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x261822f7c729b791c53b2a67cdfb3e0d99168503824e451a3752009edad39f0d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null}}},"contracts/MessageHashUtils.sol":{"MessageHashUtils":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122098138a648582c876869373e37bd8b22782fa3fbf686e5e16fb596555ee6eeb1a64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 SGT DUP11 PUSH5 0x8582C87686 SWAP4 PUSH20 0xE37BD8B22782FA3FBF686E5E16FB596555EE6EEB BYTE PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"533:3250:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;533:3250:9;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122098138a648582c876869373e37bd8b22782fa3fbf686e5e16fb596555ee6eeb1a64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 SGT DUP11 PUSH5 0x8582C87686 SWAP4 PUSH20 0xE37BD8B22782FA3FBF686E5E16FB596555EE6EEB BYTE PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"533:3250:9:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MessageHashUtils.sol\":\"MessageHashUtils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Muldiv operation overflow.\\r\\n     */\\r\\n    error MathOverflowedMulDiv();\\r\\n\\r\\n    enum Rounding {\\r\\n        Floor, // Toward negative infinity\\r\\n        Ceil, // Toward positive infinity\\r\\n        Trunc, // Toward zero\\r\\n        Expand // Away from zero\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a > b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow.\\r\\n        return (a & b) + (a ^ b) / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ceiling of the division of two numbers.\\r\\n     *\\r\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\r\\n     * of rounding towards zero.\\r\\n     */\\r\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (b == 0) {\\r\\n            // Guarantee the same behavior as in a regular Solidity division.\\r\\n            return a / b;\\r\\n        }\\r\\n\\r\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\r\\n     * denominator == 0.\\r\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\r\\n     * Uniswap Labs also under MIT license.\\r\\n     */\\r\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\r\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\r\\n            // variables such that product = prod1 * 2^256 + prod0.\\r\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\r\\n            uint256 prod1; // Most significant 256 bits of the product\\r\\n            assembly {\\r\\n                let mm := mulmod(x, y, not(0))\\r\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n            }\\r\\n\\r\\n            // Handle non-overflow cases, 256 by 256 division.\\r\\n            if (prod1 == 0) {\\r\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\r\\n                // The surrounding unchecked block does not change this fact.\\r\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\r\\n                return prod0 / denominator;\\r\\n            }\\r\\n\\r\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\r\\n            if (denominator <= prod1) {\\r\\n                revert MathOverflowedMulDiv();\\r\\n            }\\r\\n\\r\\n            ///////////////////////////////////////////////\\r\\n            // 512 by 256 division.\\r\\n            ///////////////////////////////////////////////\\r\\n\\r\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\r\\n            uint256 remainder;\\r\\n            assembly {\\r\\n                // Compute remainder using mulmod.\\r\\n                remainder := mulmod(x, y, denominator)\\r\\n\\r\\n                // Subtract 256 bit number from 512 bit number.\\r\\n                prod1 := sub(prod1, gt(remainder, prod0))\\r\\n                prod0 := sub(prod0, remainder)\\r\\n            }\\r\\n\\r\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\r\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\r\\n\\r\\n            uint256 twos = denominator & (0 - denominator);\\r\\n            assembly {\\r\\n                // Divide denominator by twos.\\r\\n                denominator := div(denominator, twos)\\r\\n\\r\\n                // Divide [prod1 prod0] by twos.\\r\\n                prod0 := div(prod0, twos)\\r\\n\\r\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\r\\n                twos := add(div(sub(0, twos), twos), 1)\\r\\n            }\\r\\n\\r\\n            // Shift in bits from prod1 into prod0.\\r\\n            prod0 |= prod1 * twos;\\r\\n\\r\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\r\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\r\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\r\\n            uint256 inverse = (3 * denominator) ^ 2;\\r\\n\\r\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\r\\n            // works in modular arithmetic, doubling the correct bits in each step.\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\r\\n\\r\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\r\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\r\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\r\\n            // is no longer required.\\r\\n            result = prod0 * inverse;\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\r\\n     */\\r\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\r\\n        uint256 result = mulDiv(x, y, denominator);\\r\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\r\\n            result += 1;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\r\\n     * towards zero.\\r\\n     *\\r\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\r\\n     */\\r\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\r\\n        //\\r\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\r\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\r\\n        //\\r\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\r\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\r\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\r\\n        //\\r\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\r\\n        uint256 result = 1 << (log2(a) >> 1);\\r\\n\\r\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\r\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\r\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\r\\n        // into the expected uint128 result.\\r\\n        unchecked {\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            return min(result, a / result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\r\\n     */\\r\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = sqrt(a);\\r\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 128;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                value >>= 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 4 > 0) {\\r\\n                value >>= 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 2 > 0) {\\r\\n                value >>= 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 1 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log2(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >= 10 ** 64) {\\r\\n                value /= 10 ** 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >= 10 ** 32) {\\r\\n                value /= 10 ** 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >= 10 ** 16) {\\r\\n                value /= 10 ** 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >= 10 ** 8) {\\r\\n                value /= 10 ** 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >= 10 ** 4) {\\r\\n                value /= 10 ** 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >= 10 ** 2) {\\r\\n                value /= 10 ** 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >= 10 ** 1) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log10(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     *\\r\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\r\\n     */\\r\\n    function log256(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log256(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\r\\n     */\\r\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\r\\n        return uint8(rounding) % 2 == 1;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x261822f7c729b791c53b2a67cdfb3e0d99168503824e451a3752009edad39f0d\",\"license\":\"MIT\"},\"contracts/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MessageHashUtils.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {Strings} from \\\"./Strings.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\r\\n *\\r\\n * The library provides methods for generating a hash of a message that conforms to the\\r\\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\r\\n * specifications.\\r\\n */\\r\\nlibrary MessageHashUtils {\\r\\n    /**\\r\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\r\\n     * `0x45` (`personal_sign` messages).\\r\\n     *\\r\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\r\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\r\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\r\\n     *\\r\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\r\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\r\\n     * be re-hashed.\\r\\n     *\\r\\n     * See {ECDSA-recover}.\\r\\n     */\\r\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\r\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\r\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\r\\n     * `0x45` (`personal_sign` messages).\\r\\n     *\\r\\n     * The digest is calculated by prefixing an arbitrary `message` with\\r\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\r\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\r\\n     *\\r\\n     * See {ECDSA-recover}.\\r\\n     */\\r\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\r\\n        return\\r\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\r\\n     * `0x00` (data with intended validator).\\r\\n     *\\r\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\r\\n     * `validator` address. Then hashing the result.\\r\\n     *\\r\\n     * See {ECDSA-recover}.\\r\\n     */\\r\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\\r\\n     *\\r\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\r\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\r\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\r\\n     *\\r\\n     * See {ECDSA-recover}.\\r\\n     */\\r\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            let ptr := mload(0x40)\\r\\n            mstore(ptr, hex\\\"19_01\\\")\\r\\n            mstore(add(ptr, 0x02), domainSeparator)\\r\\n            mstore(add(ptr, 0x22), structHash)\\r\\n            digest := keccak256(ptr, 0x42)\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x7b9ca38fb1b624a655cf5c87404a11ba3d55553887a6308c77c36f344010e3e9\",\"license\":\"MIT\"},\"contracts/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\r\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\r\\n * easily result in undesired exploitation or bugs, since developers usually\\r\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\r\\n * reverting the transaction when such an operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeCast {\\r\\n    /**\\r\\n     * @dev Value doesn't fit in an uint of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedIntToUint(int256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Value doesn't fit in an int of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedUintToInt(uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint248).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint248` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 248 bits\\r\\n     */\\r\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\r\\n        if (value > type(uint248).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(248, value);\\r\\n        }\\r\\n        return uint248(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint240).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint240` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 240 bits\\r\\n     */\\r\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\r\\n        if (value > type(uint240).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(240, value);\\r\\n        }\\r\\n        return uint240(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint232).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint232` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 232 bits\\r\\n     */\\r\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\r\\n        if (value > type(uint232).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(232, value);\\r\\n        }\\r\\n        return uint232(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint224).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint224` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 224 bits\\r\\n     */\\r\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\r\\n        if (value > type(uint224).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(224, value);\\r\\n        }\\r\\n        return uint224(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint216).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint216` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 216 bits\\r\\n     */\\r\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\r\\n        if (value > type(uint216).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(216, value);\\r\\n        }\\r\\n        return uint216(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint208).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint208` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 208 bits\\r\\n     */\\r\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\r\\n        if (value > type(uint208).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(208, value);\\r\\n        }\\r\\n        return uint208(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint200).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint200` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 200 bits\\r\\n     */\\r\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\r\\n        if (value > type(uint200).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(200, value);\\r\\n        }\\r\\n        return uint200(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint192).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint192` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 192 bits\\r\\n     */\\r\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\r\\n        if (value > type(uint192).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(192, value);\\r\\n        }\\r\\n        return uint192(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint184).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint184` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 184 bits\\r\\n     */\\r\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\r\\n        if (value > type(uint184).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(184, value);\\r\\n        }\\r\\n        return uint184(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint176).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint176` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 176 bits\\r\\n     */\\r\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\r\\n        if (value > type(uint176).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(176, value);\\r\\n        }\\r\\n        return uint176(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint168).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint168` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 168 bits\\r\\n     */\\r\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\r\\n        if (value > type(uint168).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(168, value);\\r\\n        }\\r\\n        return uint168(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint160).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint160` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 160 bits\\r\\n     */\\r\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\r\\n        if (value > type(uint160).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(160, value);\\r\\n        }\\r\\n        return uint160(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint152).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint152` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 152 bits\\r\\n     */\\r\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\r\\n        if (value > type(uint152).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(152, value);\\r\\n        }\\r\\n        return uint152(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint144).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint144` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 144 bits\\r\\n     */\\r\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\r\\n        if (value > type(uint144).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(144, value);\\r\\n        }\\r\\n        return uint144(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint136).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint136` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 136 bits\\r\\n     */\\r\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\r\\n        if (value > type(uint136).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(136, value);\\r\\n        }\\r\\n        return uint136(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint128).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint128` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 128 bits\\r\\n     */\\r\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\r\\n        if (value > type(uint128).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(128, value);\\r\\n        }\\r\\n        return uint128(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint120).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint120` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 120 bits\\r\\n     */\\r\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\r\\n        if (value > type(uint120).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(120, value);\\r\\n        }\\r\\n        return uint120(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint112).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint112` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 112 bits\\r\\n     */\\r\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\r\\n        if (value > type(uint112).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(112, value);\\r\\n        }\\r\\n        return uint112(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint104).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint104` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 104 bits\\r\\n     */\\r\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\r\\n        if (value > type(uint104).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(104, value);\\r\\n        }\\r\\n        return uint104(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint96).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint96` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 96 bits\\r\\n     */\\r\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\r\\n        if (value > type(uint96).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(96, value);\\r\\n        }\\r\\n        return uint96(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint88).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint88` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 88 bits\\r\\n     */\\r\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\r\\n        if (value > type(uint88).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(88, value);\\r\\n        }\\r\\n        return uint88(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint80).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint80` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 80 bits\\r\\n     */\\r\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\r\\n        if (value > type(uint80).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(80, value);\\r\\n        }\\r\\n        return uint80(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint72).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint72` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 72 bits\\r\\n     */\\r\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\r\\n        if (value > type(uint72).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(72, value);\\r\\n        }\\r\\n        return uint72(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint64).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint64` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 64 bits\\r\\n     */\\r\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\r\\n        if (value > type(uint64).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(64, value);\\r\\n        }\\r\\n        return uint64(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint56).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint56` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 56 bits\\r\\n     */\\r\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\r\\n        if (value > type(uint56).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(56, value);\\r\\n        }\\r\\n        return uint56(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint48).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint48` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 48 bits\\r\\n     */\\r\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\r\\n        if (value > type(uint48).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(48, value);\\r\\n        }\\r\\n        return uint48(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint40).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint40` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 40 bits\\r\\n     */\\r\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\r\\n        if (value > type(uint40).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(40, value);\\r\\n        }\\r\\n        return uint40(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint32).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint32` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 32 bits\\r\\n     */\\r\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\r\\n        if (value > type(uint32).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(32, value);\\r\\n        }\\r\\n        return uint32(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint24).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint24` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 24 bits\\r\\n     */\\r\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\r\\n        if (value > type(uint24).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(24, value);\\r\\n        }\\r\\n        return uint24(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint16).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint16` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 16 bits\\r\\n     */\\r\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\r\\n        if (value > type(uint16).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(16, value);\\r\\n        }\\r\\n        return uint16(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint8).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint8` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 8 bits\\r\\n     */\\r\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\r\\n        if (value > type(uint8).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(8, value);\\r\\n        }\\r\\n        return uint8(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a signed int256 into an unsigned uint256.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must be greater than or equal to 0.\\r\\n     */\\r\\n    function toUint256(int256 value) internal pure returns (uint256) {\\r\\n        if (value < 0) {\\r\\n            revert SafeCastOverflowedIntToUint(value);\\r\\n        }\\r\\n        return uint256(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int248 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int248 or\\r\\n     * greater than largest int248).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int248` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 248 bits\\r\\n     */\\r\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\r\\n        downcasted = int248(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(248, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int240 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int240 or\\r\\n     * greater than largest int240).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int240` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 240 bits\\r\\n     */\\r\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\r\\n        downcasted = int240(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(240, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int232 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int232 or\\r\\n     * greater than largest int232).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int232` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 232 bits\\r\\n     */\\r\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\r\\n        downcasted = int232(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(232, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int224 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int224 or\\r\\n     * greater than largest int224).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int224` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 224 bits\\r\\n     */\\r\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\r\\n        downcasted = int224(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(224, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int216 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int216 or\\r\\n     * greater than largest int216).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int216` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 216 bits\\r\\n     */\\r\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\r\\n        downcasted = int216(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(216, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int208 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int208 or\\r\\n     * greater than largest int208).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int208` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 208 bits\\r\\n     */\\r\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\r\\n        downcasted = int208(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(208, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int200 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int200 or\\r\\n     * greater than largest int200).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int200` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 200 bits\\r\\n     */\\r\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\r\\n        downcasted = int200(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(200, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int192 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int192 or\\r\\n     * greater than largest int192).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int192` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 192 bits\\r\\n     */\\r\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\r\\n        downcasted = int192(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(192, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int184 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int184 or\\r\\n     * greater than largest int184).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int184` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 184 bits\\r\\n     */\\r\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\r\\n        downcasted = int184(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(184, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int176 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int176 or\\r\\n     * greater than largest int176).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int176` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 176 bits\\r\\n     */\\r\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\r\\n        downcasted = int176(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(176, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int168 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int168 or\\r\\n     * greater than largest int168).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int168` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 168 bits\\r\\n     */\\r\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\r\\n        downcasted = int168(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(168, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int160 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int160 or\\r\\n     * greater than largest int160).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int160` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 160 bits\\r\\n     */\\r\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\r\\n        downcasted = int160(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(160, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int152 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int152 or\\r\\n     * greater than largest int152).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int152` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 152 bits\\r\\n     */\\r\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\r\\n        downcasted = int152(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(152, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int144 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int144 or\\r\\n     * greater than largest int144).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int144` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 144 bits\\r\\n     */\\r\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\r\\n        downcasted = int144(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(144, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int136 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int136 or\\r\\n     * greater than largest int136).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int136` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 136 bits\\r\\n     */\\r\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\r\\n        downcasted = int136(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(136, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int128 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int128 or\\r\\n     * greater than largest int128).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int128` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 128 bits\\r\\n     */\\r\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\r\\n        downcasted = int128(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(128, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int120 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int120 or\\r\\n     * greater than largest int120).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int120` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 120 bits\\r\\n     */\\r\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\r\\n        downcasted = int120(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(120, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int112 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int112 or\\r\\n     * greater than largest int112).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int112` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 112 bits\\r\\n     */\\r\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\r\\n        downcasted = int112(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(112, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int104 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int104 or\\r\\n     * greater than largest int104).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int104` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 104 bits\\r\\n     */\\r\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\r\\n        downcasted = int104(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(104, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int96 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int96 or\\r\\n     * greater than largest int96).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int96` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 96 bits\\r\\n     */\\r\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\r\\n        downcasted = int96(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(96, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int88 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int88 or\\r\\n     * greater than largest int88).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int88` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 88 bits\\r\\n     */\\r\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\r\\n        downcasted = int88(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(88, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int80 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int80 or\\r\\n     * greater than largest int80).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int80` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 80 bits\\r\\n     */\\r\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\r\\n        downcasted = int80(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(80, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int72 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int72 or\\r\\n     * greater than largest int72).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int72` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 72 bits\\r\\n     */\\r\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\r\\n        downcasted = int72(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(72, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int64 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int64 or\\r\\n     * greater than largest int64).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int64` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 64 bits\\r\\n     */\\r\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\r\\n        downcasted = int64(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(64, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int56 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int56 or\\r\\n     * greater than largest int56).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int56` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 56 bits\\r\\n     */\\r\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\r\\n        downcasted = int56(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(56, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int48 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int48 or\\r\\n     * greater than largest int48).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int48` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 48 bits\\r\\n     */\\r\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\r\\n        downcasted = int48(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(48, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int40 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int40 or\\r\\n     * greater than largest int40).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int40` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 40 bits\\r\\n     */\\r\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\r\\n        downcasted = int40(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(40, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int32 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int32 or\\r\\n     * greater than largest int32).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int32` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 32 bits\\r\\n     */\\r\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\r\\n        downcasted = int32(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(32, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int24 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int24 or\\r\\n     * greater than largest int24).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int24` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 24 bits\\r\\n     */\\r\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\r\\n        downcasted = int24(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(24, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int16 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int16 or\\r\\n     * greater than largest int16).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int16` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 16 bits\\r\\n     */\\r\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\r\\n        downcasted = int16(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(16, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int8 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int8 or\\r\\n     * greater than largest int8).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int8` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 8 bits\\r\\n     */\\r\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\r\\n        downcasted = int8(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(8, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an unsigned uint256 into a signed int256.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must be less than or equal to maxInt256.\\r\\n     */\\r\\n    function toInt256(uint256 value) internal pure returns (int256) {\\r\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\r\\n        if (value > uint256(type(int256).max)) {\\r\\n            revert SafeCastOverflowedUintToInt(value);\\r\\n        }\\r\\n        return int256(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\r\\n     */\\r\\n    function toUint(bool b) internal pure returns (uint256 u) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            u := iszero(iszero(b))\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x961a6a8aa2b6fef7d623252db5edca2d69cbc32192240805d5c2ab1e0f6344b1\",\"license\":\"MIT\"},\"contracts/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Standard signed math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary SignedMath {\\r\\n    /**\\r\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\r\\n     *\\r\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\r\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\r\\n     * one branch when needed, making this function more expensive.\\r\\n     */\\r\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\r\\n        unchecked {\\r\\n            // branchless ternary works because:\\r\\n            // b ^ (a ^ b) == a\\r\\n            // b ^ 0 == b\\r\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two signed numbers.\\r\\n     */\\r\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return ternary(a > b, a, b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two signed numbers.\\r\\n     */\\r\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return ternary(a < b, a, b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two signed numbers without overflow.\\r\\n     * The result is rounded towards zero.\\r\\n     */\\r\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\r\\n        // Formula from the book \\\"Hacker's Delight\\\"\\r\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\r\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the absolute unsigned value of a signed value.\\r\\n     */\\r\\n    function abs(int256 n) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\r\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\r\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\r\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\r\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\r\\n            int256 mask = n >> 255;\\r\\n\\r\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\r\\n            return uint256((n + mask) ^ mask);\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x0cbccda1e8f10a7217a92a04970cc83fe09795ad78586917c8a5d932c8d12501\",\"license\":\"MIT\"},\"contracts/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Strings.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {Math} from \\\"./Math.sol\\\";\\r\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\r\\nimport {SignedMath} from \\\"./SignedMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    using SafeCast for *;\\r\\n\\r\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\r\\n    uint8 private constant ADDRESS_LENGTH = 20;\\r\\n\\r\\n    /**\\r\\n     * @dev The `value` string doesn't fit in the specified `length`.\\r\\n     */\\r\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\r\\n\\r\\n    /**\\r\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\r\\n     */\\r\\n    error StringsInvalidChar();\\r\\n\\r\\n    /**\\r\\n     * @dev The string being parsed is not a properly formatted address.\\r\\n     */\\r\\n    error StringsInvalidAddressFormat();\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            uint256 length = Math.log10(value) + 1;\\r\\n            string memory buffer = new string(length);\\r\\n            uint256 ptr;\\r\\n            assembly (\\\"memory-safe\\\") {\\r\\n                ptr := add(buffer, add(32, length))\\r\\n            }\\r\\n            while (true) {\\r\\n                ptr--;\\r\\n                assembly (\\\"memory-safe\\\") {\\r\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\r\\n                }\\r\\n                value /= 10;\\r\\n                if (value == 0) break;\\r\\n            }\\r\\n            return buffer;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\r\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            return toHexString(value, Math.log256(value) + 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        uint256 localValue = value;\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\r\\n            localValue >>= 4;\\r\\n        }\\r\\n        if (localValue != 0) {\\r\\n            revert StringsInsufficientHexLength(value, length);\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\r\\n     * representation.\\r\\n     */\\r\\n    function toHexString(address addr) internal pure returns (string memory) {\\r\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\r\\n     * representation, according to EIP-55.\\r\\n     */\\r\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\r\\n        bytes memory buffer = bytes(toHexString(addr));\\r\\n\\r\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\r\\n        uint256 hashValue;\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 41; i > 1; --i) {\\r\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\r\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\r\\n                // case shift by xoring with 0x20\\r\\n                buffer[i] ^= 0x20;\\r\\n            }\\r\\n            hashValue >>= 4;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the two strings are equal.\\r\\n     */\\r\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\r\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The string must be formatted as `[0-9]*`\\r\\n     * - The result must fit into an `uint256` type\\r\\n     */\\r\\n    function parseUint(string memory input) internal pure returns (uint256) {\\r\\n        return parseUint(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\\r\\n     * `end` (excluded).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The substring must be formatted as `[0-9]*`\\r\\n     * - The result must fit into an `uint256` type\\r\\n     */\\r\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\r\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\r\\n        if (!success) revert StringsInvalidChar();\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\r\\n     *\\r\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\r\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\r\\n     * character.\\r\\n     *\\r\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseUint(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) internal pure returns (bool success, uint256 value) {\\r\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\r\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {tryParseUint} that does not check bounds and returns (true, 0) if they are invalid.\\r\\n     */\\r\\n    function _tryParseUintUncheckedBounds(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) private pure returns (bool success, uint256 value) {\\r\\n        bytes memory buffer = bytes(input);\\r\\n\\r\\n        uint256 result = 0;\\r\\n        for (uint256 i = begin; i < end; ++i) {\\r\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\r\\n            if (chr > 9) return (false, 0);\\r\\n            result *= 10;\\r\\n            result += chr;\\r\\n        }\\r\\n        return (true, result);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The string must be formatted as `[-+]?[0-9]*`\\r\\n     * - The result must fit in an `int256` type.\\r\\n     */\\r\\n    function parseInt(string memory input) internal pure returns (int256) {\\r\\n        return parseInt(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\r\\n     * `end` (excluded).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\r\\n     * - The result must fit in an `int256` type.\\r\\n     */\\r\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\r\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\r\\n        if (!success) revert StringsInvalidChar();\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\r\\n     * the result does not fit in a `int256`.\\r\\n     *\\r\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\r\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\r\\n     * character or if the result does not fit in a `int256`.\\r\\n     *\\r\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseInt(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) internal pure returns (bool success, int256 value) {\\r\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\r\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {tryParseInt} that does not check bounds and returns (true, 0) if they are invalid.\\r\\n     */\\r\\n    function _tryParseIntUncheckedBounds(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) private pure returns (bool success, int256 value) {\\r\\n        bytes memory buffer = bytes(input);\\r\\n\\r\\n        // Check presence of a negative sign.\\r\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\r\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\r\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\r\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\r\\n\\r\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\r\\n\\r\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\r\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\r\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\r\\n            return (true, type(int256).min);\\r\\n        } else return (false, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\r\\n     * - The result must fit in an `uint256` type.\\r\\n     */\\r\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\r\\n        return parseHexUint(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\\r\\n     * `end` (excluded).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\r\\n     * - The result must fit in an `uint256` type.\\r\\n     */\\r\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\r\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\r\\n        if (!success) revert StringsInvalidChar();\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\r\\n     *\\r\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\r\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\r\\n     * invalid character.\\r\\n     *\\r\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseHexUint(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) internal pure returns (bool success, uint256 value) {\\r\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\r\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {tryParseHexUint} that does not check bounds and returns (true, 0) if they are invalid.\\r\\n     */\\r\\n    function _tryParseHexUintUncheckedBounds(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) private pure returns (bool success, uint256 value) {\\r\\n        bytes memory buffer = bytes(input);\\r\\n\\r\\n        // skip 0x prefix if present\\r\\n        bool hasPrefix = (begin < end + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\r\\n        uint256 offset = hasPrefix.toUint() * 2;\\r\\n\\r\\n        uint256 result = 0;\\r\\n        for (uint256 i = begin + offset; i < end; ++i) {\\r\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\r\\n            if (chr > 15) return (false, 0);\\r\\n            result *= 16;\\r\\n            unchecked {\\r\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\r\\n                // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.\\r\\n                result += chr;\\r\\n            }\\r\\n        }\\r\\n        return (true, result);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\r\\n     */\\r\\n    function parseAddress(string memory input) internal pure returns (address) {\\r\\n        return parseAddress(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\\r\\n     * `end` (excluded).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\r\\n     */\\r\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\r\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\r\\n        if (!success) revert StringsInvalidAddressFormat();\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\r\\n     * formatted address. See {parseAddress} requirements.\\r\\n     */\\r\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\r\\n        return tryParseAddress(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\r\\n     * formatted address. See {parseAddress} requirements.\\r\\n     */\\r\\n    function tryParseAddress(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) internal pure returns (bool success, address value) {\\r\\n        // check that input is the correct length\\r\\n        bool hasPrefix = (begin < end + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\r\\n\\r\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\r\\n\\r\\n        if (end - begin == expectedLength && end <= bytes(input).length) {\\r\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\r\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\r\\n            return (s, address(uint160(v)));\\r\\n        } else {\\r\\n            return (false, address(0));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\r\\n        uint8 value = uint8(chr);\\r\\n\\r\\n        // Try to parse `chr`:\\r\\n        // - Case 1: [0-9]\\r\\n        // - Case 2: [a-f]\\r\\n        // - Case 3: [A-F]\\r\\n        // - otherwise not supported\\r\\n        unchecked {\\r\\n            if (value > 47 && value < 58) value -= 48;\\r\\n            else if (value > 96 && value < 103) value -= 87;\\r\\n            else if (value > 64 && value < 71) value -= 55;\\r\\n            else return type(uint8).max;\\r\\n        }\\r\\n\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\r\\n     *\\r\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\r\\n     * assembly block as such would prevent some optimizations.\\r\\n     */\\r\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\r\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            value := mload(add(buffer, add(0x20, offset)))\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xce5ca113d4cd3005cbf2109590734a0410a5eebc6fc94d258af1897a40c29341\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null}}},"contracts/Nonces.sol":{"Nonces":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"currentNonce","type":"uint256"}],"name":"InvalidAccountNonce","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"nonces(address)":"7ecebe00"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides tracking nonces for addresses. Nonces will only increment.\",\"errors\":{\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"kind\":\"dev\",\"methods\":{\"nonces(address)\":{\"details\":\"Returns the next unused nonce for an address.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Nonces.sol\":\"Nonces\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/Nonces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\r\\n */\\r\\nabstract contract Nonces {\\r\\n    /**\\r\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\r\\n     */\\r\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\r\\n\\r\\n    mapping(address => uint256) private _nonces;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the next unused nonce for an address.\\r\\n     */\\r\\n    function nonces(address owner) public view virtual returns (uint256) {\\r\\n        return _nonces[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Consumes a nonce.\\r\\n     *\\r\\n     * Returns the current value and increments nonce.\\r\\n     */\\r\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\r\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\r\\n        // decremented or reset. This guarantees that the nonce never overflows.\\r\\n        unchecked {\\r\\n            // It is important to do x++ and not ++x here.\\r\\n            return _nonces[owner]++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\r\\n     */\\r\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\r\\n        uint256 current = _useNonce(owner);\\r\\n        if (nonce != current) {\\r\\n            revert InvalidAccountNonce(owner, current);\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x761f552efdccf5856fc0ee3d8b8319b246e7f97d7d05ac71c20571212ce8027c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2712,"contract":"contracts/Nonces.sol:Nonces","label":"_nonces","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}},"contracts/Panic.sol":{"Panic":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220602a146c60a8367c1cafa2531ab981522f12cf17759e47f90413ee363f511e5164736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH1 0x2A EQ PUSH13 0x60A8367C1CAFA2531AB981522F SLT 0xCF OR PUSH22 0x9E47F90413EE363F511E5164736F6C63430008110033 ","sourceMap":"681:1346:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;681:1346:11;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220602a146c60a8367c1cafa2531ab981522f12cf17759e47f90413ee363f511e5164736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH1 0x2A EQ PUSH13 0x60A8367C1CAFA2531AB981522F SLT 0xCF OR PUSH22 0x9E47F90413EE363F511E5164736F6C63430008110033 ","sourceMap":"681:1346:11:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Helper library for emitting standardized panic codes. ```solidity contract Example {      using Panic for uint256;      // Use any of the declared internal constants      function foo() { Panic.GENERIC.panic(); }      // Alternatively      function foo() { Panic.panic(Panic.GENERIC); } } ``` Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil]. _Available since v5.1._\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"ARRAY_OUT_OF_BOUNDS\":{\"details\":\"array out of bounds access\"},\"ASSERT\":{\"details\":\"used by the assert() builtin\"},\"DIVISION_BY_ZERO\":{\"details\":\"division or modulo by zero\"},\"EMPTY_ARRAY_POP\":{\"details\":\"empty array pop\"},\"ENUM_CONVERSION_ERROR\":{\"details\":\"enum conversion error\"},\"GENERIC\":{\"details\":\"generic / unspecified error\"},\"INVALID_INTERNAL_FUNCTION\":{\"details\":\"calling invalid internal function\"},\"RESOURCE_ERROR\":{\"details\":\"resource error (too large allocation or too large array)\"},\"STORAGE_ENCODING_ERROR\":{\"details\":\"invalid encoding in storage\"},\"UNDER_OVERFLOW\":{\"details\":\"arithmetic underflow or overflow\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Panic.sol\":\"Panic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Helper library for emitting standardized panic codes.\\r\\n *\\r\\n * ```solidity\\r\\n * contract Example {\\r\\n *      using Panic for uint256;\\r\\n *\\r\\n *      // Use any of the declared internal constants\\r\\n *      function foo() { Panic.GENERIC.panic(); }\\r\\n *\\r\\n *      // Alternatively\\r\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\r\\n *\\r\\n * _Available since v5.1._\\r\\n */\\r\\n// slither-disable-next-line unused-state\\r\\nlibrary Panic {\\r\\n    /// @dev generic / unspecified error\\r\\n    uint256 internal constant GENERIC = 0x00;\\r\\n    /// @dev used by the assert() builtin\\r\\n    uint256 internal constant ASSERT = 0x01;\\r\\n    /// @dev arithmetic underflow or overflow\\r\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\r\\n    /// @dev division or modulo by zero\\r\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\r\\n    /// @dev enum conversion error\\r\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\r\\n    /// @dev invalid encoding in storage\\r\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\r\\n    /// @dev empty array pop\\r\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\r\\n    /// @dev array out of bounds access\\r\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\r\\n    /// @dev resource error (too large allocation or too large array)\\r\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\r\\n    /// @dev calling invalid internal function\\r\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\r\\n\\r\\n    /// @dev Reverts with a panic code. Recommended to use with\\r\\n    /// the internal constants with predefined codes.\\r\\n    function panic(uint256 code) internal pure {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            mstore(0x00, 0x4e487b71)\\r\\n            mstore(0x20, code)\\r\\n            revert(0x1c, 0x24)\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xea5fdfbf9df8d18b9d1857c82d6aef670a19b65cc06c7e1625f641aa5108e2d3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null}}},"contracts/SafeCast.sol":{"SafeCast":{"abi":[{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"int256","name":"value","type":"int256"}],"name":"SafeCastOverflowedIntDowncast","type":"error"},{"inputs":[{"internalType":"int256","name":"value","type":"int256"}],"name":"SafeCastOverflowedIntToUint","type":"error"},{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintDowncast","type":"error"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintToInt","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122053fba0b5b4893621c53f3370e83ae7902cac08dce1eaa95a6124dc5de7386e2464736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 0xFB LOG0 0xB5 0xB4 DUP10 CALLDATASIZE 0x21 0xC5 EXTCODEHASH CALLER PUSH17 0xE83AE7902CAC08DCE1EAA95A6124DC5DE7 CODESIZE PUSH15 0x2464736F6C63430008110033000000 ","sourceMap":"786:35316:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;786:35316:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122053fba0b5b4893621c53f3370e83ae7902cac08dce1eaa95a6124dc5de7386e2464736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 0xFB LOG0 0xB5 0xB4 DUP10 CALLDATASIZE 0x21 0xC5 EXTCODEHASH CALLER PUSH17 0xE83AE7902CAC08DCE1EAA95A6124DC5DE7 CODESIZE PUSH15 0x2464736F6C63430008110033000000 ","sourceMap":"786:35316:12:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntToUint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintToInt\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"errors\":{\"SafeCastOverflowedIntDowncast(uint8,int256)\":[{\"details\":\"Value doesn't fit in an int of `bits` size.\"}],\"SafeCastOverflowedIntToUint(int256)\":[{\"details\":\"An int value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintToInt(uint256)\":[{\"details\":\"An uint value doesn't fit in an int of `bits` size.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SafeCast.sol\":\"SafeCast\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\r\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\r\\n * easily result in undesired exploitation or bugs, since developers usually\\r\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\r\\n * reverting the transaction when such an operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeCast {\\r\\n    /**\\r\\n     * @dev Value doesn't fit in an uint of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedIntToUint(int256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Value doesn't fit in an int of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedUintToInt(uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint248).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint248` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 248 bits\\r\\n     */\\r\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\r\\n        if (value > type(uint248).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(248, value);\\r\\n        }\\r\\n        return uint248(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint240).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint240` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 240 bits\\r\\n     */\\r\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\r\\n        if (value > type(uint240).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(240, value);\\r\\n        }\\r\\n        return uint240(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint232).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint232` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 232 bits\\r\\n     */\\r\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\r\\n        if (value > type(uint232).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(232, value);\\r\\n        }\\r\\n        return uint232(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint224).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint224` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 224 bits\\r\\n     */\\r\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\r\\n        if (value > type(uint224).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(224, value);\\r\\n        }\\r\\n        return uint224(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint216).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint216` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 216 bits\\r\\n     */\\r\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\r\\n        if (value > type(uint216).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(216, value);\\r\\n        }\\r\\n        return uint216(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint208).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint208` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 208 bits\\r\\n     */\\r\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\r\\n        if (value > type(uint208).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(208, value);\\r\\n        }\\r\\n        return uint208(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint200).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint200` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 200 bits\\r\\n     */\\r\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\r\\n        if (value > type(uint200).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(200, value);\\r\\n        }\\r\\n        return uint200(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint192).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint192` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 192 bits\\r\\n     */\\r\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\r\\n        if (value > type(uint192).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(192, value);\\r\\n        }\\r\\n        return uint192(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint184).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint184` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 184 bits\\r\\n     */\\r\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\r\\n        if (value > type(uint184).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(184, value);\\r\\n        }\\r\\n        return uint184(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint176).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint176` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 176 bits\\r\\n     */\\r\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\r\\n        if (value > type(uint176).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(176, value);\\r\\n        }\\r\\n        return uint176(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint168).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint168` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 168 bits\\r\\n     */\\r\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\r\\n        if (value > type(uint168).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(168, value);\\r\\n        }\\r\\n        return uint168(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint160).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint160` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 160 bits\\r\\n     */\\r\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\r\\n        if (value > type(uint160).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(160, value);\\r\\n        }\\r\\n        return uint160(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint152).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint152` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 152 bits\\r\\n     */\\r\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\r\\n        if (value > type(uint152).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(152, value);\\r\\n        }\\r\\n        return uint152(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint144).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint144` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 144 bits\\r\\n     */\\r\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\r\\n        if (value > type(uint144).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(144, value);\\r\\n        }\\r\\n        return uint144(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint136).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint136` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 136 bits\\r\\n     */\\r\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\r\\n        if (value > type(uint136).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(136, value);\\r\\n        }\\r\\n        return uint136(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint128).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint128` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 128 bits\\r\\n     */\\r\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\r\\n        if (value > type(uint128).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(128, value);\\r\\n        }\\r\\n        return uint128(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint120).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint120` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 120 bits\\r\\n     */\\r\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\r\\n        if (value > type(uint120).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(120, value);\\r\\n        }\\r\\n        return uint120(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint112).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint112` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 112 bits\\r\\n     */\\r\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\r\\n        if (value > type(uint112).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(112, value);\\r\\n        }\\r\\n        return uint112(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint104).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint104` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 104 bits\\r\\n     */\\r\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\r\\n        if (value > type(uint104).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(104, value);\\r\\n        }\\r\\n        return uint104(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint96).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint96` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 96 bits\\r\\n     */\\r\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\r\\n        if (value > type(uint96).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(96, value);\\r\\n        }\\r\\n        return uint96(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint88).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint88` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 88 bits\\r\\n     */\\r\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\r\\n        if (value > type(uint88).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(88, value);\\r\\n        }\\r\\n        return uint88(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint80).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint80` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 80 bits\\r\\n     */\\r\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\r\\n        if (value > type(uint80).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(80, value);\\r\\n        }\\r\\n        return uint80(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint72).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint72` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 72 bits\\r\\n     */\\r\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\r\\n        if (value > type(uint72).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(72, value);\\r\\n        }\\r\\n        return uint72(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint64).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint64` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 64 bits\\r\\n     */\\r\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\r\\n        if (value > type(uint64).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(64, value);\\r\\n        }\\r\\n        return uint64(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint56).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint56` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 56 bits\\r\\n     */\\r\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\r\\n        if (value > type(uint56).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(56, value);\\r\\n        }\\r\\n        return uint56(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint48).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint48` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 48 bits\\r\\n     */\\r\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\r\\n        if (value > type(uint48).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(48, value);\\r\\n        }\\r\\n        return uint48(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint40).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint40` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 40 bits\\r\\n     */\\r\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\r\\n        if (value > type(uint40).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(40, value);\\r\\n        }\\r\\n        return uint40(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint32).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint32` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 32 bits\\r\\n     */\\r\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\r\\n        if (value > type(uint32).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(32, value);\\r\\n        }\\r\\n        return uint32(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint24).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint24` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 24 bits\\r\\n     */\\r\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\r\\n        if (value > type(uint24).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(24, value);\\r\\n        }\\r\\n        return uint24(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint16).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint16` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 16 bits\\r\\n     */\\r\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\r\\n        if (value > type(uint16).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(16, value);\\r\\n        }\\r\\n        return uint16(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint8).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint8` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 8 bits\\r\\n     */\\r\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\r\\n        if (value > type(uint8).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(8, value);\\r\\n        }\\r\\n        return uint8(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a signed int256 into an unsigned uint256.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must be greater than or equal to 0.\\r\\n     */\\r\\n    function toUint256(int256 value) internal pure returns (uint256) {\\r\\n        if (value < 0) {\\r\\n            revert SafeCastOverflowedIntToUint(value);\\r\\n        }\\r\\n        return uint256(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int248 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int248 or\\r\\n     * greater than largest int248).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int248` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 248 bits\\r\\n     */\\r\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\r\\n        downcasted = int248(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(248, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int240 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int240 or\\r\\n     * greater than largest int240).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int240` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 240 bits\\r\\n     */\\r\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\r\\n        downcasted = int240(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(240, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int232 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int232 or\\r\\n     * greater than largest int232).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int232` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 232 bits\\r\\n     */\\r\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\r\\n        downcasted = int232(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(232, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int224 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int224 or\\r\\n     * greater than largest int224).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int224` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 224 bits\\r\\n     */\\r\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\r\\n        downcasted = int224(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(224, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int216 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int216 or\\r\\n     * greater than largest int216).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int216` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 216 bits\\r\\n     */\\r\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\r\\n        downcasted = int216(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(216, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int208 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int208 or\\r\\n     * greater than largest int208).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int208` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 208 bits\\r\\n     */\\r\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\r\\n        downcasted = int208(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(208, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int200 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int200 or\\r\\n     * greater than largest int200).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int200` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 200 bits\\r\\n     */\\r\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\r\\n        downcasted = int200(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(200, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int192 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int192 or\\r\\n     * greater than largest int192).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int192` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 192 bits\\r\\n     */\\r\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\r\\n        downcasted = int192(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(192, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int184 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int184 or\\r\\n     * greater than largest int184).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int184` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 184 bits\\r\\n     */\\r\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\r\\n        downcasted = int184(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(184, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int176 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int176 or\\r\\n     * greater than largest int176).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int176` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 176 bits\\r\\n     */\\r\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\r\\n        downcasted = int176(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(176, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int168 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int168 or\\r\\n     * greater than largest int168).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int168` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 168 bits\\r\\n     */\\r\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\r\\n        downcasted = int168(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(168, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int160 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int160 or\\r\\n     * greater than largest int160).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int160` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 160 bits\\r\\n     */\\r\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\r\\n        downcasted = int160(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(160, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int152 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int152 or\\r\\n     * greater than largest int152).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int152` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 152 bits\\r\\n     */\\r\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\r\\n        downcasted = int152(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(152, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int144 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int144 or\\r\\n     * greater than largest int144).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int144` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 144 bits\\r\\n     */\\r\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\r\\n        downcasted = int144(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(144, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int136 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int136 or\\r\\n     * greater than largest int136).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int136` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 136 bits\\r\\n     */\\r\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\r\\n        downcasted = int136(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(136, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int128 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int128 or\\r\\n     * greater than largest int128).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int128` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 128 bits\\r\\n     */\\r\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\r\\n        downcasted = int128(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(128, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int120 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int120 or\\r\\n     * greater than largest int120).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int120` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 120 bits\\r\\n     */\\r\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\r\\n        downcasted = int120(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(120, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int112 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int112 or\\r\\n     * greater than largest int112).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int112` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 112 bits\\r\\n     */\\r\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\r\\n        downcasted = int112(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(112, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int104 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int104 or\\r\\n     * greater than largest int104).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int104` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 104 bits\\r\\n     */\\r\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\r\\n        downcasted = int104(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(104, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int96 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int96 or\\r\\n     * greater than largest int96).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int96` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 96 bits\\r\\n     */\\r\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\r\\n        downcasted = int96(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(96, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int88 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int88 or\\r\\n     * greater than largest int88).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int88` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 88 bits\\r\\n     */\\r\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\r\\n        downcasted = int88(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(88, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int80 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int80 or\\r\\n     * greater than largest int80).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int80` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 80 bits\\r\\n     */\\r\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\r\\n        downcasted = int80(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(80, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int72 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int72 or\\r\\n     * greater than largest int72).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int72` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 72 bits\\r\\n     */\\r\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\r\\n        downcasted = int72(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(72, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int64 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int64 or\\r\\n     * greater than largest int64).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int64` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 64 bits\\r\\n     */\\r\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\r\\n        downcasted = int64(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(64, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int56 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int56 or\\r\\n     * greater than largest int56).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int56` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 56 bits\\r\\n     */\\r\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\r\\n        downcasted = int56(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(56, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int48 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int48 or\\r\\n     * greater than largest int48).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int48` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 48 bits\\r\\n     */\\r\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\r\\n        downcasted = int48(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(48, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int40 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int40 or\\r\\n     * greater than largest int40).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int40` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 40 bits\\r\\n     */\\r\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\r\\n        downcasted = int40(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(40, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int32 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int32 or\\r\\n     * greater than largest int32).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int32` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 32 bits\\r\\n     */\\r\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\r\\n        downcasted = int32(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(32, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int24 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int24 or\\r\\n     * greater than largest int24).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int24` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 24 bits\\r\\n     */\\r\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\r\\n        downcasted = int24(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(24, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int16 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int16 or\\r\\n     * greater than largest int16).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int16` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 16 bits\\r\\n     */\\r\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\r\\n        downcasted = int16(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(16, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int8 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int8 or\\r\\n     * greater than largest int8).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int8` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 8 bits\\r\\n     */\\r\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\r\\n        downcasted = int8(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(8, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an unsigned uint256 into a signed int256.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must be less than or equal to maxInt256.\\r\\n     */\\r\\n    function toInt256(uint256 value) internal pure returns (int256) {\\r\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\r\\n        if (value > uint256(type(int256).max)) {\\r\\n            revert SafeCastOverflowedUintToInt(value);\\r\\n        }\\r\\n        return int256(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\r\\n     */\\r\\n    function toUint(bool b) internal pure returns (uint256 u) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            u := iszero(iszero(b))\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x961a6a8aa2b6fef7d623252db5edca2d69cbc32192240805d5c2ab1e0f6344b1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null}}},"contracts/SafeERC20.sol":{"SafeERC20":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c523eb371e68867cfd0f74ac70bc55595b13c3ea76cf535c517cf16f2924496c64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC5 0x23 0xEB CALLDATACOPY 0x1E PUSH9 0x867CFD0F74AC70BC55 MSIZE JUMPDEST SGT 0xC3 0xEA PUSH23 0xCF535C517CF16F2924496C64736F6C6343000811003300 ","sourceMap":"610:3845:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;610:3845:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c523eb371e68867cfd0f74ac70bc55595b13c3ea76cf535c517cf16f2924496c64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC5 0x23 0xEB CALLDATACOPY 0x1E PUSH9 0x867CFD0F74AC70BC55 MSIZE JUMPDEST SGT 0xC3 0xEA PUSH23 0xCF535C517CF16F2924496C64736F6C6343000811003300 ","sourceMap":"610:3845:13:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n                /// @solidity memory-safe-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xdc6f7c5d0c8e145fd21aa1647db200d8fff2b8065b49177e545f7e6ef6af03b7\",\"license\":\"MIT\"},\"contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0xf1c6b3772a4f2ef609b691567d287ca660cfaf3c08098db2fab688161527d1cb\",\"license\":\"MIT\"},\"contracts/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Permit.sol)\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n *\\r\\n * ==== Security Considerations\\r\\n *\\r\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\r\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\r\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\r\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\r\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\r\\n * generally recommended is:\\r\\n *\\r\\n * ```solidity\\r\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\r\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\r\\n *     doThing(..., value);\\r\\n * }\\r\\n *\\r\\n * function doThing(..., uint256 value) public {\\r\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\r\\n *     ...\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\r\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\r\\n * {SafeERC20-safeTransferFrom}).\\r\\n *\\r\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\r\\n * contracts should have entry points that don't rely on permit.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\r\\n     * given ``owner``'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     *\\r\\n     * CAUTION: See Security Considerations above.\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\",\"keccak256\":\"0x909189190215940f2461390cb2795d420e4562e50944723b285ca21b7d9013d8\",\"license\":\"MIT\"},\"contracts/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC20Permit.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safePermit(\\r\\n        IERC20Permit token,\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal {\\r\\n        uint256 nonceBefore = token.nonces(owner);\\r\\n        token.permit(owner, spender, value, deadline, v, r, s);\\r\\n        uint256 nonceAfter = token.nonces(owner);\\r\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x9828d1fbd176fbfc3927fc4ab92607410ff990bb32b2b6d61271b1e38ad6004e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null}}},"contracts/ShortStrings.sol":{"ShortStrings":{"abi":[{"inputs":[],"name":"InvalidShortString","type":"error"},{"inputs":[{"internalType":"string","name":"str","type":"string"}],"name":"StringTooLong","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201fbd0085fd51899c0d0b31e844ba81d386427e0a207ecee38a36ad17622dcb8b64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1F 0xBD STOP DUP6 REVERT MLOAD DUP10 SWAP13 0xD SIGNEXTEND BALANCE 0xE8 DIFFICULTY 0xBA DUP2 0xD3 DUP7 TIMESTAMP PUSH31 0xA207ECEE38A36AD17622DCB8B64736F6C6343000811003300000000000000 ","sourceMap":"1293:3108:14:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1293:3108:14;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201fbd0085fd51899c0d0b31e844ba81d386427e0a207ecee38a36ad17622dcb8b64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1F 0xBD STOP DUP6 REVERT MLOAD DUP10 SWAP13 0xD SIGNEXTEND BALANCE 0xE8 DIFFICULTY 0xBA DUP2 0xD3 DUP7 TIMESTAMP PUSH31 0xA207ECEE38A36AD17622DCB8B64736F6C6343000811003300000000000000 ","sourceMap":"1293:3108:14:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ShortStrings.sol\":\"ShortStrings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ShortStrings.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\r\\n\\r\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\r\\n// | length  | 0x                                                              BB |\\r\\ntype ShortString is bytes32;\\r\\n\\r\\n/**\\r\\n * @dev This library provides functions to convert short memory strings\\r\\n * into a `ShortString` type that can be used as an immutable variable.\\r\\n *\\r\\n * Strings of arbitrary length can be optimized using this library if\\r\\n * they are short enough (up to 31 bytes) by packing them with their\\r\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\r\\n * fallback mechanism can be used for every other case.\\r\\n *\\r\\n * Usage example:\\r\\n *\\r\\n * ```solidity\\r\\n * contract Named {\\r\\n *     using ShortStrings for *;\\r\\n *\\r\\n *     ShortString private immutable _name;\\r\\n *     string private _nameFallback;\\r\\n *\\r\\n *     constructor(string memory contractName) {\\r\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\r\\n *     }\\r\\n *\\r\\n *     function name() external view returns (string memory) {\\r\\n *         return _name.toStringWithFallback(_nameFallback);\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n */\\r\\nlibrary ShortStrings {\\r\\n    // Used as an identifier for strings longer than 31 bytes.\\r\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\r\\n\\r\\n    error StringTooLong(string str);\\r\\n    error InvalidShortString();\\r\\n\\r\\n    /**\\r\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\r\\n     *\\r\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\r\\n     */\\r\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\r\\n        bytes memory bstr = bytes(str);\\r\\n        if (bstr.length > 31) {\\r\\n            revert StringTooLong(str);\\r\\n        }\\r\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\r\\n     */\\r\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\r\\n        uint256 len = byteLength(sstr);\\r\\n        // using `new string(len)` would work locally but is not memory safe.\\r\\n        string memory str = new string(32);\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            mstore(str, len)\\r\\n            mstore(add(str, 0x20), sstr)\\r\\n        }\\r\\n        return str;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the length of a `ShortString`.\\r\\n     */\\r\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\r\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\r\\n        if (result > 31) {\\r\\n            revert InvalidShortString();\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\r\\n     */\\r\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\r\\n        if (bytes(value).length < 32) {\\r\\n            return toShortString(value);\\r\\n        } else {\\r\\n            StorageSlot.getStringSlot(store).value = value;\\r\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\r\\n     */\\r\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\r\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\r\\n            return toString(value);\\r\\n        } else {\\r\\n            return store;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\r\\n     * {setWithFallback}.\\r\\n     *\\r\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\r\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\r\\n     */\\r\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\r\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\r\\n            return byteLength(value);\\r\\n        } else {\\r\\n            return bytes(store).length;\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x100b22b7cf45a6da890e082b8d10211711bd1c7fbc2acdd9701c155ecfb9815d\",\"license\":\"MIT\"},\"contracts/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\r\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Library for reading and writing primitive types to specific storage slots.\\r\\n *\\r\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\r\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\r\\n *\\r\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\r\\n *\\r\\n * Example usage to set ERC-1967 implementation slot:\\r\\n * ```solidity\\r\\n * contract ERC1967 {\\r\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\r\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n *\\r\\n *     function _getImplementation() internal view returns (address) {\\r\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\r\\n *     }\\r\\n *\\r\\n *     function _setImplementation(address newImplementation) internal {\\r\\n *         require(newImplementation.code.length > 0);\\r\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * TIP: Consider using this library along with {SlotDerivation}.\\r\\n */\\r\\nlibrary StorageSlot {\\r\\n    struct AddressSlot {\\r\\n        address value;\\r\\n    }\\r\\n\\r\\n    struct BooleanSlot {\\r\\n        bool value;\\r\\n    }\\r\\n\\r\\n    struct Bytes32Slot {\\r\\n        bytes32 value;\\r\\n    }\\r\\n\\r\\n    struct Uint256Slot {\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    struct Int256Slot {\\r\\n        int256 value;\\r\\n    }\\r\\n\\r\\n    struct StringSlot {\\r\\n        string value;\\r\\n    }\\r\\n\\r\\n    struct BytesSlot {\\r\\n        bytes value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\r\\n     */\\r\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := store.slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\r\\n     */\\r\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := store.slot\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x85be17dae57122cd5d8658fff9ffa8ef7bf6271cd3d416dd1a9dca13532f1fd0\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null}}},"contracts/SignedMath.sol":{"SignedMath":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e20e1c7c89c5d1e1ad62650786bd37dd01afdb32ac5b474bbd08f9007fafbfc064736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE2 0xE SHR PUSH29 0x89C5D1E1AD62650786BD37DD01AFDB32AC5B474BBD08F9007FAFBFC064 PUSH20 0x6F6C634300081100330000000000000000000000 ","sourceMap":"267:2411:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;267:2411:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e20e1c7c89c5d1e1ad62650786bd37dd01afdb32ac5b474bbd08f9007fafbfc064736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE2 0xE SHR PUSH29 0x89C5D1E1AD62650786BD37DD01AFDB32AC5B474BBD08F9007FAFBFC064 PUSH20 0x6F6C634300081100330000000000000000000000 ","sourceMap":"267:2411:15:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\r\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\r\\n * easily result in undesired exploitation or bugs, since developers usually\\r\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\r\\n * reverting the transaction when such an operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeCast {\\r\\n    /**\\r\\n     * @dev Value doesn't fit in an uint of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedIntToUint(int256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Value doesn't fit in an int of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedUintToInt(uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint248).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint248` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 248 bits\\r\\n     */\\r\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\r\\n        if (value > type(uint248).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(248, value);\\r\\n        }\\r\\n        return uint248(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint240).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint240` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 240 bits\\r\\n     */\\r\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\r\\n        if (value > type(uint240).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(240, value);\\r\\n        }\\r\\n        return uint240(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint232).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint232` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 232 bits\\r\\n     */\\r\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\r\\n        if (value > type(uint232).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(232, value);\\r\\n        }\\r\\n        return uint232(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint224).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint224` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 224 bits\\r\\n     */\\r\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\r\\n        if (value > type(uint224).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(224, value);\\r\\n        }\\r\\n        return uint224(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint216).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint216` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 216 bits\\r\\n     */\\r\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\r\\n        if (value > type(uint216).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(216, value);\\r\\n        }\\r\\n        return uint216(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint208).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint208` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 208 bits\\r\\n     */\\r\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\r\\n        if (value > type(uint208).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(208, value);\\r\\n        }\\r\\n        return uint208(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint200).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint200` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 200 bits\\r\\n     */\\r\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\r\\n        if (value > type(uint200).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(200, value);\\r\\n        }\\r\\n        return uint200(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint192).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint192` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 192 bits\\r\\n     */\\r\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\r\\n        if (value > type(uint192).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(192, value);\\r\\n        }\\r\\n        return uint192(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint184).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint184` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 184 bits\\r\\n     */\\r\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\r\\n        if (value > type(uint184).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(184, value);\\r\\n        }\\r\\n        return uint184(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint176).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint176` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 176 bits\\r\\n     */\\r\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\r\\n        if (value > type(uint176).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(176, value);\\r\\n        }\\r\\n        return uint176(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint168).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint168` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 168 bits\\r\\n     */\\r\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\r\\n        if (value > type(uint168).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(168, value);\\r\\n        }\\r\\n        return uint168(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint160).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint160` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 160 bits\\r\\n     */\\r\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\r\\n        if (value > type(uint160).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(160, value);\\r\\n        }\\r\\n        return uint160(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint152).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint152` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 152 bits\\r\\n     */\\r\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\r\\n        if (value > type(uint152).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(152, value);\\r\\n        }\\r\\n        return uint152(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint144).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint144` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 144 bits\\r\\n     */\\r\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\r\\n        if (value > type(uint144).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(144, value);\\r\\n        }\\r\\n        return uint144(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint136).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint136` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 136 bits\\r\\n     */\\r\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\r\\n        if (value > type(uint136).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(136, value);\\r\\n        }\\r\\n        return uint136(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint128).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint128` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 128 bits\\r\\n     */\\r\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\r\\n        if (value > type(uint128).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(128, value);\\r\\n        }\\r\\n        return uint128(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint120).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint120` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 120 bits\\r\\n     */\\r\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\r\\n        if (value > type(uint120).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(120, value);\\r\\n        }\\r\\n        return uint120(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint112).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint112` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 112 bits\\r\\n     */\\r\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\r\\n        if (value > type(uint112).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(112, value);\\r\\n        }\\r\\n        return uint112(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint104).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint104` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 104 bits\\r\\n     */\\r\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\r\\n        if (value > type(uint104).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(104, value);\\r\\n        }\\r\\n        return uint104(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint96).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint96` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 96 bits\\r\\n     */\\r\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\r\\n        if (value > type(uint96).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(96, value);\\r\\n        }\\r\\n        return uint96(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint88).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint88` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 88 bits\\r\\n     */\\r\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\r\\n        if (value > type(uint88).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(88, value);\\r\\n        }\\r\\n        return uint88(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint80).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint80` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 80 bits\\r\\n     */\\r\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\r\\n        if (value > type(uint80).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(80, value);\\r\\n        }\\r\\n        return uint80(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint72).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint72` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 72 bits\\r\\n     */\\r\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\r\\n        if (value > type(uint72).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(72, value);\\r\\n        }\\r\\n        return uint72(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint64).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint64` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 64 bits\\r\\n     */\\r\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\r\\n        if (value > type(uint64).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(64, value);\\r\\n        }\\r\\n        return uint64(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint56).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint56` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 56 bits\\r\\n     */\\r\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\r\\n        if (value > type(uint56).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(56, value);\\r\\n        }\\r\\n        return uint56(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint48).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint48` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 48 bits\\r\\n     */\\r\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\r\\n        if (value > type(uint48).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(48, value);\\r\\n        }\\r\\n        return uint48(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint40).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint40` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 40 bits\\r\\n     */\\r\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\r\\n        if (value > type(uint40).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(40, value);\\r\\n        }\\r\\n        return uint40(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint32).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint32` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 32 bits\\r\\n     */\\r\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\r\\n        if (value > type(uint32).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(32, value);\\r\\n        }\\r\\n        return uint32(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint24).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint24` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 24 bits\\r\\n     */\\r\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\r\\n        if (value > type(uint24).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(24, value);\\r\\n        }\\r\\n        return uint24(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint16).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint16` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 16 bits\\r\\n     */\\r\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\r\\n        if (value > type(uint16).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(16, value);\\r\\n        }\\r\\n        return uint16(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint8).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint8` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 8 bits\\r\\n     */\\r\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\r\\n        if (value > type(uint8).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(8, value);\\r\\n        }\\r\\n        return uint8(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a signed int256 into an unsigned uint256.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must be greater than or equal to 0.\\r\\n     */\\r\\n    function toUint256(int256 value) internal pure returns (uint256) {\\r\\n        if (value < 0) {\\r\\n            revert SafeCastOverflowedIntToUint(value);\\r\\n        }\\r\\n        return uint256(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int248 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int248 or\\r\\n     * greater than largest int248).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int248` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 248 bits\\r\\n     */\\r\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\r\\n        downcasted = int248(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(248, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int240 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int240 or\\r\\n     * greater than largest int240).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int240` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 240 bits\\r\\n     */\\r\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\r\\n        downcasted = int240(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(240, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int232 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int232 or\\r\\n     * greater than largest int232).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int232` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 232 bits\\r\\n     */\\r\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\r\\n        downcasted = int232(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(232, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int224 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int224 or\\r\\n     * greater than largest int224).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int224` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 224 bits\\r\\n     */\\r\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\r\\n        downcasted = int224(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(224, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int216 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int216 or\\r\\n     * greater than largest int216).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int216` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 216 bits\\r\\n     */\\r\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\r\\n        downcasted = int216(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(216, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int208 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int208 or\\r\\n     * greater than largest int208).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int208` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 208 bits\\r\\n     */\\r\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\r\\n        downcasted = int208(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(208, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int200 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int200 or\\r\\n     * greater than largest int200).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int200` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 200 bits\\r\\n     */\\r\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\r\\n        downcasted = int200(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(200, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int192 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int192 or\\r\\n     * greater than largest int192).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int192` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 192 bits\\r\\n     */\\r\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\r\\n        downcasted = int192(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(192, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int184 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int184 or\\r\\n     * greater than largest int184).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int184` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 184 bits\\r\\n     */\\r\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\r\\n        downcasted = int184(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(184, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int176 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int176 or\\r\\n     * greater than largest int176).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int176` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 176 bits\\r\\n     */\\r\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\r\\n        downcasted = int176(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(176, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int168 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int168 or\\r\\n     * greater than largest int168).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int168` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 168 bits\\r\\n     */\\r\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\r\\n        downcasted = int168(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(168, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int160 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int160 or\\r\\n     * greater than largest int160).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int160` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 160 bits\\r\\n     */\\r\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\r\\n        downcasted = int160(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(160, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int152 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int152 or\\r\\n     * greater than largest int152).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int152` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 152 bits\\r\\n     */\\r\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\r\\n        downcasted = int152(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(152, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int144 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int144 or\\r\\n     * greater than largest int144).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int144` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 144 bits\\r\\n     */\\r\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\r\\n        downcasted = int144(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(144, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int136 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int136 or\\r\\n     * greater than largest int136).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int136` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 136 bits\\r\\n     */\\r\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\r\\n        downcasted = int136(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(136, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int128 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int128 or\\r\\n     * greater than largest int128).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int128` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 128 bits\\r\\n     */\\r\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\r\\n        downcasted = int128(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(128, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int120 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int120 or\\r\\n     * greater than largest int120).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int120` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 120 bits\\r\\n     */\\r\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\r\\n        downcasted = int120(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(120, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int112 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int112 or\\r\\n     * greater than largest int112).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int112` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 112 bits\\r\\n     */\\r\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\r\\n        downcasted = int112(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(112, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int104 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int104 or\\r\\n     * greater than largest int104).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int104` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 104 bits\\r\\n     */\\r\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\r\\n        downcasted = int104(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(104, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int96 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int96 or\\r\\n     * greater than largest int96).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int96` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 96 bits\\r\\n     */\\r\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\r\\n        downcasted = int96(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(96, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int88 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int88 or\\r\\n     * greater than largest int88).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int88` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 88 bits\\r\\n     */\\r\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\r\\n        downcasted = int88(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(88, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int80 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int80 or\\r\\n     * greater than largest int80).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int80` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 80 bits\\r\\n     */\\r\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\r\\n        downcasted = int80(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(80, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int72 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int72 or\\r\\n     * greater than largest int72).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int72` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 72 bits\\r\\n     */\\r\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\r\\n        downcasted = int72(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(72, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int64 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int64 or\\r\\n     * greater than largest int64).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int64` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 64 bits\\r\\n     */\\r\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\r\\n        downcasted = int64(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(64, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int56 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int56 or\\r\\n     * greater than largest int56).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int56` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 56 bits\\r\\n     */\\r\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\r\\n        downcasted = int56(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(56, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int48 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int48 or\\r\\n     * greater than largest int48).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int48` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 48 bits\\r\\n     */\\r\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\r\\n        downcasted = int48(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(48, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int40 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int40 or\\r\\n     * greater than largest int40).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int40` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 40 bits\\r\\n     */\\r\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\r\\n        downcasted = int40(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(40, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int32 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int32 or\\r\\n     * greater than largest int32).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int32` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 32 bits\\r\\n     */\\r\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\r\\n        downcasted = int32(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(32, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int24 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int24 or\\r\\n     * greater than largest int24).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int24` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 24 bits\\r\\n     */\\r\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\r\\n        downcasted = int24(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(24, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int16 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int16 or\\r\\n     * greater than largest int16).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int16` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 16 bits\\r\\n     */\\r\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\r\\n        downcasted = int16(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(16, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int8 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int8 or\\r\\n     * greater than largest int8).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int8` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 8 bits\\r\\n     */\\r\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\r\\n        downcasted = int8(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(8, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an unsigned uint256 into a signed int256.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must be less than or equal to maxInt256.\\r\\n     */\\r\\n    function toInt256(uint256 value) internal pure returns (int256) {\\r\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\r\\n        if (value > uint256(type(int256).max)) {\\r\\n            revert SafeCastOverflowedUintToInt(value);\\r\\n        }\\r\\n        return int256(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\r\\n     */\\r\\n    function toUint(bool b) internal pure returns (uint256 u) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            u := iszero(iszero(b))\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x961a6a8aa2b6fef7d623252db5edca2d69cbc32192240805d5c2ab1e0f6344b1\",\"license\":\"MIT\"},\"contracts/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Standard signed math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary SignedMath {\\r\\n    /**\\r\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\r\\n     *\\r\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\r\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\r\\n     * one branch when needed, making this function more expensive.\\r\\n     */\\r\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\r\\n        unchecked {\\r\\n            // branchless ternary works because:\\r\\n            // b ^ (a ^ b) == a\\r\\n            // b ^ 0 == b\\r\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two signed numbers.\\r\\n     */\\r\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return ternary(a > b, a, b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two signed numbers.\\r\\n     */\\r\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return ternary(a < b, a, b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two signed numbers without overflow.\\r\\n     * The result is rounded towards zero.\\r\\n     */\\r\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\r\\n        // Formula from the book \\\"Hacker's Delight\\\"\\r\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\r\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the absolute unsigned value of a signed value.\\r\\n     */\\r\\n    function abs(int256 n) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\r\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\r\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\r\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\r\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\r\\n            int256 mask = n >> 255;\\r\\n\\r\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\r\\n            return uint256((n + mask) ^ mask);\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x0cbccda1e8f10a7217a92a04970cc83fe09795ad78586917c8a5d932c8d12501\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null}}},"contracts/StorageSlot.sol":{"StorageSlot":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220eec618c105c4ecfd032f48ab6d0d151eb918ec6aa6c5faaff7706d261a605b4864736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEE 0xC6 XOR 0xC1 SDIV 0xC4 0xEC REVERT SUB 0x2F BASEFEE 0xAB PUSH14 0xD151EB918EC6AA6C5FAAFF7706D 0x26 BYTE PUSH1 0x5B BASEFEE PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1439:2883:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1439:2883:16;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220eec618c105c4ecfd032f48ab6d0d151eb918ec6aa6c5faaff7706d261a605b4864736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEE 0xC6 XOR 0xC1 SDIV 0xC4 0xEC REVERT SUB 0x2F BASEFEE 0xAB PUSH14 0xD151EB918EC6AA6C5FAAFF7706D 0x26 BYTE PUSH1 0x5B BASEFEE PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1439:2883:16:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC-1967 implementation slot: ```solidity contract ERC1967 {     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` TIP: Consider using this library along with {SlotDerivation}.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\r\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Library for reading and writing primitive types to specific storage slots.\\r\\n *\\r\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\r\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\r\\n *\\r\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\r\\n *\\r\\n * Example usage to set ERC-1967 implementation slot:\\r\\n * ```solidity\\r\\n * contract ERC1967 {\\r\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\r\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n *\\r\\n *     function _getImplementation() internal view returns (address) {\\r\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\r\\n *     }\\r\\n *\\r\\n *     function _setImplementation(address newImplementation) internal {\\r\\n *         require(newImplementation.code.length > 0);\\r\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * TIP: Consider using this library along with {SlotDerivation}.\\r\\n */\\r\\nlibrary StorageSlot {\\r\\n    struct AddressSlot {\\r\\n        address value;\\r\\n    }\\r\\n\\r\\n    struct BooleanSlot {\\r\\n        bool value;\\r\\n    }\\r\\n\\r\\n    struct Bytes32Slot {\\r\\n        bytes32 value;\\r\\n    }\\r\\n\\r\\n    struct Uint256Slot {\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    struct Int256Slot {\\r\\n        int256 value;\\r\\n    }\\r\\n\\r\\n    struct StringSlot {\\r\\n        string value;\\r\\n    }\\r\\n\\r\\n    struct BytesSlot {\\r\\n        bytes value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\r\\n     */\\r\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := store.slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\r\\n     */\\r\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            r.slot := store.slot\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x85be17dae57122cd5d8658fff9ffa8ef7bf6271cd3d416dd1a9dca13532f1fd0\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null}}},"contracts/Strings.sol":{"Strings":{"abi":[{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"StringsInsufficientHexLength","type":"error"},{"inputs":[],"name":"StringsInvalidAddressFormat","type":"error"},{"inputs":[],"name":"StringsInvalidChar","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220368546be9c15fbe898f46e99811ed9b63d1c1d22d8dd0ba757f16d7eecc9860f64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE DUP6 CHAINID 0xBE SWAP13 ISZERO 0xFB 0xE8 SWAP9 DELEGATECALL PUSH15 0x99811ED9B63D1C1D22D8DD0BA757F1 PUSH14 0x7EECC9860F64736F6C6343000811 STOP CALLER ","sourceMap":"293:16667:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;293:16667:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220368546be9c15fbe898f46e99811ed9b63d1c1d22d8dd0ba757f16d7eecc9860f64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE DUP6 CHAINID 0xBE SWAP13 ISZERO 0xFB 0xE8 SWAP9 DELEGATECALL PUSH15 0x99811ED9B63D1C1D22D8DD0BA757F1 PUSH14 0x7EECC9860F64736F6C6343000811 STOP CALLER ","sourceMap":"293:16667:17:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StringsInvalidAddressFormat\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StringsInvalidChar\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}],\"StringsInvalidAddressFormat()\":[{\"details\":\"The string being parsed is not a properly formatted address.\"}],\"StringsInvalidChar()\":[{\"details\":\"The string being parsed contains characters that are not in scope of the given base.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Muldiv operation overflow.\\r\\n     */\\r\\n    error MathOverflowedMulDiv();\\r\\n\\r\\n    enum Rounding {\\r\\n        Floor, // Toward negative infinity\\r\\n        Ceil, // Toward positive infinity\\r\\n        Trunc, // Toward zero\\r\\n        Expand // Away from zero\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a > b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow.\\r\\n        return (a & b) + (a ^ b) / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ceiling of the division of two numbers.\\r\\n     *\\r\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\r\\n     * of rounding towards zero.\\r\\n     */\\r\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (b == 0) {\\r\\n            // Guarantee the same behavior as in a regular Solidity division.\\r\\n            return a / b;\\r\\n        }\\r\\n\\r\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\r\\n     * denominator == 0.\\r\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\r\\n     * Uniswap Labs also under MIT license.\\r\\n     */\\r\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\r\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\r\\n            // variables such that product = prod1 * 2^256 + prod0.\\r\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\r\\n            uint256 prod1; // Most significant 256 bits of the product\\r\\n            assembly {\\r\\n                let mm := mulmod(x, y, not(0))\\r\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n            }\\r\\n\\r\\n            // Handle non-overflow cases, 256 by 256 division.\\r\\n            if (prod1 == 0) {\\r\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\r\\n                // The surrounding unchecked block does not change this fact.\\r\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\r\\n                return prod0 / denominator;\\r\\n            }\\r\\n\\r\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\r\\n            if (denominator <= prod1) {\\r\\n                revert MathOverflowedMulDiv();\\r\\n            }\\r\\n\\r\\n            ///////////////////////////////////////////////\\r\\n            // 512 by 256 division.\\r\\n            ///////////////////////////////////////////////\\r\\n\\r\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\r\\n            uint256 remainder;\\r\\n            assembly {\\r\\n                // Compute remainder using mulmod.\\r\\n                remainder := mulmod(x, y, denominator)\\r\\n\\r\\n                // Subtract 256 bit number from 512 bit number.\\r\\n                prod1 := sub(prod1, gt(remainder, prod0))\\r\\n                prod0 := sub(prod0, remainder)\\r\\n            }\\r\\n\\r\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\r\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\r\\n\\r\\n            uint256 twos = denominator & (0 - denominator);\\r\\n            assembly {\\r\\n                // Divide denominator by twos.\\r\\n                denominator := div(denominator, twos)\\r\\n\\r\\n                // Divide [prod1 prod0] by twos.\\r\\n                prod0 := div(prod0, twos)\\r\\n\\r\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\r\\n                twos := add(div(sub(0, twos), twos), 1)\\r\\n            }\\r\\n\\r\\n            // Shift in bits from prod1 into prod0.\\r\\n            prod0 |= prod1 * twos;\\r\\n\\r\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\r\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\r\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\r\\n            uint256 inverse = (3 * denominator) ^ 2;\\r\\n\\r\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\r\\n            // works in modular arithmetic, doubling the correct bits in each step.\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\r\\n\\r\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\r\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\r\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\r\\n            // is no longer required.\\r\\n            result = prod0 * inverse;\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\r\\n     */\\r\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\r\\n        uint256 result = mulDiv(x, y, denominator);\\r\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\r\\n            result += 1;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\r\\n     * towards zero.\\r\\n     *\\r\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\r\\n     */\\r\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\r\\n        //\\r\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\r\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\r\\n        //\\r\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\r\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\r\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\r\\n        //\\r\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\r\\n        uint256 result = 1 << (log2(a) >> 1);\\r\\n\\r\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\r\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\r\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\r\\n        // into the expected uint128 result.\\r\\n        unchecked {\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            return min(result, a / result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\r\\n     */\\r\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = sqrt(a);\\r\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 128;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                value >>= 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 4 > 0) {\\r\\n                value >>= 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 2 > 0) {\\r\\n                value >>= 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 1 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log2(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >= 10 ** 64) {\\r\\n                value /= 10 ** 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >= 10 ** 32) {\\r\\n                value /= 10 ** 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >= 10 ** 16) {\\r\\n                value /= 10 ** 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >= 10 ** 8) {\\r\\n                value /= 10 ** 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >= 10 ** 4) {\\r\\n                value /= 10 ** 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >= 10 ** 2) {\\r\\n                value /= 10 ** 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >= 10 ** 1) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log10(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     *\\r\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\r\\n     */\\r\\n    function log256(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log256(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\r\\n     */\\r\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\r\\n        return uint8(rounding) % 2 == 1;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x261822f7c729b791c53b2a67cdfb3e0d99168503824e451a3752009edad39f0d\",\"license\":\"MIT\"},\"contracts/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\r\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\r\\n * easily result in undesired exploitation or bugs, since developers usually\\r\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\r\\n * reverting the transaction when such an operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeCast {\\r\\n    /**\\r\\n     * @dev Value doesn't fit in an uint of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedIntToUint(int256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Value doesn't fit in an int of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\r\\n     */\\r\\n    error SafeCastOverflowedUintToInt(uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint248).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint248` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 248 bits\\r\\n     */\\r\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\r\\n        if (value > type(uint248).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(248, value);\\r\\n        }\\r\\n        return uint248(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint240).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint240` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 240 bits\\r\\n     */\\r\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\r\\n        if (value > type(uint240).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(240, value);\\r\\n        }\\r\\n        return uint240(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint232).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint232` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 232 bits\\r\\n     */\\r\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\r\\n        if (value > type(uint232).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(232, value);\\r\\n        }\\r\\n        return uint232(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint224).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint224` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 224 bits\\r\\n     */\\r\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\r\\n        if (value > type(uint224).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(224, value);\\r\\n        }\\r\\n        return uint224(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint216).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint216` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 216 bits\\r\\n     */\\r\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\r\\n        if (value > type(uint216).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(216, value);\\r\\n        }\\r\\n        return uint216(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint208).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint208` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 208 bits\\r\\n     */\\r\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\r\\n        if (value > type(uint208).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(208, value);\\r\\n        }\\r\\n        return uint208(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint200).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint200` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 200 bits\\r\\n     */\\r\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\r\\n        if (value > type(uint200).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(200, value);\\r\\n        }\\r\\n        return uint200(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint192).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint192` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 192 bits\\r\\n     */\\r\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\r\\n        if (value > type(uint192).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(192, value);\\r\\n        }\\r\\n        return uint192(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint184).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint184` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 184 bits\\r\\n     */\\r\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\r\\n        if (value > type(uint184).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(184, value);\\r\\n        }\\r\\n        return uint184(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint176).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint176` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 176 bits\\r\\n     */\\r\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\r\\n        if (value > type(uint176).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(176, value);\\r\\n        }\\r\\n        return uint176(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint168).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint168` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 168 bits\\r\\n     */\\r\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\r\\n        if (value > type(uint168).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(168, value);\\r\\n        }\\r\\n        return uint168(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint160).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint160` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 160 bits\\r\\n     */\\r\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\r\\n        if (value > type(uint160).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(160, value);\\r\\n        }\\r\\n        return uint160(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint152).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint152` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 152 bits\\r\\n     */\\r\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\r\\n        if (value > type(uint152).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(152, value);\\r\\n        }\\r\\n        return uint152(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint144).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint144` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 144 bits\\r\\n     */\\r\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\r\\n        if (value > type(uint144).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(144, value);\\r\\n        }\\r\\n        return uint144(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint136).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint136` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 136 bits\\r\\n     */\\r\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\r\\n        if (value > type(uint136).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(136, value);\\r\\n        }\\r\\n        return uint136(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint128).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint128` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 128 bits\\r\\n     */\\r\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\r\\n        if (value > type(uint128).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(128, value);\\r\\n        }\\r\\n        return uint128(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint120).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint120` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 120 bits\\r\\n     */\\r\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\r\\n        if (value > type(uint120).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(120, value);\\r\\n        }\\r\\n        return uint120(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint112).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint112` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 112 bits\\r\\n     */\\r\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\r\\n        if (value > type(uint112).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(112, value);\\r\\n        }\\r\\n        return uint112(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint104).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint104` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 104 bits\\r\\n     */\\r\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\r\\n        if (value > type(uint104).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(104, value);\\r\\n        }\\r\\n        return uint104(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint96).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint96` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 96 bits\\r\\n     */\\r\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\r\\n        if (value > type(uint96).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(96, value);\\r\\n        }\\r\\n        return uint96(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint88).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint88` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 88 bits\\r\\n     */\\r\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\r\\n        if (value > type(uint88).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(88, value);\\r\\n        }\\r\\n        return uint88(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint80).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint80` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 80 bits\\r\\n     */\\r\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\r\\n        if (value > type(uint80).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(80, value);\\r\\n        }\\r\\n        return uint80(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint72).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint72` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 72 bits\\r\\n     */\\r\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\r\\n        if (value > type(uint72).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(72, value);\\r\\n        }\\r\\n        return uint72(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint64).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint64` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 64 bits\\r\\n     */\\r\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\r\\n        if (value > type(uint64).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(64, value);\\r\\n        }\\r\\n        return uint64(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint56).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint56` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 56 bits\\r\\n     */\\r\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\r\\n        if (value > type(uint56).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(56, value);\\r\\n        }\\r\\n        return uint56(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint48).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint48` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 48 bits\\r\\n     */\\r\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\r\\n        if (value > type(uint48).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(48, value);\\r\\n        }\\r\\n        return uint48(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint40).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint40` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 40 bits\\r\\n     */\\r\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\r\\n        if (value > type(uint40).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(40, value);\\r\\n        }\\r\\n        return uint40(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint32).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint32` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 32 bits\\r\\n     */\\r\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\r\\n        if (value > type(uint32).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(32, value);\\r\\n        }\\r\\n        return uint32(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint24).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint24` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 24 bits\\r\\n     */\\r\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\r\\n        if (value > type(uint24).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(24, value);\\r\\n        }\\r\\n        return uint24(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint16).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint16` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 16 bits\\r\\n     */\\r\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\r\\n        if (value > type(uint16).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(16, value);\\r\\n        }\\r\\n        return uint16(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint8).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint8` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 8 bits\\r\\n     */\\r\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\r\\n        if (value > type(uint8).max) {\\r\\n            revert SafeCastOverflowedUintDowncast(8, value);\\r\\n        }\\r\\n        return uint8(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a signed int256 into an unsigned uint256.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must be greater than or equal to 0.\\r\\n     */\\r\\n    function toUint256(int256 value) internal pure returns (uint256) {\\r\\n        if (value < 0) {\\r\\n            revert SafeCastOverflowedIntToUint(value);\\r\\n        }\\r\\n        return uint256(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int248 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int248 or\\r\\n     * greater than largest int248).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int248` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 248 bits\\r\\n     */\\r\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\r\\n        downcasted = int248(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(248, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int240 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int240 or\\r\\n     * greater than largest int240).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int240` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 240 bits\\r\\n     */\\r\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\r\\n        downcasted = int240(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(240, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int232 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int232 or\\r\\n     * greater than largest int232).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int232` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 232 bits\\r\\n     */\\r\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\r\\n        downcasted = int232(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(232, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int224 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int224 or\\r\\n     * greater than largest int224).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int224` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 224 bits\\r\\n     */\\r\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\r\\n        downcasted = int224(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(224, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int216 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int216 or\\r\\n     * greater than largest int216).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int216` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 216 bits\\r\\n     */\\r\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\r\\n        downcasted = int216(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(216, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int208 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int208 or\\r\\n     * greater than largest int208).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int208` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 208 bits\\r\\n     */\\r\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\r\\n        downcasted = int208(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(208, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int200 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int200 or\\r\\n     * greater than largest int200).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int200` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 200 bits\\r\\n     */\\r\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\r\\n        downcasted = int200(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(200, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int192 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int192 or\\r\\n     * greater than largest int192).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int192` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 192 bits\\r\\n     */\\r\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\r\\n        downcasted = int192(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(192, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int184 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int184 or\\r\\n     * greater than largest int184).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int184` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 184 bits\\r\\n     */\\r\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\r\\n        downcasted = int184(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(184, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int176 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int176 or\\r\\n     * greater than largest int176).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int176` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 176 bits\\r\\n     */\\r\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\r\\n        downcasted = int176(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(176, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int168 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int168 or\\r\\n     * greater than largest int168).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int168` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 168 bits\\r\\n     */\\r\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\r\\n        downcasted = int168(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(168, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int160 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int160 or\\r\\n     * greater than largest int160).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int160` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 160 bits\\r\\n     */\\r\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\r\\n        downcasted = int160(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(160, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int152 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int152 or\\r\\n     * greater than largest int152).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int152` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 152 bits\\r\\n     */\\r\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\r\\n        downcasted = int152(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(152, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int144 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int144 or\\r\\n     * greater than largest int144).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int144` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 144 bits\\r\\n     */\\r\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\r\\n        downcasted = int144(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(144, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int136 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int136 or\\r\\n     * greater than largest int136).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int136` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 136 bits\\r\\n     */\\r\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\r\\n        downcasted = int136(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(136, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int128 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int128 or\\r\\n     * greater than largest int128).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int128` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 128 bits\\r\\n     */\\r\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\r\\n        downcasted = int128(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(128, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int120 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int120 or\\r\\n     * greater than largest int120).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int120` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 120 bits\\r\\n     */\\r\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\r\\n        downcasted = int120(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(120, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int112 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int112 or\\r\\n     * greater than largest int112).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int112` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 112 bits\\r\\n     */\\r\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\r\\n        downcasted = int112(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(112, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int104 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int104 or\\r\\n     * greater than largest int104).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int104` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 104 bits\\r\\n     */\\r\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\r\\n        downcasted = int104(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(104, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int96 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int96 or\\r\\n     * greater than largest int96).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int96` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 96 bits\\r\\n     */\\r\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\r\\n        downcasted = int96(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(96, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int88 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int88 or\\r\\n     * greater than largest int88).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int88` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 88 bits\\r\\n     */\\r\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\r\\n        downcasted = int88(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(88, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int80 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int80 or\\r\\n     * greater than largest int80).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int80` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 80 bits\\r\\n     */\\r\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\r\\n        downcasted = int80(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(80, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int72 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int72 or\\r\\n     * greater than largest int72).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int72` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 72 bits\\r\\n     */\\r\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\r\\n        downcasted = int72(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(72, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int64 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int64 or\\r\\n     * greater than largest int64).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int64` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 64 bits\\r\\n     */\\r\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\r\\n        downcasted = int64(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(64, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int56 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int56 or\\r\\n     * greater than largest int56).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int56` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 56 bits\\r\\n     */\\r\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\r\\n        downcasted = int56(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(56, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int48 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int48 or\\r\\n     * greater than largest int48).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int48` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 48 bits\\r\\n     */\\r\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\r\\n        downcasted = int48(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(48, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int40 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int40 or\\r\\n     * greater than largest int40).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int40` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 40 bits\\r\\n     */\\r\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\r\\n        downcasted = int40(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(40, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int32 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int32 or\\r\\n     * greater than largest int32).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int32` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 32 bits\\r\\n     */\\r\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\r\\n        downcasted = int32(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(32, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int24 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int24 or\\r\\n     * greater than largest int24).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int24` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 24 bits\\r\\n     */\\r\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\r\\n        downcasted = int24(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(24, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int16 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int16 or\\r\\n     * greater than largest int16).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int16` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 16 bits\\r\\n     */\\r\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\r\\n        downcasted = int16(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(16, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int8 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int8 or\\r\\n     * greater than largest int8).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int8` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 8 bits\\r\\n     */\\r\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\r\\n        downcasted = int8(value);\\r\\n        if (downcasted != value) {\\r\\n            revert SafeCastOverflowedIntDowncast(8, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an unsigned uint256 into a signed int256.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must be less than or equal to maxInt256.\\r\\n     */\\r\\n    function toInt256(uint256 value) internal pure returns (int256) {\\r\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\r\\n        if (value > uint256(type(int256).max)) {\\r\\n            revert SafeCastOverflowedUintToInt(value);\\r\\n        }\\r\\n        return int256(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\r\\n     */\\r\\n    function toUint(bool b) internal pure returns (uint256 u) {\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            u := iszero(iszero(b))\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x961a6a8aa2b6fef7d623252db5edca2d69cbc32192240805d5c2ab1e0f6344b1\",\"license\":\"MIT\"},\"contracts/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Standard signed math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary SignedMath {\\r\\n    /**\\r\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\r\\n     *\\r\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\r\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\r\\n     * one branch when needed, making this function more expensive.\\r\\n     */\\r\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\r\\n        unchecked {\\r\\n            // branchless ternary works because:\\r\\n            // b ^ (a ^ b) == a\\r\\n            // b ^ 0 == b\\r\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two signed numbers.\\r\\n     */\\r\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return ternary(a > b, a, b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two signed numbers.\\r\\n     */\\r\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return ternary(a < b, a, b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two signed numbers without overflow.\\r\\n     * The result is rounded towards zero.\\r\\n     */\\r\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\r\\n        // Formula from the book \\\"Hacker's Delight\\\"\\r\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\r\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the absolute unsigned value of a signed value.\\r\\n     */\\r\\n    function abs(int256 n) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\r\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\r\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\r\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\r\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\r\\n            int256 mask = n >> 255;\\r\\n\\r\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\r\\n            return uint256((n + mask) ^ mask);\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x0cbccda1e8f10a7217a92a04970cc83fe09795ad78586917c8a5d932c8d12501\",\"license\":\"MIT\"},\"contracts/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Strings.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {Math} from \\\"./Math.sol\\\";\\r\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\r\\nimport {SignedMath} from \\\"./SignedMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    using SafeCast for *;\\r\\n\\r\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\r\\n    uint8 private constant ADDRESS_LENGTH = 20;\\r\\n\\r\\n    /**\\r\\n     * @dev The `value` string doesn't fit in the specified `length`.\\r\\n     */\\r\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\r\\n\\r\\n    /**\\r\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\r\\n     */\\r\\n    error StringsInvalidChar();\\r\\n\\r\\n    /**\\r\\n     * @dev The string being parsed is not a properly formatted address.\\r\\n     */\\r\\n    error StringsInvalidAddressFormat();\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            uint256 length = Math.log10(value) + 1;\\r\\n            string memory buffer = new string(length);\\r\\n            uint256 ptr;\\r\\n            assembly (\\\"memory-safe\\\") {\\r\\n                ptr := add(buffer, add(32, length))\\r\\n            }\\r\\n            while (true) {\\r\\n                ptr--;\\r\\n                assembly (\\\"memory-safe\\\") {\\r\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\r\\n                }\\r\\n                value /= 10;\\r\\n                if (value == 0) break;\\r\\n            }\\r\\n            return buffer;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\r\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            return toHexString(value, Math.log256(value) + 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        uint256 localValue = value;\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\r\\n            localValue >>= 4;\\r\\n        }\\r\\n        if (localValue != 0) {\\r\\n            revert StringsInsufficientHexLength(value, length);\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\r\\n     * representation.\\r\\n     */\\r\\n    function toHexString(address addr) internal pure returns (string memory) {\\r\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\r\\n     * representation, according to EIP-55.\\r\\n     */\\r\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\r\\n        bytes memory buffer = bytes(toHexString(addr));\\r\\n\\r\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\r\\n        uint256 hashValue;\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 41; i > 1; --i) {\\r\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\r\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\r\\n                // case shift by xoring with 0x20\\r\\n                buffer[i] ^= 0x20;\\r\\n            }\\r\\n            hashValue >>= 4;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the two strings are equal.\\r\\n     */\\r\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\r\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The string must be formatted as `[0-9]*`\\r\\n     * - The result must fit into an `uint256` type\\r\\n     */\\r\\n    function parseUint(string memory input) internal pure returns (uint256) {\\r\\n        return parseUint(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\\r\\n     * `end` (excluded).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The substring must be formatted as `[0-9]*`\\r\\n     * - The result must fit into an `uint256` type\\r\\n     */\\r\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\r\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\r\\n        if (!success) revert StringsInvalidChar();\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\r\\n     *\\r\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\r\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\r\\n     * character.\\r\\n     *\\r\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseUint(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) internal pure returns (bool success, uint256 value) {\\r\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\r\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {tryParseUint} that does not check bounds and returns (true, 0) if they are invalid.\\r\\n     */\\r\\n    function _tryParseUintUncheckedBounds(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) private pure returns (bool success, uint256 value) {\\r\\n        bytes memory buffer = bytes(input);\\r\\n\\r\\n        uint256 result = 0;\\r\\n        for (uint256 i = begin; i < end; ++i) {\\r\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\r\\n            if (chr > 9) return (false, 0);\\r\\n            result *= 10;\\r\\n            result += chr;\\r\\n        }\\r\\n        return (true, result);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The string must be formatted as `[-+]?[0-9]*`\\r\\n     * - The result must fit in an `int256` type.\\r\\n     */\\r\\n    function parseInt(string memory input) internal pure returns (int256) {\\r\\n        return parseInt(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\r\\n     * `end` (excluded).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\r\\n     * - The result must fit in an `int256` type.\\r\\n     */\\r\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\r\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\r\\n        if (!success) revert StringsInvalidChar();\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\r\\n     * the result does not fit in a `int256`.\\r\\n     *\\r\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\r\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\r\\n     * character or if the result does not fit in a `int256`.\\r\\n     *\\r\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseInt(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) internal pure returns (bool success, int256 value) {\\r\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\r\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {tryParseInt} that does not check bounds and returns (true, 0) if they are invalid.\\r\\n     */\\r\\n    function _tryParseIntUncheckedBounds(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) private pure returns (bool success, int256 value) {\\r\\n        bytes memory buffer = bytes(input);\\r\\n\\r\\n        // Check presence of a negative sign.\\r\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\r\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\r\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\r\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\r\\n\\r\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\r\\n\\r\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\r\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\r\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\r\\n            return (true, type(int256).min);\\r\\n        } else return (false, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\r\\n     * - The result must fit in an `uint256` type.\\r\\n     */\\r\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\r\\n        return parseHexUint(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\\r\\n     * `end` (excluded).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\r\\n     * - The result must fit in an `uint256` type.\\r\\n     */\\r\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\r\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\r\\n        if (!success) revert StringsInvalidChar();\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\r\\n     *\\r\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\r\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\r\\n     * invalid character.\\r\\n     *\\r\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\r\\n     */\\r\\n    function tryParseHexUint(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) internal pure returns (bool success, uint256 value) {\\r\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\r\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {tryParseHexUint} that does not check bounds and returns (true, 0) if they are invalid.\\r\\n     */\\r\\n    function _tryParseHexUintUncheckedBounds(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) private pure returns (bool success, uint256 value) {\\r\\n        bytes memory buffer = bytes(input);\\r\\n\\r\\n        // skip 0x prefix if present\\r\\n        bool hasPrefix = (begin < end + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\r\\n        uint256 offset = hasPrefix.toUint() * 2;\\r\\n\\r\\n        uint256 result = 0;\\r\\n        for (uint256 i = begin + offset; i < end; ++i) {\\r\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\r\\n            if (chr > 15) return (false, 0);\\r\\n            result *= 16;\\r\\n            unchecked {\\r\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\r\\n                // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.\\r\\n                result += chr;\\r\\n            }\\r\\n        }\\r\\n        return (true, result);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\r\\n     */\\r\\n    function parseAddress(string memory input) internal pure returns (address) {\\r\\n        return parseAddress(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\\r\\n     * `end` (excluded).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\r\\n     */\\r\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\r\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\r\\n        if (!success) revert StringsInvalidAddressFormat();\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\r\\n     * formatted address. See {parseAddress} requirements.\\r\\n     */\\r\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\r\\n        return tryParseAddress(input, 0, bytes(input).length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\r\\n     * formatted address. See {parseAddress} requirements.\\r\\n     */\\r\\n    function tryParseAddress(\\r\\n        string memory input,\\r\\n        uint256 begin,\\r\\n        uint256 end\\r\\n    ) internal pure returns (bool success, address value) {\\r\\n        // check that input is the correct length\\r\\n        bool hasPrefix = (begin < end + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\r\\n\\r\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\r\\n\\r\\n        if (end - begin == expectedLength && end <= bytes(input).length) {\\r\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\r\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\r\\n            return (s, address(uint160(v)));\\r\\n        } else {\\r\\n            return (false, address(0));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\r\\n        uint8 value = uint8(chr);\\r\\n\\r\\n        // Try to parse `chr`:\\r\\n        // - Case 1: [0-9]\\r\\n        // - Case 2: [a-f]\\r\\n        // - Case 3: [A-F]\\r\\n        // - otherwise not supported\\r\\n        unchecked {\\r\\n            if (value > 47 && value < 58) value -= 48;\\r\\n            else if (value > 96 && value < 103) value -= 87;\\r\\n            else if (value > 64 && value < 71) value -= 55;\\r\\n            else return type(uint8).max;\\r\\n        }\\r\\n\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\r\\n     *\\r\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\r\\n     * assembly block as such would prevent some optimizations.\\r\\n     */\\r\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\r\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\r\\n        assembly (\\\"memory-safe\\\") {\\r\\n            value := mload(add(buffer, add(0x20, offset)))\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xce5ca113d4cd3005cbf2109590734a0410a5eebc6fc94d258af1897a40c29341\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null}}}}}}